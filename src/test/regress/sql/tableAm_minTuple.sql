-- minimum tuple tests

-- Test for char type.

CREATE TABLE TESTMINTUPLE_CHAR_TBL(f1 char);

INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('a');

INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('A');

-- any of the following three input formats are acceptable
INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('1');

INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES (2);

INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('3');

-- zero-length char
INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('');

-- try char's of greater than 1 length
INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('cd');
INSERT INTO TESTMINTUPLE_CHAR_TBL (f1) VALUES ('c     ');

-- Sorting the table is done via ExecSort() which uses ExecCopySlotMinimalTuple and ExecStoreMinimalTuple. 

SELECT '' AS seven, * FROM TESTMINTUPLE_CHAR_TBL ORDER BY f1;

SELECT '' AS six, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 <> 'a' ORDER BY f1;

SELECT '' AS one, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 = 'a';

SELECT '' AS five, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 < 'a' ORDER BY f1;

SELECT '' AS six, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 <= 'a' ORDER BY f1;

SELECT '' AS one, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 > 'a' ORDER BY f1;

SELECT '' AS two, c.*
   FROM TESTMINTUPLE_CHAR_TBL c
   WHERE c.f1 >= 'a' ORDER BY f1;

DROP TABLE TESTMINTUPLE_CHAR_TBL;


CREATE TABLE TESTMINTUPLE_INT_TBL(q1 int8, q2 int8);

INSERT INTO TESTMINTUPLE_INT_TBL VALUES('  123   ','  456');
INSERT INTO TESTMINTUPLE_INT_TBL VALUES('123   ','4567890123456789');
INSERT INTO TESTMINTUPLE_INT_TBL VALUES('4567890123456789','123');
INSERT INTO TESTMINTUPLE_INT_TBL VALUES(+4567890123456789,'4567890123456789');
INSERT INTO TESTMINTUPLE_INT_TBL VALUES('+4567890123456789','-4567890123456789');

-- bad inputs
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('      ');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('xxx');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('3908203590239580293850293850329485');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('-1204982019841029840928340329840934');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('- 123');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('  345     5');
INSERT INTO TESTMINTUPLE_INT_TBL(q1) VALUES ('');


-- Sorting the table is done via ExecSort() which uses ExecCopySlotMinimalTuple and ExecStoreMinimalTuple. 

SELECT * FROM TESTMINTUPLE_INT_TBL ORDER BY q1,q2;

-- int8/int8 cmp
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 = 4567890123456789 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <> 4567890123456789 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 < 4567890123456789 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 > 4567890123456789 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <= 4567890123456789 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 >= 4567890123456789 ORDER BY q1,q2;

-- int8/int4 cmp
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 = 456 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <> 456 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 < 456 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 > 456 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <= 456 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 >= 456 ORDER BY q1,q2;

-- int4/int8 cmp
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 = q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 <> q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 < q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 > q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 <= q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE 123 >= q1 ORDER BY q1,q2;

-- int8/int2 cmp
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 = '456'::int2 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <> '456'::int2 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 < '456'::int2 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 > '456'::int2 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 <= '456'::int2 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE q2 >= '456'::int2 ORDER BY q1,q2;

-- int2/int8 cmp
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 = q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 <> q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 < q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 > q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 <= q1 ORDER BY q1,q2;
SELECT * FROM TESTMINTUPLE_INT_TBL WHERE '123'::int2 >= q1 ORDER BY q1,q2;


SELECT '' AS five, q1 AS plus, -q1 AS minuz FROM TESTMINTUPLE_INT_TBL ORDER BY q1;

SELECT '' AS five, q1, q2, q1 + q2 AS plus FROM TESTMINTUPLE_INT_TBL ORDER BY q1,q2;
SELECT '' AS five, q1, q2, q1 - q2 AS minuz FROM TESTMINTUPLE_INT_TBL ORDER BY q1,q2;
SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM TESTMINTUPLE_INT_TBL ORDER BY q1,q2;
SELECT '' AS three, q1, q2, q1 * q2 AS multiply FROM TESTMINTUPLE_INT_TBL
 WHERE q1 < 1000 or (q2 > 0 and q2 < 1000) ORDER BY q1,q2;
SELECT '' AS five, q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM TESTMINTUPLE_INT_TBL ORDER BY q1,q2;

SELECT '' AS five, q1, float8(q1) FROM TESTMINTUPLE_INT_TBL ORDER BY q1;
SELECT '' AS five, q2, float8(q2) FROM TESTMINTUPLE_INT_TBL ORDER BY q2;

SELECT 37 + q1 AS plus4 FROM TESTMINTUPLE_INT_TBL ORDER BY q1;
SELECT 37 - q1 AS minus4 FROM TESTMINTUPLE_INT_TBL ORDER BY q1;
SELECT '' AS five, 2 * q1 AS "twice int4" FROM TESTMINTUPLE_INT_TBL ORDER BY q1;
SELECT '' AS five, q1 * 2 AS "twice int4" FROM TESTMINTUPLE_INT_TBL ORDER BY q1;

drop table TESTMINTUPLE_INT_TBL;


CREATE TABLE MINTUPLE_BOOL_TABLE_1 (f1 bool);

INSERT INTO MINTUPLE_BOOL_TABLE_1 (f1) VALUES (bool 't');

INSERT INTO MINTUPLE_BOOL_TABLE_1 (f1) VALUES (bool 'True');

INSERT INTO MINTUPLE_BOOL_TABLE_1 (f1) VALUES (bool 'true');


-- MINTUPLE_BOOL_TABLE_1 should be full of true's at this point
SELECT '' AS t_3, MINTUPLE_BOOL_TABLE_1.* FROM MINTUPLE_BOOL_TABLE_1;


SELECT '' AS t_3, MINTUPLE_BOOL_TABLE_1.*
   FROM MINTUPLE_BOOL_TABLE_1
   WHERE f1 = bool 'true';


SELECT '' AS t_3, MINTUPLE_BOOL_TABLE_1.*
   FROM MINTUPLE_BOOL_TABLE_1
   WHERE f1 <> bool 'false';

SELECT '' AS zero, MINTUPLE_BOOL_TABLE_1.*
   FROM MINTUPLE_BOOL_TABLE_1
   WHERE booleq(bool 'false', f1);

INSERT INTO MINTUPLE_BOOL_TABLE_1 (f1) VALUES (bool 'f');

SELECT '' AS f_1, MINTUPLE_BOOL_TABLE_1.*
   FROM MINTUPLE_BOOL_TABLE_1
   WHERE f1 = bool 'false';


CREATE TABLE MINTUPLE_BOOL_TABLE_2 (f1 bool);

INSERT INTO MINTUPLE_BOOL_TABLE_2 (f1) VALUES (bool 'f');

INSERT INTO MINTUPLE_BOOL_TABLE_2 (f1) VALUES (bool 'false');

INSERT INTO MINTUPLE_BOOL_TABLE_2 (f1) VALUES (bool 'False');

INSERT INTO MINTUPLE_BOOL_TABLE_2 (f1) VALUES (bool 'FALSE');

-- This is now an invalid expression
-- For pre-v6.3 this evaluated to false - thomas 1997-10-23
INSERT INTO MINTUPLE_BOOL_TABLE_2 (f1)
   VALUES (bool 'XXX');

-- MINTUPLE_BOOL_TABLE_2 should be full of false's at this point
SELECT '' AS f_4, MINTUPLE_BOOL_TABLE_2.* FROM MINTUPLE_BOOL_TABLE_2;


SELECT '' AS tf_12, MINTUPLE_BOOL_TABLE_1.*, MINTUPLE_BOOL_TABLE_2.*
   FROM MINTUPLE_BOOL_TABLE_1, MINTUPLE_BOOL_TABLE_2
   WHERE MINTUPLE_BOOL_TABLE_2.f1 <> MINTUPLE_BOOL_TABLE_1.f1;


SELECT '' AS tf_12, MINTUPLE_BOOL_TABLE_1.*, MINTUPLE_BOOL_TABLE_2.*
   FROM MINTUPLE_BOOL_TABLE_1, MINTUPLE_BOOL_TABLE_2
   WHERE boolne(MINTUPLE_BOOL_TABLE_2.f1,MINTUPLE_BOOL_TABLE_1.f1);

-- Joining of two tables is done via ExecHashJoin which uses ExecCopySlotMinimalTuple, ExecFetchSlotMinimalTuple and ExecStoreMinimalTuple. 

SELECT '' AS ff_4, MINTUPLE_BOOL_TABLE_1.*, MINTUPLE_BOOL_TABLE_2.*
   FROM MINTUPLE_BOOL_TABLE_1, MINTUPLE_BOOL_TABLE_2
   WHERE MINTUPLE_BOOL_TABLE_2.f1 = MINTUPLE_BOOL_TABLE_1.f1 and MINTUPLE_BOOL_TABLE_1.f1 = bool 'false';


SELECT '' AS tf_12_ff_4, MINTUPLE_BOOL_TABLE_1.*, MINTUPLE_BOOL_TABLE_2.*
   FROM MINTUPLE_BOOL_TABLE_1, MINTUPLE_BOOL_TABLE_2
   WHERE MINTUPLE_BOOL_TABLE_2.f1 = MINTUPLE_BOOL_TABLE_1.f1 or MINTUPLE_BOOL_TABLE_1.f1 = bool 'true'
   ORDER BY MINTUPLE_BOOL_TABLE_1.f1, MINTUPLE_BOOL_TABLE_2.f1;
   
drop table MINTUPLE_BOOL_TABLE_1;

drop table MINTUPLE_BOOL_TABLE_2;

 
