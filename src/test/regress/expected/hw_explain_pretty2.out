----
--- CREATE TABLE
----
set codegen_cost_threshold=0;
create schema explain_pretty;
set current_schema=explain_pretty;
create table explain_pretty.EXPLAIN_PRETTY_TABLE_01
(
   col_int	int
  ,col_int2	int
  ,col_num	numeric(10,4)
  ,col_char	char
  ,col_varchar	varchar(20)
  ,col_date	date
  ,col_interval	interval
) with(orientation=column);
COPY EXPLAIN_PRETTY_TABLE_01(col_int, col_int2, col_num, col_char, col_varchar, col_date, col_interval) FROM stdin;
create table explain_pretty.EXPLAIN_PRETTY_TABLE_02
(
   col_int	int
  ,col_int2	int
  ,col_num	numeric(10,4)
  ,col_char	char
  ,col_varchar	varchar(20)
  ,col_date	date
  ,col_interval	interval
) with(orientation=column);
COPY EXPLAIN_PRETTY_TABLE_02(col_int, col_int2, col_num, col_char, col_varchar, col_date, col_interval) FROM stdin;
analyze EXPLAIN_PRETTY_TABLE_01;
analyze EXPLAIN_PRETTY_TABLE_02;
create table row_append_table_01 as select * from EXPLAIN_PRETTY_TABLE_01;
create table row_append_table_02 as select * from EXPLAIN_PRETTY_TABLE_02;
analyze row_append_table_01;
analyze row_append_table_02;
explain (verbose on, costs off, analyze on, cpu on)
(select col_interval from EXPLAIN_PRETTY_TABLE_01 where col_int > 11) union (select col_interval from EXPLAIN_PRETTY_TABLE_02 where col_int > 12) order by col_interval;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
--? Row Adapter (actual time=.* rows=3 loops=1)
   Output: explain_pretty_table_01.col_interval
--?   (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?   ->  Vector Sort (actual time=.* rows=3 loops=1)
         Output: explain_pretty_table_01.col_interval
         Sort Key: explain_pretty_table_01.col_interval
         Sort Method: quicksort  Memory: 2kB
--?         (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?         ->  Vector Sonic Hash Aggregate (actual time=.* rows=3 loops=1)
               Output: explain_pretty_table_01.col_interval
               Group By Key: explain_pretty_table_01.col_interval
--?               (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?               ->  Vector Append (actual time=.* rows=13 loops=1)
--?                     (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?                     ->  CStore Scan on explain_pretty.explain_pretty_table_01 (actual time=.* rows=11 loops=1)
                           Output: explain_pretty_table_01.col_interval
                           Filter: (explain_pretty_table_01.col_int > 11)
                           Rows Removed by Filter: 1
--?                           (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?                     ->  CStore Scan on explain_pretty.explain_pretty_table_02 (actual time=.* rows=2 loops=1)
                           Output: explain_pretty_table_02.col_interval
                           Filter: (explain_pretty_table_02.col_int > 12)
                           Rows Removed by Filter: 3
--?                           (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--? Total runtime: .* ms
(25 rows)

explain (verbose on, costs off, analyze on, cpu on)
(select col_interval from row_append_table_01 where col_int > 11) union (select col_interval from row_append_table_02 where col_int > 12) order by col_interval;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
--? Sort (actual time=.* rows=3 loops=1)
   Output: row_append_table_01.col_interval
   Sort Key: row_append_table_01.col_interval
   Sort Method: quicksort  Memory: 25kB
--?   (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?   ->  HashAggregate (actual time=.* rows=3 loops=1)
         Output: row_append_table_01.col_interval
         Group By Key: row_append_table_01.col_interval
--?         (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?         ->  Append (actual time=.* rows=13 loops=1)
--?               (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?               ->  Seq Scan on explain_pretty.row_append_table_01 (actual time=.* rows=11 loops=1)
                     Output: row_append_table_01.col_interval
                     Filter: (row_append_table_01.col_int > 11)
                     Rows Removed by Filter: 1
--?                     (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--?               ->  Seq Scan on explain_pretty.row_append_table_02 (actual time=.* rows=2 loops=1)
                     Output: row_append_table_02.col_interval
                     Filter: (row_append_table_02.col_int > 12)
                     Rows Removed by Filter: 3
--?                     (CPU: ex c/r=.*, ex row=.*, ex cyc=.*, inc cyc=.*)
--? Total runtime: .* ms
(22 rows)

explain (analyze on, costs off, timing off) select * from row_append_table_01 join row_append_table_02 on row_append_table_01.col_int=row_append_table_02.col_int and row_append_table_01.col_int + row_append_table_02.col_int > 100;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Hash Join (actual rows=0 loops=1)
   Hash Cond: (row_append_table_01.col_int = row_append_table_02.col_int)
   Join Filter: ((row_append_table_01.col_int + row_append_table_02.col_int) > 100)
   Rows Removed by Join Filter: 9
   ->  Seq Scan on row_append_table_01 (actual rows=12 loops=1)
   ->  Hash (actual rows=5 loops=1)
          Buckets: 32768  Batches: 1  Memory Usage: 1kB
         ->  Seq Scan on row_append_table_02 (actual rows=5 loops=1)
--? Total runtime: .* ms
(9 rows)

--test sort,hashagg, cpu buffer
set explain_perf_mode = run;
\o hw_explain_pretty_result.txt
explain performance select * from row_append_table_01 where col_int > 15;
explain (analyze on, timing off) select * from row_append_table_01 join row_append_table_02 on row_append_table_01.col_int=row_append_table_02.col_int and row_append_table_01.col_int + row_append_table_02.col_int > 100;
explain performance
 (select distinct
col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2<23 order by col_char) 
union
(select distinct col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2>=23)
union
(select distinct col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2 = 26) order by col_char, col_varchar;
explain (analyze on, cpu on, buffers on)
 (select distinct
col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2<23 order by col_char) 
union
(select distinct col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2>=23)
union
(select distinct col_char, col_varchar from EXPLAIN_PRETTY_TABLE_01 where col_int2 = 26) order by col_char, col_varchar;
--test setop
explain select t1.col_int from  EXPLAIN_PRETTY_TABLE_01  t1 minus select t2.col_int from  EXPLAIN_PRETTY_TABLE_02 t2;
--test subquery
explain performance
select t1.col_int from  EXPLAIN_PRETTY_TABLE_01  t1 intersect all (select t2.col_int from  EXPLAIN_PRETTY_TABLE_02 t2) order by 1;
explain performance
select t1.col_int from  row_append_table_01  t1 intersect all (select t2.col_int from  row_append_table_02 t2) order by 1;
--test hashjoin
set enable_nestloop=off;
set enable_mergejoin=off;
explain (analyze on, cpu on, buffers on)
 select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
explain performance
 select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
--test left join
explain performance
select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 left join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
set enable_vector_engine=off;
explain performance
 select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23 order by 1;
reset enable_vector_engine;
--test nestloop
set enable_hashjoin=off;
set enable_mergejoin=off;
set enable_nestloop=on;
explain verbose select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
explain performance
select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 left join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
\o
\! rm hw_explain_pretty_result.txt
--error condition
explain (format xml, verbose on) select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
ERROR:  explain_perf_mode requires FORMAT TEXT
--test multi query
set enable_nestloop=off;
set enable_mergejoin=off;
set enable_hashjoin=on;
select 1\; explain analyze select count(*) from  EXPLAIN_PRETTY_TABLE_01  t1 join EXPLAIN_PRETTY_TABLE_01 t2 on t1.col_int2 = t2.col_int2  where t1.col_int2<23;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
--? Row Adapter  (cost=.* rows=1 width=8) (actual time=.* rows=1 loops=1)
--?   ->  Vector Aggregate  (cost=.* rows=1 width=8) (actual time=.* rows=1 loops=1)
--?         ->  Vector Sonic Hash Join  (cost=.* rows=6 width=0) (actual time=.* rows=7 loops=1)
               Hash Cond: (t1.col_int2 = t2.col_int2)
--?               ->  CStore Scan on explain_pretty_table_01 t1  (cost=.* rows=6 width=4) (actual time=.* rows=5 loops=1)
                     Filter: (col_int2 < 23)
                     Rows Removed by Filter: 7
--?               ->  CStore Scan on explain_pretty_table_01 t2  (cost=.* rows=6 width=4) (actual time=.* rows=5 loops=1)
                     Filter: (col_int2 < 23)
                     Rows Removed by Filter: 7
--? Total runtime: .* ms
(11 rows)

---
create table explain_pretty.row_EXPLAIN_PRETTY_TABLE_01
(
   col_int	int
  ,col_int2	int
  ,col_num	numeric(10,4)
  ,col_char	char
  ,col_varchar	varchar(20)
  ,col_date	date
  ,col_interval	interval
);
create table explain_pretty.row_EXPLAIN_PRETTY_TABLE_02
(
   col_int	int
  ,col_int2	int
  ,col_num	numeric(10,4)
  ,col_char	char
  ,col_varchar	varchar(20)
  ,col_date	date
  ,col_interval	interval
);
\o hw_explain_pretty_result.txt
--test subplans
explain analyze  insert into explain_pretty.row_EXPLAIN_PRETTY_TABLE_01 select * from explain_pretty.EXPLAIN_PRETTY_TABLE_01;
--test bitmap
create table test_bitmap (a int, b int, c int);
insert into test_bitmap values (null, generate_series(1, 20), null);
insert into test_bitmap values (null, null, generate_series(1, 20));
create index idx_b on test_bitmap (b);
create index idx_c on test_bitmap (c);
analyze test_bitmap;
set enable_seqscan = off;
set enable_indexscan = off;
explain performance select * from test_bitmap where b<10 and c<5;
explain (analyze on, cpu on, buffers on) select * from test_bitmap where b<10 and c<5;
explain performance select * from test_bitmap where b<10 or c<5;
explain (analyze on, cpu on, buffers on) select * from test_bitmap where b<10 or c<5;
\o
\! rm hw_explain_pretty_result.txt
--test partition table
CREATE TABLE EXPLAIN_PRETTY_TABLE_05(
    a1 character varying(1000),
    a2 integer
)
WITH (orientation=column)
PARTITION BY RANGE (a2)
(
    PARTITION p1 VALUES LESS THAN (5),
    PARTITION p2 VALUES LESS THAN (10)
);
insert into EXPLAIN_PRETTY_TABLE_05 values('a',1);
insert into EXPLAIN_PRETTY_TABLE_05 values('a',5);
\o hw_explain_pretty_result.txt
explain select * from EXPLAIN_PRETTY_TABLE_05 order by 2;
\o
\! rm hw_explain_pretty_result.txt
CREATE TABLE EXPLAIN_PRETTY_TABLE_06
(
    L_ORDERKEY    BIGINT NOT NULL
  , L_PARTKEY     BIGINT NOT NULL
  , L_SUPPKEY     BIGINT NOT NULL
  , L_LINENUMBER  BIGINT NOT NULL
  , L_QUANTITY    DECIMAL(15,2) NOT NULL
  , L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL
  , L_DISCOUNT    DECIMAL(15,2) NOT NULL
  , L_TAX         DECIMAL(15,2) NOT NULL
  , L_RETURNFLAG  CHAR(1) NOT NULL
  , L_LINESTATUS  CHAR(1) NOT NULL
  , L_SHIPDATE    DATE NOT NULL
  , L_COMMITDATE  DATE NOT NULL
  , L_RECEIPTDATE DATE NOT NULL
  , L_SHIPINSTRUCT CHAR(25) NOT NULL
  , L_SHIPMODE     CHAR(10) NOT NULL
  , L_COMMENT      VARCHAR(44) NOT NULL
  --, primary key (L_ORDERKEY, L_LINENUMBER)
)
with (orientation = column)
PARTITION BY RANGE(L_SHIPDATE)
(
    PARTITION L_SHIPDATE_1 VALUES LESS THAN('1993-01-01 00:00:00'),
    PARTITION L_SHIPDATE_2 VALUES LESS THAN('1994-01-01 00:00:00'),
    PARTITION L_SHIPDATE_3 VALUES LESS THAN('1995-01-01 00:00:00'),
	PARTITION L_SHIPDATE_4 VALUES LESS THAN('1996-01-01 00:00:00'),
	PARTITION L_SHIPDATE_5 VALUES LESS THAN('1997-01-01 00:00:00'),
	PARTITION L_SHIPDATE_6 VALUES LESS THAN('1998-01-01 00:00:00'),
	PARTITION L_SHIPDATE_7 VALUES LESS THAN('1999-01-01 00:00:00')
)
;
create index lineitem_index on EXPLAIN_PRETTY_TABLE_06(l_orderkey) local;
set enable_seqscan=off;
set enable_tidscan=off;
set enable_indexscan = on;
set enable_bitmapscan=off;
explain (costs off) delete from EXPLAIN_PRETTY_TABLE_06 where l_orderkey<1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Delete on explain_pretty_table_06
         ->  Vector Partition Iterator
               Iterations: 7
               ->  Partitioned CStore Index Scan using lineitem_index on explain_pretty_table_06
                     Index Cond: (l_orderkey < 1)
                     Selected Partitions:  1..7
(7 rows)

-- test subplan executed on CN
create table store_sales_extend_min_1t
(
	ss_item_sk int,
	ss_sold_date_sk smallint,
	ss_ticket_number bigint,
	ss_date date,
	ss_time time,
	ss_timestamp timestamp,
	ss_list_price decimal(7,2)
)
with (orientation = column);
create table store_sales_extend_max_1t
(ss_item_sk int,
	ss_sold_date_sk smallint,
	ss_ticket_number bigint,
	ss_date date,
	ss_time time,
	ss_timestamp timestamp,
	ss_list_price decimal(7,2)
)
with (orientation = column);
\o hw_explain_pretty_result.txt
explain performance select min((select max(ss_date) from store_sales_extend_min_1t) + (select min(ss_time) from store_sales_extend_max_1t)) from store_sales_extend_min_1t;
\o
\! rm hw_explain_pretty_result.txt
-- test declare curosr
set explain_perf_mode=normal;
start transaction;
explain (costs off) cursor cursor_1 for select count(*) from store_sales_extend_min_1t;
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on store_sales_extend_min_1t
(3 rows)

explain analyze cursor cursor_1 for select count(*) from store_sales_extend_min_1t;
ERROR:  EXPLAIN ANALYZE is not supported when declaring a cursor.
DETAIL:  Query is not actually executed when declaring a cursor.
end;
set explain_perf_mode=pretty;
start transaction;
explain (costs off) cursor cursor_1 for select count(*) from store_sales_extend_min_1t;
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on store_sales_extend_min_1t
(3 rows)

explain analyze cursor cursor_1 for select count(*) from store_sales_extend_min_1t;
ERROR:  EXPLAIN ANALYZE is not supported when declaring a cursor.
DETAIL:  Query is not actually executed when declaring a cursor.
end;
--test rows Removed by Filter for partition table and nestloop when nloops larger than 1
set explain_perf_mode=normal; 
create table tbl_part(a int) partition by range(a)
(
partition P1 values less than (10),
partition P2 values less than (20),
partition P3 values less than (30),
partition P4 values less than (40),
partition P5 values less than (MAXVALUE)
);
insert into tbl_part values(generate_series(1,50));
select count(*) from tbl_part;
 count 
-------
    50
(1 row)

select count(*) from tbl_part where a%2=0;
 count 
-------
    25
(1 row)

explain analyze select count(*) from tbl_part where a%2=0;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
--? Aggregate  (cost=.* rows=1 width=8) (actual time=.* rows=1 loops=1)
--?   ->  Partition Iterator  (cost=.* rows=12 width=0) (actual time=.* rows=25 loops=1)
         Iterations: 5
--?         ->  Partitioned Seq Scan on tbl_part  (cost=.* rows=12 width=0) (actual time=.* rows=25 loops=5)
               Filter: ((a % 2) = 0)
               Rows Removed by Filter: 25
               Selected Partitions:  1..5
--? Total runtime: .* ms
(8 rows)

Drop table tbl_part cascade;
set enable_mergejoin=off;
set enable_hashjoin=off;
create table tb1_nestloop(a int,b int);
create table tb2_nestloop (a int,d int);
insert into tb1_nestloop values(generate_series(1,10), generate_series(1,10));
insert into tb2_nestloop values(generate_series(1,20), generate_series(1,20));
analyze tb1_nestloop;
analyze tb2_nestloop;
explain analyze select * from tb1_nestloop ,tb2_nestloop where tb1_nestloop.a= tb2_nestloop.d and tb1_nestloop.a%2=0 and tb2_nestloop.a%2=0;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
--? Nested Loop  (cost=.* rows=1 width=16) (actual time=.* rows=.* loops=1)
   Join Filter: (tb1_nestloop.a = tb2_nestloop.d)
   Rows Removed by Join Filter: 45
--?   ->  Seq Scan on tb1_nestloop  (cost=.* rows=1 width=8) (actual time=.* rows=.* loops=1)
         Filter: ((a % 2) = 0)
         Rows Removed by Filter: 5
--?   ->  Seq Scan on tb2_nestloop  (cost=.* rows=1 width=8) (actual time=.* rows=.* loops=5)
         Filter: (((a % 2) = 0) AND ((d % 2) = 0))
         Rows Removed by Filter: 50
--? Total runtime: .* ms
(10 rows)

set enable_mergejoin=on;
set enable_hashjoin=on;
drop table tb1_nestloop cascade;
drop table tb2_nestloop cascade;
drop schema explain_pretty cascade;
NOTICE:  drop cascades to 11 other objects
DETAIL:  drop cascades to table explain_pretty_table_01
drop cascades to table explain_pretty_table_02
drop cascades to table row_append_table_01
drop cascades to table row_append_table_02
drop cascades to table row_explain_pretty_table_01
drop cascades to table row_explain_pretty_table_02
drop cascades to table test_bitmap
drop cascades to table explain_pretty_table_05
drop cascades to table explain_pretty_table_06
drop cascades to table store_sales_extend_min_1t
drop cascades to table store_sales_extend_max_1t
