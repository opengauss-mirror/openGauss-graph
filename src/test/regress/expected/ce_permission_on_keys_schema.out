\! gs_ktool -d all
DELETE ALL

\! gs_ktool -g
GENERATE
1
DROP CLIENT MASTER KEY IF EXISTS MyCMK1 CASCADE;
NOTICE:  client master key "mycmk1" does not exist
-- create another user
DROP ROLE IF EXISTS newuser;
NOTICE:  role "newuser" does not exist, skipping
CREATE USER newuser PASSWORD 'gauss@123';
-- create schema
DROP SCHEMA IF EXISTS testns CASCADE;
NOTICE:  schema "testns" does not exist, skipping
CREATE SCHEMA testns;
SET search_path to testns;
-- grant privileges on schema (ALL = USAGE, CREATE)
GRANT ALL ON SCHEMA testns TO newuser;
-- CREATE CMK
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
-- CREATE CEK
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
-- SHOULD FAILL - create TABLE using existing MyCEK1 (missing permissions to both MyCEK1 and MyCMK1)
CREATE TABLE acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC));
ERROR:  permission denied for column encryption key mycek1
DETAIL:  N/A
RESET SESSION AUTHORIZATION;
-- add permission to the keys to newuser (ALL = USAGE, DROP)
GRANT USAGE ON COLUMN_ENCRYPTION_KEY MyCEK1 to newuser;
GRANT USAGE ON CLIENT_MASTER_KEY MyCMK1 to newuser;
-------------------------
-- change to new user
-------------------------
SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
-- create TABLE 
CREATE TABLE acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC));
SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'USAGE');
 has_cmk_privilege 
-------------------
 t
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'USAGE');
 has_cek_privilege 
-------------------
 t
(1 row)

SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'DROP');
 has_cmk_privilege 
-------------------
 f
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'DROP');
 has_cek_privilege 
-------------------
 f
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'USAGE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'CREATE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_table_privilege('newuser', 'acltest1', 'INSERT, SELECT, UPDATE, DELETE, TRUNCATE, TRIGGER');
 has_table_privilege 
---------------------
 t
(1 row)

--check key namespace
SELECT nspname FROM pg_namespace JOIN gs_client_global_keys on pg_namespace.Oid = key_namespace;
 nspname 
---------
 testns
(1 row)

SELECT nspname FROM pg_namespace JOIN gs_column_keys on pg_namespace.Oid = key_namespace;
 nspname 
---------
 testns
(1 row)

RESET SESSION AUTHORIZATION;
--check key owner
SELECT count(usename) FROM pg_user JOIN gs_client_global_keys on usesysid = key_owner;
 count 
-------
     1
(1 row)

SELECT count(usename) FROM pg_user JOIN gs_column_keys on usesysid = key_owner;
 count 
-------
     1
(1 row)

--check drop cek/cmk if encrypted table exist(false)
DROP COLUMN ENCRYPTION KEY MyCEK1;
ERROR:  cannot drop column encryption key: mycek1 because other objects depend on it
DETAIL:  encrypted column: x2 depends on column encryption key: mycek1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP CLIENT MASTER KEY MyCMK1;
ERROR:  cannot drop client master key: mycmk1 because other objects depend on it
DETAIL:  column encryption key: mycek1 depends on client master key: mycmk1
encrypted column: x2 depends on column encryption key: mycek1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
--check drop cek/cmk cascade if encrypted table exist(false)
DROP COLUMN ENCRYPTION KEY MyCEK1 CASCADE;
ERROR:  cannot drop column encryption key: mycek1 cascadely because encrypted column depend on it.
HINT:  we have to drop encrypted column: x2, ... before drop column encryption key: mycek1 cascadely.
DROP CLIENT MASTER KEY MyCMK1 CASCADE;
ERROR:  cannot drop client master key: mycmk1 cascadely because encrypted column depend on it.
HINT:  we have to drop encrypted column: x2, ... before drop client master key: mycmk1 cascadely.
--check drop table(success)
DROP TABLE acltest1;
SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
--check DROP KEY WITHOUT PREMISSION(false)
DROP COLUMN ENCRYPTION KEY MyCEK1;
ERROR:  permission denied for column encryption key mycek1
DETAIL:  N/A
DROP CLIENT MASTER KEY MyCMK1;
ERROR:  cannot drop client master key: mycmk1 because other objects depend on it
DETAIL:  column encryption key: mycek1 depends on client master key: mycmk1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
--check DELETE KEYS(false)
delete from gs_client_global_keys;
ERROR:  permission denied for relation gs_client_global_keys
DETAIL:  N/A
delete from gs_column_keys;
ERROR:  permission denied for relation gs_column_keys
DETAIL:  N/A
RESET SESSION AUTHORIZATION;
REVOKE USAGE ON COLUMN_ENCRYPTION_KEY MyCEK1 FROM newuser;
REVOKE USAGE ON CLIENT_MASTER_KEY MyCMK1 FROM newuser;
GRANT DROP ON COLUMN_ENCRYPTION_KEY testns.MyCEK1 to newuser;
GRANT DROP ON CLIENT_MASTER_KEY testns.MyCMK1 to newuser;
SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'USAGE');
 has_cmk_privilege 
-------------------
 f
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'USAGE');
 has_cek_privilege 
-------------------
 f
(1 row)

SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'DROP');
 has_cmk_privilege 
-------------------
 t
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'DROP');
 has_cek_privilege 
-------------------
 t
(1 row)

SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
--check DROP KEY WITH PREMISSION(success)
DROP COLUMN ENCRYPTION KEY MyCEK1;
DROP CLIENT MASTER KEY MyCMK1;
RESET SESSION AUTHORIZATION;
--check pg_depend(false)
SELECT exists (SELECT refobjid FROM pg_depend JOIN gs_client_global_keys on gs_client_global_keys.key_namespace = refobjid);
 exists 
--------
 f
(1 row)

SET search_path to testns;
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
--check pg_depend(true)
SELECT exists (SELECT refobjid FROM pg_depend JOIN gs_client_global_keys on gs_client_global_keys.key_namespace = refobjid);
 exists 
--------
 t
(1 row)

--check drop schema cascade if cek/cmk exist(success)
DROP SCHEMA IF EXISTS testns CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to client master key: mycmk1
drop cascades to column encryption key: mycek1
DROP SCHEMA IF EXISTS newuser CASCADE;
DROP ROLE IF EXISTS newuser;
\! gs_ktool -d all
DELETE ALL
 1
\! gs_ktool -g
GENERATE
1
CREATE USER d_user1 PASSWORD 'gauss@123';
GRANT ALL ON SCHEMA public TO d_user1;
SET SESSION AUTHORIZATION d_user1 PASSWORD 'gauss@123';
SET search_path to public;
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
CREATE TABLE acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC));
RESET SESSION AUTHORIZATION;
drop ROLE d_user1;
ERROR:  role "d_user1" cannot be dropped because some objects depend on it
DETAIL:  owner of table acltest1
privileges for schema public
owner of schema d_user1
drop USER d_user1;
ERROR:  role "d_user1" cannot be dropped because some objects depend on it
DETAIL:  owner of table acltest1
privileges for schema public
drop USER d_user1 cascade;
NOTICE:  drop cascades to client master key: mycmk1
NOTICE:  drop cascades to column encryption key: mycek1
select count(*) from gs_client_global_keys;
 count 
-------
     0
(1 row)

select count(*) from gs_column_keys;
 count 
-------
     0
(1 row)

\! gs_ktool -d all
DELETE ALL
 1
\! gs_ktool -g
GENERATE
1
CREATE USER sysadmin1 with sysadmin PASSWORD "Gauss_234";
CREATE USER rsr3 with PASSWORD "Gauss_234";
CREATE USER user1 with PASSWORD "Gauss_234";
RESET search_path;
set role user1 password "Gauss_234";
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
drop table if exists test_01;
NOTICE:  table "test_01" does not exist, skipping
CREATE TABLE test_01
(
 id_number INTEGER NOT NULL,
 name VARCHAR(20) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC) NOT NULL 
) WITH (ORIENTATION = COLUMN, COMPRESSION=HIGH);
insert into test_01 values(1,123);
set role sysadmin1 password "Gauss_234";
insert into user1.test_01 values(1,123);
set role user1 password "Gauss_234";
insert into test_01 values(1,123);
select * from test_01;
  id_number |  name 
------------+-------
          1 | 123
          1 | 123
          1 | 123
(3 rows)

set role sysadmin1 password "Gauss_234";
grant usage on schema user1 to rsr3;
grant insert on user1.test_01 to rsr3;
set role rsr3 password "Gauss_234";
select current_user;
 current_user 
--------------
 rsr3
(1 row)

insert into user1.test_01 values(1,123);
ERROR:  column " name" is of type byteawithoutorderwithequalcol but expression is of type integer
LINE 1: insert into user1.test_01 values(1,123);
                                           ^
HINT:  You will need to rewrite or cast the expression.
CONTEXT:  referenced column:  name
reset role;
drop table if exists user1.test_01 cascade;
drop COLUMN ENCRYPTION KEY user1.MyCEK1 cascade;
drop CLIENT MASTER KEY user1.MyCMK1 cascade;
drop USER rsr3 cascade;
drop USER user1 cascade;
drop USER sysadmin1 cascade;
\! gs_ktool -d all
DELETE ALL
 1
