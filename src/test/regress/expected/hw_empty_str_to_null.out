/*
 * Test case for DR_SQL&XXX_015: NULL and empty string adapte 
 *
 * Date: 2012/8/4
 */
/* 
 * table 
 */
create table  test_tb (name varchar(40) not null);
insert into test_tb values (NULL);
ERROR:  null value in column "name" violates not-null constraint
DETAIL:  Failing row contains (null).
insert into test_tb values ('');
ERROR:  null value in column "name" violates not-null constraint
DETAIL:  Failing row contains (null).
select * from test_tb;
 name 
------
(0 rows)

drop table test_tb;
create table test_tb (id int, name varchar(40));
insert into test_tb values (1, '');
select * from test_tb where name is null;
 id | name 
----+------
  1 | 
(1 row)

drop table test_tb;
-- select * from ( select 'NULL');
select * from ( select 'NULL') as a;
 ?column? 
----------
 NULL
(1 row)

/*
 * function test
 */
/* ltrim test: return t */
select ltrim(NULL) is null;
 ?column? 
----------
 t
(1 row)

select ltrim('') is null;
 ?column? 
----------
 t
(1 row)

select ltrim('', 'ab') is null;
 ?column? 
----------
 t
(1 row)

select ltrim(NULL, 'ab') is null;
 ?column? 
----------
 t
(1 row)

select ltrim('ab', '') is null;
 ?column? 
----------
 t
(1 row)

select ltrim('ab', NULL) is null;
 ?column? 
----------
 t
(1 row)

select ltrim('ab', 'ab') is null;
 ?column? 
----------
 t
(1 row)

select ltrim('abc', 'a') is not null;
 ?column? 
----------
 t
(1 row)

/* The following case depence on nvl which is added by GuassDB */
/* expect is null */
select nvl(ltrim(NULL), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim(''), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim('', 'ab'), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim(NULL, 'ab'), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim('ab', ''), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim('ab', NULL), 'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim('ab', 'ab'),  'is null');
   nvl   
---------
 is null
(1 row)

select nvl(ltrim('abc', 'a'),  'is not null'); -- return bc
 nvl 
-----
 bc
(1 row)

/* expect t */
select rtrim(NULL) is null;
 ?column? 
----------
 t
(1 row)

select rtrim('') is null;
 ?column? 
----------
 t
(1 row)

select rtrim('', 'ab') is null;
 ?column? 
----------
 t
(1 row)

select rtrim(NULL, 'ab') is null;
 ?column? 
----------
 t
(1 row)

select rtrim('ab', '') is null;
 ?column? 
----------
 t
(1 row)

select rtrim('ab', NULL) is null;
 ?column? 
----------
 t
(1 row)

select rtrim('ab', 'ab') is null;
 ?column? 
----------
 t
(1 row)

select rtrim('abc', 'c') is not null;
 ?column? 
----------
 t
(1 row)

/* expect t */
select substr('', 1) is null;
 ?column? 
----------
 t
(1 row)

select substr(NULL, 1) is null;
 ?column? 
----------
 t
(1 row)

select substr('', -1) is null;
 ?column? 
----------
 t
(1 row)

select substr(NULL, -1) is null;
 ?column? 
----------
 t
(1 row)

select substr('abcd', 2) is not null;
 ?column? 
----------
 t
(1 row)

select substr('abcd', 2, 1) is not null;
 ?column? 
----------
 t
(1 row)

/* textcat */
select NULL || 'abc';
 ?column? 
----------
 abc
(1 row)

select 'abc' || NULL;
 ?column? 
----------
 abc
(1 row)

select NULL || NULL;
 ?column? 
----------
 
(1 row)

select '' || 'abc';
 ?column? 
----------
 abc
(1 row)

select 'abc' || '';
 ?column? 
----------
 abc
(1 row)

select ('' || '') is null; -- expect t
 ?column? 
----------
 t
(1 row)

select 'abc' || 'efg';
 ?column? 
----------
 abcefg
(1 row)

/* replace test */
select replace('', '', '') IS NULL; -- expect t
 ?column? 
----------
 t
(1 row)

select replace('abc', '', '');   --check
 replace 
---------
 abc
(1 row)

select replace('abc', 'a', '');	 --check
 replace 
---------
 bc
(1 row)

select replace('abc', 'b', '');  --check
 replace 
---------
 ac
(1 row)

select replace('abc', 'c', '');  --check
 replace 
---------
 ab
(1 row)

select replace('abc', 'abc', '') IS NULL;  -- expect t
 ?column? 
----------
 t
(1 row)

select replace('abc', '', 'z');
 replace 
---------
 abc
(1 row)

select replace('', 'a', 'z') IS NULL; -- expect t
 ?column? 
----------
 t
(1 row)

select replace('abc', 'a', 'z');
 replace 
---------
 zbc
(1 row)

select replace('abc', 'b', 'z');
 replace 
---------
 azc
(1 row)

select replace('abc', 'c', 'z');
 replace 
---------
 abz
(1 row)

select replace('abc', 'w', 'z');
 replace 
---------
 abc
(1 row)

/* regexp_replace(a,b,c) */
select regexp_replace('Thomas', '.[mN]a.', 'M');
 regexp_replace 
----------------
 ThM
(1 row)

select regexp_replace('Thomas', '.[mN]a.', '');
 regexp_replace 
----------------
 Th
(1 row)

select regexp_replace('Thomas', 'Thomas', '') IS NULL;  -- expect t
 ?column? 
----------
 t
(1 row)

select regexp_replace('Thomas', '', 'M');
 regexp_replace 
----------------
 Thomas
(1 row)

select regexp_replace('Thomas', '', '');
 regexp_replace 
----------------
 Thomas
(1 row)

select regexp_replace('', '', '') IS NULL;  -- expect t
 ?column? 
----------
 t
(1 row)

/* regexp_replace(a,b,c,flag) */
select regexp_replace('foobarbaz', 'b..', 'X', 'g');
 regexp_replace 
----------------
 fooXX
(1 row)

select regexp_replace('foobarbaz', 'b..', 'X', '');
 regexp_replace 
----------------
 fooXbaz
(1 row)

select regexp_replace('foobarbaz', 'b..', '', 'g');
 regexp_replace 
----------------
 foo
(1 row)

select regexp_replace('foobarbaz', 'foobarbaz', '', 'g') IS NULL; -- expect t
 ?column? 
----------
 t
(1 row)

select regexp_replace('foobarbaz', '', 'X', 'g');
 regexp_replace 
----------------
 foobarbaz
(1 row)

select regexp_replace('foobarbaz', '', '', 'g');
 regexp_replace 
----------------
 foobarbaz
(1 row)

select regexp_replace('foobarbaz', 'b..', '', '');
 regexp_replace 
----------------
 foobaz
(1 row)

select regexp_replace('', 'b..', '', '') IS NULL;  -- expect t 
 ?column? 
----------
 t
(1 row)

select regexp_replace('', '', '', '') IS NULL;  -- expect t
 ?column? 
----------
 t
(1 row)

/* enable after regexp_like and regexp_substr checked in */
create table test_table(name varchar(20));
insert into test_table values('jack');
select * from test_table where regexp_like(name,'', 'i');  ---return null
 name 
------
(0 rows)

select * from test_table where regexp_like(name, NULL, 'i'); -- return null
 name 
------
(0 rows)

drop table test_table;
select nvl(regexp_substr('This is test',''), 'This is NULL'); -- return This is NULL
     nvl      
--------------
 This is NULL
(1 row)

select nvl(regexp_substr('This is test',NULL), 'This is NULL'); -- return This is NULL
     nvl      
--------------
 This is NULL
(1 row)

select concat(NULL, NULL) is null;
 ?column? 
----------
 t
(1 row)

select concat(NULL, '') is null;
 ?column? 
----------
 t
(1 row)

select concat('', NULL) is null;
 ?column? 
----------
 t
(1 row)

select concat('', '') is null;
 ?column? 
----------
 t
(1 row)

select concat('', 'abc');
 concat 
--------
 abc
(1 row)

select concat(NULL, 'abc');
 concat 
--------
 abc
(1 row)

select concat('abc', '');
 concat 
--------
 abc
(1 row)

select concat('abc', NULL);
 concat 
--------
 abc
(1 row)

select concat('abc', 'efg');
 concat 
--------
 abcefg
(1 row)

-- sanity check
select overlay('xxx' placing '' from 1 for 0) is null;  -- expect t;
 ?column? 
----------
 t
(1 row)

select initcap('') is null;
 ?column? 
----------
 t
(1 row)

select upper('') is null;
 ?column? 
----------
 t
(1 row)

select lower('') is null;
 ?column? 
----------
 t
(1 row)

select left('', 2) is null;
 ?column? 
----------
 t
(1 row)

select lpad('', 5, '') is null;
 ?column? 
----------
 t
(1 row)

select ltrim('zzzy' ,'xyz') is null;
 ?column? 
----------
 t
(1 row)

select quote_ident('') is null;
 ?column? 
----------
 t
(1 row)

select quote_literal('') is null;
 ?column? 
----------
 t
(1 row)

select quote_nullable(NULL);
 quote_nullable 
----------------
 NULL
(1 row)

select quote_nullable('');
 quote_nullable 
----------------
 NULL
(1 row)

select repeat('', 4) is null;
 ?column? 
----------
 t
(1 row)

select replace('abc', 'abc' , '') is null;
 ?column? 
----------
 t
(1 row)

select reverse('') is null;
 ?column? 
----------
 t
(1 row)

select right('', 2) is null;
 ?column? 
----------
 t
(1 row)

select rpad('', 4 , 'ax') is null; -- expect t, the same result get from pt.
 ?column? 
----------
 t
(1 row)

select rtrim('xxx', 'x') is null;
 ?column? 
----------
 t
(1 row)

select substr('abcd', 2, 0) is null;
 ?column? 
----------
 t
(1 row)

select substr('abcd',10, 11) is null;
 ?column? 
----------
 t
(1 row)

select to_ascii('') is null;
 ?column? 
----------
 t
(1 row)

select btrim(' ') is null;
 ?column? 
----------
 t
(1 row)

select rtrim(' ') is null;
 ?column? 
----------
 t
(1 row)

select ltrim(' ') is null;
 ?column? 
----------
 t
(1 row)

-----
-- The following test expects t, but get f now.
select btrim('xy', 'xy') is null;
 ?column? 
----------
 t
(1 row)

select format('%s','') is null;
 ?column? 
----------
 t
(1 row)

select substring('hom' from 1 for 0 ) is null;  -- expect t;
 ?column? 
----------
 t
(1 row)

select trim(both 'x' from 'xxx') is null; -- expect t;
 ?column? 
----------
 t
(1 row)

select left('abc', 0) is null;
 ?column? 
----------
 t
(1 row)

select right('abc', 0) is null;
 ?column? 
----------
 t
(1 row)

select split_part('abc~@~~@~ghi', '~@~', 2) is null;
 ?column? 
----------
 t
(1 row)

select split_part('abc~@~~@~ghi', '#', 2) is null; -- expect t;
 ?column? 
----------
 t
(1 row)

 select substring('123', 5, 2) is null;
 ?column? 
----------
 t
(1 row)

 select substring('123', 1, 2);
 substring 
-----------
 12
(1 row)

-- textanycat check
create database mydb;
\c mydb
select 'aa'||cast(null as CLOB);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as BLOB);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as money);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as boolean);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as int);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as inet);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as cidr);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as circle);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as box);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as path);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as lseg);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as point);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as macaddr);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as uuid);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as tsvector);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as oid);
 ?column? 
----------
 aa
(1 row)

select 'aa'||cast(null as CLOB)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as BLOB)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as money)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as boolean)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as int)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as inet)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as cidr)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as circle)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as box)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as path)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as lseg)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as point)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as macaddr)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as uuid)||'bb';
 ?column? 
----------
 aabb
(1 row)

select 'aa'||cast(null as tsvector)||'bb';
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as oid)||'bb';
 ?column? 
----------
 aabb
(1 row)

 create database music DBCOMPATIBILITY 'A' ENCODING 'SQL_ASCII' TEMPLATE template0 lc_collate = 'C' lc_ctype = 'C';
 \c music
 select substring('123', 5, 2) is null;
 ?column? 
----------
 t
(1 row)

 select substring('123', 1, 2);
 substring 
-----------
 12
(1 row)

create database music_pg DBCOMPATIBILITY 'PG' ENCODING 'SQL_ASCII' TEMPLATE template0 lc_collate = 'C' lc_ctype = 'C';
\c music_pg
---textanycat check whith sql_compatibility = PG
select 'aa'||cast(null as CLOB);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as BLOB);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as money);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as boolean);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as int);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as inet);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as cidr);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as circle);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as box);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as path);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as lseg);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as point);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as macaddr);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as uuid);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as tsvector);
 ?column? 
----------
 
(1 row)

select 'aa'||cast(null as oid);
 ?column? 
----------
 
(1 row)

