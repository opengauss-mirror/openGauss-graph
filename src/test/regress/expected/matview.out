-- create a table to use as a basis for views and materialized views in various combinations
CREATE TABLE mvtest_t (id int NOT NULL PRIMARY KEY, type text NOT NULL, amt numeric NOT NULL);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "mvtest_t_pkey" for table "mvtest_t"
INSERT INTO mvtest_t VALUES
  (1, 'x', 2),
  (2, 'x', 3),
  (3, 'y', 5),
  (4, 'y', 7),
  (5, 'z', 11);
-- we want a view based on the table, too, since views present additional challenges
CREATE VIEW mvtest_tv AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type;
SELECT * FROM mvtest_tv ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     11
(3 rows)

-- create a materialized view with no data, and confirm correct behavior
EXPLAIN (analyze on, costs off)
  CREATE MATERIALIZED VIEW mvtest_tm AS SELECT type, sum(amt) AS totamt FROM mvtest_t GROUP BY type WITH NO DATA;
                        QUERY PLAN                        
----------------------------------------------------------
 HashAggregate (Actual time: never executed)
   Group By Key: type
   ->  Seq Scan on mvtest_t (Actual time: never executed)
--? Total runtime: .* ms
(4 rows)

EXPLAIN (analyze on, costs off)
  REFRESH MATERIALIZED VIEW mvtest_tm;
ERROR:  syntax error at or near "REFRESH"
LINE 2:   REFRESH MATERIALIZED VIEW mvtest_tm;
          ^
SELECT * FROM mvtest_tm ORDER BY type;
 type | totamt 
------+--------
(0 rows)

REFRESH MATERIALIZED VIEW mvtest_tm;
ALTER MATERIALIZED VIEW mvtest_tm set (orientation=column); --error
ERROR:  Un-support feature
DETAIL:  Option "orientation" doesn't allow ALTER
CREATE UNIQUE INDEX mvtest_tm_type ON mvtest_tm (type);
SELECT * FROM mvtest_tm ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     11
(3 rows)

-- create various views
EXPLAIN (analyze on, costs off)
  CREATE MATERIALIZED VIEW mvtest_tvm AS SELECT * FROM mvtest_tv ORDER BY type;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
--? Sort (actual time=.* rows=3 loops=1)
   Sort Key: mvtest_t.type
   Sort Method: quicksort  Memory: 25kB
--?   ->  HashAggregate (actual time=.* rows=3 loops=1)
         Group By Key: mvtest_t.type
--?         ->  Seq Scan on mvtest_t (actual time=.* rows=5 loops=1)
--? Total runtime: .* ms
(7 rows)

SELECT * FROM mvtest_tvm;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     11
(3 rows)

CREATE MATERIALIZED VIEW mvtest_tmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tm;
CREATE MATERIALIZED VIEW mvtest_tvmm AS SELECT sum(totamt) AS grandtot FROM mvtest_tvm;
CREATE UNIQUE INDEX mvtest_tvmm_expr ON mvtest_tvmm ((grandtot > 0));
CREATE UNIQUE INDEX mvtest_tvmm_pred ON mvtest_tvmm (grandtot) WHERE grandtot < 0;
CREATE VIEW mvtest_tvv AS SELECT sum(totamt) AS grandtot FROM mvtest_tv;
EXPLAIN (analyze on, costs off)
  CREATE MATERIALIZED VIEW mvtest_tvvm AS SELECT * FROM mvtest_tvv;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
--? Aggregate (actual time=.* rows=1 loops=1)
--?   ->  HashAggregate (actual time=.* rows=3 loops=1)
         Group By Key: mvtest_t.type
--?         ->  Seq Scan on mvtest_t (actual time=0.008..0.009 rows=5 loops=1)
--? Total runtime: .* ms
(5 rows)

CREATE VIEW mvtest_tvvmv AS SELECT * FROM mvtest_tvvm;
CREATE MATERIALIZED VIEW mvtest_bb AS SELECT * FROM mvtest_tvvmv;
CREATE INDEX mvtest_aa ON mvtest_bb (grandtot);
-- check that plans seem reasonable
\d+ mvtest_tvm
                Materialized view "public.mvtest_tvm"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 type   | text    |           | extended |              | 
 totamt | numeric |           | main     |              | 
View definition:
 SELECT  *
   FROM mvtest_tv
  ORDER BY mvtest_tv.type;
Replica Identity: NOTHING

\d+ mvtest_tvm
                Materialized view "public.mvtest_tvm"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 type   | text    |           | extended |              | 
 totamt | numeric |           | main     |              | 
View definition:
 SELECT  *
   FROM mvtest_tv
  ORDER BY mvtest_tv.type;
Replica Identity: NOTHING

\d+ mvtest_tvvm
                Materialized view "public.mvtest_tvvm"
  Column  |  Type   | Modifiers | Storage | Stats target | Description 
----------+---------+-----------+---------+--------------+-------------
 grandtot | numeric |           | main    |              | 
View definition:
 SELECT  *
   FROM mvtest_tvv;
Replica Identity: NOTHING

\d+ mvtest_bb
                 Materialized view "public.mvtest_bb"
  Column  |  Type   | Modifiers | Storage | Stats target | Description 
----------+---------+-----------+---------+--------------+-------------
 grandtot | numeric |           | main    |              | 
Indexes:
    "mvtest_aa" btree (grandtot) TABLESPACE pg_default
View definition:
 SELECT  *
   FROM mvtest_tvvmv;
Replica Identity: NOTHING

-- test schema behavior
CREATE SCHEMA mvtest_mvschema;
ALTER MATERIALIZED VIEW mvtest_tvm SET SCHEMA mvtest_mvschema;
\d+ mvtest_tvm
\d+ mvtest_tvmm
                Materialized view "public.mvtest_tvmm"
  Column  |  Type   | Modifiers | Storage | Stats target | Description 
----------+---------+-----------+---------+--------------+-------------
 grandtot | numeric |           | main    |              | 
Indexes:
    "mvtest_tvmm_expr" UNIQUE, btree ((grandtot > 0::numeric)) TABLESPACE pg_default
    "mvtest_tvmm_pred" UNIQUE, btree (grandtot) TABLESPACE pg_default WHERE grandtot < 0::numeric
View definition:
 SELECT sum(mvtest_tvm.totamt) AS grandtot
   FROM mvtest_mvschema.mvtest_tvm;
Replica Identity: NOTHING

SET search_path = mvtest_mvschema, public;
\d+ mvtest_tvm
            Materialized view "mvtest_mvschema.mvtest_tvm"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 type   | text    |           | extended |              | 
 totamt | numeric |           | main     |              | 
View definition:
 SELECT  *
   FROM mvtest_tv
  ORDER BY mvtest_tv.type;
Replica Identity: NOTHING

-- modify the underlying table data
INSERT INTO mvtest_t VALUES (6, 'z', 13);
-- confirm pre- and post-refresh contents of fairly simple materialized views
SELECT * FROM mvtest_tm ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     11
(3 rows)

SELECT * FROM mvtest_tvm ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     11
(3 rows)

REFRESH MATERIALIZED VIEW mvtest_tm;
REFRESH MATERIALIZED VIEW mvtest_tvm;
SELECT * FROM mvtest_tm ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     24
(3 rows)

SELECT * FROM mvtest_tvm ORDER BY type;
 type | totamt 
------+--------
 x    |      5
 y    |     12
 z    |     24
(3 rows)

RESET search_path;
-- confirm pre- and post-refresh contents of nested materialized views
EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tmm;
                            QUERY PLAN                            
------------------------------------------------------------------
--? Seq Scan on mvtest_tmm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tvmm;
                            QUERY PLAN                             
-------------------------------------------------------------------
--? Seq Scan on mvtest_tvmm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tvvm;
                            QUERY PLAN                             
-------------------------------------------------------------------
--? Seq Scan on mvtest_tvvm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

SELECT * FROM mvtest_tmm;
 grandtot 
----------
       28
(1 row)

SELECT * FROM mvtest_tvmm;
 grandtot 
----------
       28
(1 row)

SELECT * FROM mvtest_tvvm;
 grandtot 
----------
       28
(1 row)

REFRESH MATERIALIZED VIEW mvtest_tmm;
REFRESH MATERIALIZED VIEW mvtest_tvmm;
REFRESH MATERIALIZED VIEW mvtest_tvvm;
EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tmm;
                            QUERY PLAN                            
------------------------------------------------------------------
--? Seq Scan on mvtest_tmm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tvmm;
                            QUERY PLAN                             
-------------------------------------------------------------------
--? Seq Scan on mvtest_tvmm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

EXPLAIN (analyze on, costs off)
  SELECT * FROM mvtest_tvvm;
                            QUERY PLAN                             
-------------------------------------------------------------------
--? Seq Scan on mvtest_tvvm (actual time=.* rows=1 loops=1)
--? Total runtime: .* ms
(2 rows)

SELECT * FROM mvtest_tmm;
 grandtot 
----------
       41
(1 row)

SELECT * FROM mvtest_tvmm;
 grandtot 
----------
       41
(1 row)

SELECT * FROM mvtest_tvvm;
 grandtot 
----------
       41
(1 row)

-- test diemv when the mv does not exist
DROP MATERIALIZED VIEW IF EXISTS no_such_mv;
NOTICE:  materialized view "no_such_mv" does not exist, skipping
-- no tuple locks on materialized views
SELECT * FROM mvtest_tvvm FOR SHARE;
ERROR:  cannot lock rows in materialized view "mvtest_tvvm"
-- test join of mv and view
SELECT type, m.totamt AS mtot, v.totamt AS vtot FROM mvtest_tm m LEFT JOIN mvtest_tv v USING (type) ORDER BY type;
 type | mtot | vtot 
------+------+------
 x    |    5 |    5
 y    |   12 |   12
 z    |   24 |   24
(3 rows)

-- some additional tests not using base tables
CREATE VIEW mvtest_vt1 AS SELECT 1 moo;
CREATE VIEW mvtest_vt2 AS SELECT moo, 2*moo FROM mvtest_vt1 UNION ALL SELECT moo, 3*moo FROM mvtest_vt1;
\d+ mvtest_vt2
                View "public.mvtest_vt2"
  Column  |  Type   | Modifiers | Storage | Description 
----------+---------+-----------+---------+-------------
 moo      | integer |           | plain   | 
 ?column? | integer |           | plain   | 
View definition:
         SELECT mvtest_vt1.moo, 2 * mvtest_vt1.moo AS "?column?"
           FROM mvtest_vt1
UNION ALL 
         SELECT mvtest_vt1.moo, 3 * mvtest_vt1.moo AS "?column?"
           FROM mvtest_vt1;

CREATE MATERIALIZED VIEW mv_test2 AS SELECT moo, 2*moo FROM mvtest_vt2 UNION ALL SELECT moo, 3*moo FROM mvtest_vt2;
\d+ mv_test2
                  Materialized view "public.mv_test2"
  Column  |  Type   | Modifiers | Storage | Stats target | Description 
----------+---------+-----------+---------+--------------+-------------
 moo      | integer |           | plain   |              | 
 ?column? | integer |           | plain   |              | 
View definition:
         SELECT mvtest_vt2.moo, 2 * mvtest_vt2.moo AS "?column?"
           FROM mvtest_vt2
UNION ALL 
         SELECT mvtest_vt2.moo, 3 * mvtest_vt2.moo AS "?column?"
           FROM mvtest_vt2;
Replica Identity: NOTHING

CREATE MATERIALIZED VIEW mv_test3 AS SELECT * FROM mv_test2 WHERE moo = 12345;
DROP VIEW mvtest_vt1 CASCADE;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to view mvtest_vt2
drop cascades to materialized view mv_test2
drop cascades to materialized view mv_test3
-- test that duplicate values on unique index prevent refresh
CREATE TABLE mvtest_foo(a, b) AS VALUES(1, 10);
CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
CREATE UNIQUE INDEX ON mvtest_mv(a);
INSERT INTO mvtest_foo SELECT * FROM mvtest_foo;
REFRESH MATERIALIZED VIEW mvtest_mv;
ERROR:  could not create unique index "mvtest_mv_a_idx"
DETAIL:  Key (a)=(1) is duplicated.
DROP TABLE mvtest_foo CASCADE;
NOTICE:  drop cascades to materialized view mvtest_mv
-- make sure that all columns covered by unique indexes works
CREATE TABLE mvtest_foo(a, b, c) AS VALUES(1, 2, 3);
CREATE MATERIALIZED VIEW mvtest_mv AS SELECT * FROM mvtest_foo;
CREATE UNIQUE INDEX ON mvtest_mv (a);
CREATE UNIQUE INDEX ON mvtest_mv (b);
CREATE UNIQUE INDEX on mvtest_mv (c);
INSERT INTO mvtest_foo VALUES(2, 3, 4);
INSERT INTO mvtest_foo VALUES(3, 4, 5);
REFRESH MATERIALIZED VIEW mvtest_mv;
DROP TABLE mvtest_foo CASCADE;
NOTICE:  drop cascades to materialized view mvtest_mv
-- allow subquery to reference unpopulated matview if WITH NO DATA is specified
CREATE MATERIALIZED VIEW mvtest_mv1 AS SELECT 1 AS col1 WITH NO DATA;
CREATE MATERIALIZED VIEW mvtest_mv2 AS SELECT * FROM mvtest_mv1
  WHERE col1 = (SELECT LEAST(col1) FROM mvtest_mv1) WITH NO DATA;
DROP MATERIALIZED VIEW mvtest_mv1 CASCADE;
NOTICE:  drop cascades to materialized view mvtest_mv2
-- make sure that types with unusual equality tests work
CREATE TABLE mvtest_boxes (id serial primary key, b box);
NOTICE:  CREATE TABLE will create implicit sequence "mvtest_boxes_id_seq" for serial column "mvtest_boxes.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "mvtest_boxes_pkey" for table "mvtest_boxes"
INSERT INTO mvtest_boxes (b) VALUES
  ('(32,32),(31,31)'),
  ('(2.0000004,2.0000004),(1,1)'),
  ('(1.9999996,1.9999996),(1,1)');
CREATE MATERIALIZED VIEW mvtest_boxmv AS SELECT * FROM mvtest_boxes;
CREATE UNIQUE INDEX mvtest_boxmv_id ON mvtest_boxmv (id);
UPDATE mvtest_boxes SET b = '(2,2),(1,1)' WHERE id = 2;
REFRESH MATERIALIZED VIEW mvtest_boxmv;
SELECT * FROM mvtest_boxmv ORDER BY id;
 id |              b              
----+-----------------------------
  1 | (32,32),(31,31)
  2 | (2,2),(1,1)
  3 | (1.9999996,1.9999996),(1,1)
(3 rows)

DROP TABLE mvtest_boxes CASCADE;
NOTICE:  drop cascades to materialized view mvtest_boxmv
-- make sure that column names are handled correctly
CREATE TABLE mvtest_v (i int, j int);
CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj, kk) AS SELECT i, j FROM mvtest_v; -- error
ERROR:  too many column names were specified
CREATE MATERIALIZED VIEW mvtest_mv_v (ii, jj) AS SELECT i, j FROM mvtest_v; -- ok
CREATE MATERIALIZED VIEW mvtest_mv_v_2 (ii) AS SELECT i, j FROM mvtest_v; -- ok
CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj, kk) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- error
ERROR:  too many column names were specified
CREATE MATERIALIZED VIEW mvtest_mv_v_3 (ii, jj) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
CREATE MATERIALIZED VIEW mvtest_mv_v_4 (ii) AS SELECT i, j FROM mvtest_v WITH NO DATA; -- ok
ALTER TABLE mvtest_v RENAME COLUMN i TO x;
INSERT INTO mvtest_v values (1, 2);
CREATE UNIQUE INDEX mvtest_mv_v_ii ON mvtest_mv_v (ii);
REFRESH MATERIALIZED VIEW mvtest_mv_v;
UPDATE mvtest_v SET j = 3 WHERE x = 1;
REFRESH MATERIALIZED VIEW mvtest_mv_v;
REFRESH MATERIALIZED VIEW mvtest_mv_v_2;
REFRESH MATERIALIZED VIEW mvtest_mv_v_3;
REFRESH MATERIALIZED VIEW mvtest_mv_v_4;
SELECT * FROM mvtest_v;
 x | j 
---+---
 1 | 3
(1 row)

SELECT * FROM mvtest_mv_v;
 ii | jj 
----+----
  1 |  3
(1 row)

SELECT * FROM mvtest_mv_v_2;
 ii | j 
----+---
  1 | 3
(1 row)

SELECT * FROM mvtest_mv_v_3;
 ii | jj 
----+----
  1 |  3
(1 row)

SELECT * FROM mvtest_mv_v_4;
 ii | j 
----+---
  1 | 3
(1 row)

DROP TABLE mvtest_v CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to materialized view mvtest_mv_v
drop cascades to materialized view mvtest_mv_v_2
drop cascades to materialized view mvtest_mv_v_3
drop cascades to materialized view mvtest_mv_v_4
-- Check that unknown literals are converted to "text" in CREATE MATVIEW,
-- so that we don't end up with unknown-type columns.
CREATE MATERIALIZED VIEW mv_unspecified_types AS
  SELECT 42 as i, 42.5 as num, 'foo' as u, 'foo'::unknown as u2, null as n;
\d+ mv_unspecified_types
           Materialized view "public.mv_unspecified_types"
 Column |  Type   | Modifiers | Storage  | Stats target | Description 
--------+---------+-----------+----------+--------------+-------------
 i      | integer |           | plain    |              | 
 num    | numeric |           | main     |              | 
 u      | text    |           | extended |              | 
 u2     | text    |           | extended |              | 
 n      | text    |           | extended |              | 
View definition:
 SELECT 42 AS i, 42.5 AS num, 'foo'::text AS u, 'foo'::text AS u2, 
    NULL::text AS n;
Replica Identity: NOTHING

SELECT * FROM mv_unspecified_types;
 i  | num  |  u  | u2  | n 
----+------+-----+-----+---
 42 | 42.5 | foo | foo | 
(1 row)

DROP MATERIALIZED VIEW mv_unspecified_types;
-- make sure that create WITH NO DATA does not plan the query (bug #13907)
create materialized view mvtest_error as select 1/0 as x;  -- fail
ERROR:  division by zero
CONTEXT:  referenced column: x
create materialized view mvtest_error as select 1/0 as x with no data;
refresh materialized view mvtest_error;  -- fail here
ERROR:  division by zero
CONTEXT:  referenced column: x
drop materialized view mvtest_error;
-- make sure that matview rows can be referenced as source rows (bug #9398)
CREATE TABLE mvtest_v AS SELECT generate_series(1,10) AS a;
CREATE MATERIALIZED VIEW mvtest_mv_v AS SELECT a FROM mvtest_v WHERE a <= 5;
DELETE FROM mvtest_v WHERE ( SELECT * FROM mvtest_mv_v WHERE mvtest_mv_v.a = mvtest_v.a );
SELECT * FROM mvtest_v;
 a  
----
  6
  7
  8
  9
 10
(5 rows)

SELECT * FROM mvtest_mv_v;
 a 
---
 1
 2
 3
 4
 5
(5 rows)

DROP TABLE mvtest_v CASCADE;
NOTICE:  drop cascades to materialized view mvtest_mv_v
-- make sure running as superuser works when MV owned by another role (bug #11208)
CREATE ROLE regress_user_mvtest IDENTIFIED BY 'test@123';
CREATE SCHEMA regress_user_mvtest AUTHORIZATION regress_user_mvtest;
SET ROLE regress_user_mvtest PASSWORD 'test@123';
CREATE TABLE regress_user_mvtest.mvtest_foo_data AS SELECT i, md5(random()::text)
  FROM generate_series(1, 10) i;
CREATE MATERIALIZED VIEW regress_user_mvtest.mvtest_mv_foo AS SELECT * FROM regress_user_mvtest.mvtest_foo_data;
CREATE MATERIALIZED VIEW regress_user_mvtest.mvtest_mv_foo AS SELECT * FROM regress_user_mvtest.mvtest_foo_data;
ERROR:  relation "mvtest_mv_foo" already exists
CREATE UNIQUE INDEX ON regress_user_mvtest.mvtest_mv_foo (i);
RESET ROLE;
REFRESH MATERIALIZED VIEW regress_user_mvtest.mvtest_mv_foo;
DROP OWNED BY regress_user_mvtest CASCADE;
DROP ROLE regress_user_mvtest;
-- make sure that create WITH NO DATA works via SPI
BEGIN;
CREATE FUNCTION mvtest_func()
  RETURNS void AS $$
BEGIN
  CREATE MATERIALIZED VIEW mvtest1 AS SELECT 1 AS x;
  CREATE MATERIALIZED VIEW mvtest2 AS SELECT 1 AS x WITH NO DATA;
END;
$$ LANGUAGE plpgsql;
SELECT mvtest_func();
 mvtest_func 
-------------
 
(1 row)

SELECT * FROM mvtest1;
 x 
---
 1
(1 row)

SELECT * FROM mvtest2;
 x 
---
(0 rows)

ROLLBACK;
-- make sure that materialized view can not be created on temp table (local or global)
drop TABLE if exists simple_table_g cascade;
NOTICE:  table "simple_table_g" does not exist, skipping
drop TABLE if exists simple_table_t cascade;
NOTICE:  table "simple_table_t" does not exist, skipping
create GLOBAL TEMP TABLE class_global
(
    class_id int primary key,
    class_name varchar(10) not null
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "class_global_pkey" for table "class_global"
create TEMP TABLE student_tmp
(
    id int primary key,
    name varchar(10) not null,
    class_id int
);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "student_tmp_pkey" for table "student_tmp"
insert into class_global values (101, '1-1');
insert into class_global values (102, '1-2');
insert into class_global values (104, '1-4');
insert into student_tmp values (1, 'aaa', 101);
insert into student_tmp values (2, 'bbb', 101);
insert into student_tmp values (3, 'ccc', 102);
insert into student_tmp values (4, 'ddd', 102);
insert into student_tmp values (5, 'eee', 102);
insert into student_tmp values (6, 'fff', 103);
CREATE TABLE simple_table_g AS SELECT * FROM class_global;
CREATE TABLE simple_table_t AS SELECT * FROM student_tmp;
CREATE MATERIALIZED VIEW mvtest_g AS SELECT * FROM class_global; --error
ERROR:  materialized views must not use global temporary tables or views
CREATE MATERIALIZED VIEW mvtest_t AS SELECT * FROM student_tmp; --error
ERROR:  materialized views must not use temporary tables or views
CREATE MATERIALIZED VIEW mvtest_mv_g AS SELECT * FROM student_tmp where class_id in (select class_id from class_global); --error
ERROR:  materialized views must not use temporary tables or views
CREATE MATERIALIZED VIEW mvtest_mv_g AS SELECT * FROM class_global where class_id in (select class_id from student_tmp); --error
ERROR:  materialized views must not use temporary tables or views
CREATE MATERIALIZED VIEW mvtest_s_g AS SELECT * FROM simple_table_g; --ok
CREATE MATERIALIZED VIEW mvtest_s_t AS SELECT * FROM simple_table_t; --ok
select * from mvtest_s_g;
 class_id | class_name 
----------+------------
      101 | 1-1
      102 | 1-2
      104 | 1-4
(3 rows)

select * from mvtest_s_t;
 id | name | class_id 
----+------+----------
  1 | aaa  |      101
  2 | bbb  |      101
  3 | ccc  |      102
  4 | ddd  |      102
  5 | eee  |      102
  6 | fff  |      103
(6 rows)

drop  MATERIALIZED VIEW mvtest_s_g cascade;
drop  MATERIALIZED VIEW mvtest_s_t cascade;
drop  Table class_global cascade;