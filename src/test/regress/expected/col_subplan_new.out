create schema col_subplan_new;
set search_path=col_subplan_new;
--subplan with more expr
create table web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)
)
with(orientation=column)
 ;
create table customer_address_1
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                     
) with (orientation = column,compression=high)   ;
create table web_page_1
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       
) with (orientation = column,compression=high)   ;
create table catalog_sales_1
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  
) with (orientation = column,compression=high)   ;
create table household_demographics_1
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       
) with (orientation = column,compression=high)   ;
create table income_band_1
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       
) with (orientation = column,compression=high)   ;
explain (costs off)
SELECT		
  (SELECT Table_014.Column_011 Column_020
	FROM 
		(SELECT 
			Table_011.cs_item_sk Column_011
		FROM catalog_sales_1 Table_011 LIMIT 1) Table_014
	INNER JOIN 
		(SELECT Table_016.hd_income_band_sk Column_016,
		Table_019.ib_income_band_sk Column_019
		FROM household_demographics_1 Table_016,
		income_band_1 Table_019
		WHERE Column_016 = Column_019) Table_021
	ON Table_014.Column_011 =
	Table_021.Column_019
	GROUP BY Table_021.Column_019, Table_014.Column_011 LIMIT 1) Column_027,
	CAST(Table_023.Column_019 AS TEXT) Column_026
FROM 
	(SELECT Table_016.hd_income_band_sk Column_016,
	Table_019.ib_income_band_sk Column_019
	FROM household_demographics_1 Table_016,
	income_band_1 Table_019
	WHERE Column_016 = Column_019) Table_023
GROUP BY Column_027, Column_026  LIMIT 1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Hash Aggregate
               Group By Key: (SubPlan 1), (table_019.ib_income_band_sk)::text
               ->  Vector Sonic Hash Join
                     Hash Cond: (table_019.ib_income_band_sk = table_016.hd_income_band_sk)
                     ->  CStore Scan on income_band_1 table_019
                     ->  CStore Scan on household_demographics_1 table_016
                     SubPlan 1
                       ->  Row Adapter
                             ->  Vector Limit
                                   ->  Vector Sonic Hash Aggregate
                                         Group By Key: table_019.ib_income_band_sk, table_011.cs_item_sk
                                         ->  Vector Result
                                               One-Time Filter: (table_016.hd_income_band_sk = table_019.ib_income_band_sk)
                                               ->  Vector Nest Loop
                                                     ->  CStore Scan on household_demographics_1 table_016
                                                     ->  Vector Materialize
                                                           ->  Vector Sonic Hash Join
                                                                 Hash Cond: (table_019.ib_income_band_sk = table_011.cs_item_sk)
                                                                 ->  CStore Scan on income_band_1 table_019
                                                                 ->  Vector Limit
                                                                       ->  CStore Scan on catalog_sales_1 table_011
(23 rows)

-- test on stream rescan above broadcast node
create table customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)
)with(orientation=column)  ;
create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)
)with(orientation=column)  ;
create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)
)with(orientation=column)  ;
create index web_site_index on web_site (web_site_sk);
-- test rescan on stream operator
set enable_nestloop=on;
set enable_mergejoin=off;
set enable_hashjoin=off;
explain (verbose on, costs off)
update customer set c_birth_year=(with tmp1 as (select s_store_sk, s_company_id, s_market_id from store ,customer where s_market_id = c_birth_day) select cc_call_center_sk from call_center where cc_mkt_id + 1 in (select web_mkt_id from web_site inner join (select s_store_sk, s_company_id from tmp1 where s_market_id = cc_mkt_id and (cc_call_center_sk,s_store_sk) in (select s_company_id,s_market_id from tmp1 )) t1 on web_site_sk = t1.s_store_sk ) ) where c_birth_day = 2 and c_birth_month =4;
--?.*
--?.*
 Row Adapter
   ->  Vector Update on col_subplan_new.customer
         InitPlan 3 (returns $4)
           ->  Row Adapter
                 Output: call_center.cc_call_center_sk
                 ->  CStore Scan on col_subplan_new.call_center
                       Output: call_center.cc_call_center_sk
                       Filter: (SubPlan 2)
                       CTE tmp1
                         ->  Row Adapter
                               Output: store.s_store_sk, store.s_company_id, store.s_market_id
                               ->  Vector Nest Loop
                                     Output: store.s_store_sk, store.s_company_id, store.s_market_id
                                     Join Filter: (store.s_market_id = col_subplan_new.customer.c_birth_day)
                                     ->  CStore Scan on col_subplan_new.customer
                                           Output: col_subplan_new.customer.c_birth_day
                                     ->  Vector Materialize
                                           Output: store.s_store_sk, store.s_company_id, store.s_market_id
                                           ->  CStore Scan on col_subplan_new.store
                                                 Output: store.s_store_sk, store.s_company_id, store.s_market_id
                       SubPlan 2
                         ->  Nested Loop Semi Join
                               Output: web_site.web_mkt_id
                               Join Filter: (tmp1.s_store_sk = tmp1.s_market_id)
                               ->  Nested Loop
                                     Output: web_site.web_mkt_id, web_site.web_site_sk, tmp1.s_store_sk
                                     Join Filter: (web_site.web_site_sk = tmp1.s_store_sk)
                                     ->  CTE Scan on tmp1
                                           Output: tmp1.s_store_sk, tmp1.s_company_id, tmp1.s_market_id
                                           Filter: (tmp1.s_market_id = call_center.cc_mkt_id)
                                     ->  Row Adapter
                                           Output: web_site.web_mkt_id, web_site.web_site_sk
                                           ->  CStore Scan on col_subplan_new.web_site
                                                 Output: web_site.web_mkt_id, web_site.web_site_sk
                               ->  CTE Scan on tmp1
                                     Output: tmp1.s_store_sk, tmp1.s_company_id, tmp1.s_market_id
                                     Filter: (call_center.cc_call_center_sk = tmp1.s_company_id)
         ->  CStore Scan on col_subplan_new.customer
               Output: col_subplan_new.customer.c_customer_sk, col_subplan_new.customer.c_customer_id, col_subplan_new.customer.c_current_cdemo_sk, col_subplan_new.customer.c_current_hdemo_sk, col_subplan_new.customer.c_current_addr_sk, col_subplan_new.customer.c_first_shipto_date_sk, col_subplan_new.customer.c_first_sales_date_sk, col_subplan_new.customer.c_salutation, col_subplan_new.customer.c_first_name, col_subplan_new.customer.c_last_name, col_subplan_new.customer.c_preferred_cust_flag, col_subplan_new.customer.c_birth_day, col_subplan_new.customer.c_birth_month, $4, col_subplan_new.customer.c_birth_country, col_subplan_new.customer.c_login, col_subplan_new.customer.c_email_address, col_subplan_new.customer.c_last_review_date, col_subplan_new.customer.ctid, col_subplan_new.customer.tableoid
               Filter: ((col_subplan_new.customer.c_birth_day = 2) AND (col_subplan_new.customer.c_birth_month = 4))
(40 rows)

--add test case for hashed subplan (text->int8)
create table test_subplan(a int, b text) with (orientation=column)  ;
insert into test_subplan values(1, '2134');
create table row_test_subplan as select * from test_subplan;
explain (verbose on, costs off) select a, count(*) from test_subplan group by a, b order by (length(b)) in (select substr(b,3,1) from row_test_subplan);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Row Adapter
   Output: test_subplan.a, (count(*)), ((hashed SubPlan 1)), test_subplan.b
   ->  Vector Sort
         Output: test_subplan.a, (count(*)), ((hashed SubPlan 1)), test_subplan.b
         Sort Key: ((hashed SubPlan 1))
         ->  Vector Hash Aggregate
               Output: test_subplan.a, count(*), (hashed SubPlan 1), test_subplan.b
               Group By Key: test_subplan.a, test_subplan.b
               ->  CStore Scan on col_subplan_new.test_subplan
                     Output: test_subplan.a, test_subplan.b
               SubPlan 1
                 ->  Seq Scan on col_subplan_new.row_test_subplan
                       Output: substr(row_test_subplan.b, 3, 1)
(13 rows)

select a, count(*) from test_subplan group by a, b order by (length(b)) in (select substr(b,3,1) from row_test_subplan);
 a | count 
---+-------
 1 |     1
(1 row)

 
-- test empty batchstorestate in vecmaterialize
with tmp1 as (select s_street_number, s_market_id, s_store_sk from store)
select s_market_id, rank() over(partition by s_market_id, s_street_number < some (select sum(distinct cc_mkt_id - 1)
from call_center full join store on cc_call_center_sk = s_store_sk + 1 where s_market_id < 10) order by s_market_id, s_store_sk)
from tmp1 join customer on c_customer_sk = s_store_sk where s_market_id < 3 group by 1, s_store_sk, s_street_number
order by 1,2;
 s_market_id | rank 
-------------+------
(0 rows)

create table t1(c1 int, c2 int, c3 int) with(orientation=column);
insert into t1 select v, v*10, v*100 from generate_series(1, 20) as v;
select count(*) from t1 a WHERE a.ctid not in (SELECT b.ctid FROM t1 b WHERE a.c1 = b.c1);
 count 
-------
     0
(1 row)

drop table t1;
drop schema col_subplan_new cascade;
NOTICE:  drop cascades to 11 other objects
DETAIL:  drop cascades to table web_site
drop cascades to table customer_address_1
drop cascades to table web_page_1
drop cascades to table catalog_sales_1
drop cascades to table household_demographics_1
drop cascades to table income_band_1
drop cascades to table customer
drop cascades to table call_center
drop cascades to table store
drop cascades to table test_subplan
drop cascades to table row_test_subplan
