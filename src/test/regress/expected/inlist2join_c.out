create schema inlist2join_c;
set current_schema=inlist2join_c;
set qrw_inlist2join_optmode=1;
create table t1(c1 int, c2 int, c3 int) with (orientation=column) distribute by hash(c1);
insert into t1 select v,v,v from generate_series(1,12) as v;
create table t2(c1 int, c2 int, c3 int) with (orientation=column) distribute by hash(c1);
insert into t2 select v,v,v from generate_series(1,10) as v;
explain (costs off) select c1,c2 from t1 where t1.c2 in (3,4,7);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Hash Semi Join
               Hash Cond: (inlist2join_c.t1.c2 = "*VALUES*".column1)
               ->  CStore Scan on t1
               ->  Vector Adapter
                     ->  Values Scan on "*VALUES*"
(7 rows)

select c1,c2 from t1 where t1.c2 in (3,4,7) order by 1;
 c1 | c2 
----+----
  3 |  3
  4 |  4
  7 |  7
(3 rows)

explain (costs off) select c1,c3 from t1 where t1.c2 in (3,4,7);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Hash Semi Join
               Hash Cond: (inlist2join_c.t1.c2 = "*VALUES*".column1)
               ->  CStore Scan on t1
               ->  Vector Adapter
                     ->  Values Scan on "*VALUES*"
(7 rows)

select c1,c3 from t1 where t1.c3 in (3,4,7) order by 1;
 c1 | c3 
----+----
  3 |  3
  4 |  4
  7 |  7
(3 rows)

explain (costs off) select c2,c3 from t1 where t1.c2 in (3,4,7);
                             QUERY PLAN                              
---------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Hash Semi Join
               Hash Cond: (inlist2join_c.t1.c2 = "*VALUES*".column1)
               ->  CStore Scan on t1
               ->  Vector Adapter
                     ->  Values Scan on "*VALUES*"
(7 rows)

select c2,c3 from t1 where t1.c3 in (3,4,7) order by 1;
 c2 | c3 
----+----
  3 |  3
  4 |  4
  7 |  7
(3 rows)

explain (costs off) select t1.c1 as c1, t2.c2 as c2
from t1,t2
where t1.c1 = t2.c1 and t1.c1 in (3,4,5,6)
order by 1,2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: inlist2join_c.t1.c1, inlist2join_c.t2.c2
         ->  Vector Sort
               Sort Key: inlist2join_c.t1.c1, inlist2join_c.t2.c2
               ->  Vector Nest Loop
                     Join Filter: (inlist2join_c.t1.c1 = inlist2join_c.t2.c1)
                     ->  Vector Hash Semi Join
                           Hash Cond: (inlist2join_c.t1.c1 = "*VALUES*".column1)
                           ->  CStore Scan on t1
                           ->  Vector Streaming(type: REDISTRIBUTE)
                                 ->  Vector Adapter
                                       ->  Values Scan on "*VALUES*"
                     ->  Vector Materialize
                           ->  Vector Hash Semi Join
                                 Hash Cond: (inlist2join_c.t2.c1 = "*VALUES*".column1)
                                 ->  CStore Scan on t2
                                 ->  Vector Streaming(type: REDISTRIBUTE)
                                       ->  Vector Adapter
                                             ->  Values Scan on "*VALUES*"
(20 rows)

select t1.c1 as c1, t2.c2 as c2
from t1,t2
where t1.c1 = t2.c1 and t1.c1 in (3,4,5,6)
order by 1,2;
 c1 | c2 
----+----
  3 |  3
  4 |  4
  5 |  5
  6 |  6
(4 rows)

explain (costs off) select * from
(
    select t1.c1 as c1, t2.c2 as c2, count(*) as sum
    from t1,t2
    where t1.c1 = t2.c1
    group by 1,2
) as dt where dt.c1 in (3,4,5,6)
order by 1,2,3;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: inlist2join_c.t1.c1, inlist2join_c.t2.c2, (count(*))
         ->  Vector Sort
               Sort Key: inlist2join_c.t1.c1, inlist2join_c.t2.c2, (count(*))
               ->  Vector Sonic Hash Aggregate
                     Group By Key: inlist2join_c.t1.c1, inlist2join_c.t2.c2
                     ->  Vector Nest Loop
                           Join Filter: (inlist2join_c.t1.c1 = inlist2join_c.t2.c1)
                           ->  Vector Hash Semi Join
                                 Hash Cond: (inlist2join_c.t1.c1 = "*VALUES*".column1)
                                 ->  CStore Scan on t1
                                 ->  Vector Streaming(type: REDISTRIBUTE)
                                       ->  Vector Adapter
                                             ->  Values Scan on "*VALUES*"
                           ->  Vector Materialize
                                 ->  Vector Hash Semi Join
                                       Hash Cond: (inlist2join_c.t2.c1 = "*VALUES*".column1)
                                       ->  CStore Scan on t2
                                       ->  Vector Streaming(type: REDISTRIBUTE)
                                             ->  Vector Adapter
                                                   ->  Values Scan on "*VALUES*"
(22 rows)

select * from
(
    select t1.c1 as c1, t2.c2 as c2, count(*) as sum
    from t1,t2
    where t1.c1 = t2.c1
    group by 1,2
) as dt where dt.c1 in (3,4,5,6)
order by 1,2,3;
 c1 | c2 | sum 
----+----+-----
  3 |  3 |   1
  4 |  4 |   1
  5 |  5 |   1
  6 |  6 |   1
(4 rows)

explain (costs off) select t1.c2, count(*) from t1 where t1.c1 in (1,2,3) group by t1.c2 having t1.c2 in (1,3) order by 1;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: inlist2join_c.t1.c2
         ->  Vector Sort
               Sort Key: inlist2join_c.t1.c2
               ->  Vector Sonic Hash Aggregate
                     Group By Key: inlist2join_c.t1.c2
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           ->  Vector Nest Loop Semi Join
                                 Join Filter: (inlist2join_c.t1.c1 = "*VALUES*".column1)
                                 ->  Vector Hash Semi Join
                                       Hash Cond: (inlist2join_c.t1.c2 = "*VALUES*".column1)
                                       ->  CStore Scan on t1
                                       ->  Vector Adapter
                                             ->  Values Scan on "*VALUES*"
                                 ->  Vector Materialize
                                       ->  Vector Streaming(type: REDISTRIBUTE)
                                             ->  Vector Adapter
                                                   ->  Values Scan on "*VALUES*"
(19 rows)

select t1.c2, count(*) from t1 where t1.c1 in (1,2,3) group by t1.c2 having t1.c2 in (1,3) order by 1;
 c2 | count 
----+-------
  1 |     1
  3 |     1
(2 rows)

explain (costs off) select t1.c3, t1.c2 from t1 where t1.c1 > 1 AND t1.c2 in (select t2.c2 from t2 where t2.c1 IN (3,4,5,6,7)) order by 1,2;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: t1.c3, t1.c2
         ->  Vector Sort
               Sort Key: t1.c3, t1.c2
               ->  Vector Nest Loop Semi Join
                     Join Filter: (t1.c2 = inlist2join_c.t2.c2)
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           ->  CStore Scan on t1
                                 Filter: (c1 > 1)
                     ->  Vector Materialize
                           ->  Vector Streaming(type: REDISTRIBUTE)
                                 ->  Vector Hash Semi Join
                                       Hash Cond: (inlist2join_c.t2.c1 = "*VALUES*".column1)
                                       ->  CStore Scan on t2
                                       ->  Vector Streaming(type: REDISTRIBUTE)
                                             ->  Vector Adapter
                                                   ->  Values Scan on "*VALUES*"
(18 rows)

select t1.c3, t1.c2 from t1 where t1.c1 > 1 AND t1.c2 in (select t2.c2 from t2 where t2.c1 IN (3,4,5,6,7)) order by 1,2;
 c3 | c2 
----+----
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
(5 rows)

select t1.c2, sum(t1.c3) from t1 where t1.c1 in (1,2,3) group by t1.c2 order by t1.c2 limit 2;
 c2 | sum 
----+-----
  1 |   1
  2 |   2
(2 rows)

select max(t1.c2) from t1 where t1.c1 < 4 and t1.c1 in (2,3,4);
 max 
-----
   3
(1 row)

select t1.c2, t2.c3, count(*) from t1,t2 where t1.c1 = t2.c2 and t1.c1 in (1,2,3) group by t1.c2,t2.c3 order by t1.c2;
 c2 | c3 | count 
----+----+-------
  1 |  1 |     1
  2 |  2 |     1
  3 |  3 |     1
(3 rows)

select t1.c2, t2.c3, sum(t1.c3) from t1,t2 where t1.c1 = t2.c2 and t1.c1 in (1,2,3) group by t1.c2,t2.c3 order by t1.c2 limit 2;
 c2 | c3 | sum 
----+----+-----
  1 |  1 |   1
  2 |  2 |   2
(2 rows)

select * from (select * from t1 where t1.c1 in (1,4,11) union all select * from t2) as dt order by 1;
 c1 | c2 | c3 
----+----+----
  1 |  1 |  1
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  6
  7 |  7 |  7
  8 |  8 |  8
  9 |  9 |  9
 10 | 10 | 10
 11 | 11 | 11
(13 rows)

select * from (select * from t1 union all select * from t2 where t2.c1 in (1,4,11)) as dt order by 1;
 c1 | c2 | c3 
----+----+----
  1 |  1 |  1
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  6
  7 |  7 |  7
  8 |  8 |  8
  9 |  9 |  9
 10 | 10 | 10
 11 | 11 | 11
 12 | 12 | 12
(14 rows)

select * from (select * from t1 where t1.c1 in (1,4,11) union all select * from t2 where t2.c1 in (2,3)) as dt order by 1;
 c1 | c2 | c3 
----+----+----
  1 |  1 |  1
  2 |  2 |  2
  3 |  3 |  3
  4 |  4 |  4
 11 | 11 | 11
(5 rows)

--测试expression inlist场景
-- allow for inlist2join
explain (costs off) select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c1 + 2) in (1,2,3,4,5) order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: inlist2join_c.t1.c1
         ->  Vector Sort
               Sort Key: inlist2join_c.t1.c1
               ->  Vector Nest Loop
                     Join Filter: (inlist2join_c.t1.c1 = inlist2join_c.t2.c1)
                     ->  Vector Hash Semi Join
                           Hash Cond: ((inlist2join_c.t1.c1 + 2) = "*VALUES*".column1)
                           ->  CStore Scan on t1
                           ->  Vector Adapter
                                 ->  Values Scan on "*VALUES*"
                     ->  Vector Materialize
                           ->  Vector Streaming(type: REDISTRIBUTE)
                                 ->  Vector Hash Semi Join
                                       Hash Cond: ((inlist2join_c.t2.c1 + 2) = "*VALUES*".column1)
                                       ->  CStore Scan on t2
                                       ->  Vector Adapter
                                             ->  Values Scan on "*VALUES*"
(19 rows)

select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c1 + 2) in (1,2,3,4,5) order by 1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
  3 |  3
(3 rows)

explain (costs off) select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c2 * 2) in (1,2,3,4,5) order by 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: inlist2join_c.t1.c1
         ->  Vector Sort
               Sort Key: inlist2join_c.t1.c1
               ->  Vector Nest Loop
                     Join Filter: (inlist2join_c.t1.c1 = t2.c1)
                     ->  Vector Hash Semi Join
                           Hash Cond: ((inlist2join_c.t1.c2 * 2) = "*VALUES*".column1)
                           ->  CStore Scan on t1
                           ->  Vector Adapter
                                 ->  Values Scan on "*VALUES*"
                     ->  CStore Scan on t2
(13 rows)

select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c2 *2) in (1,2,3,4,5) order by 1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

-- disallow for inlistjoin
explain (costs off) select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c1 + t1.c2) in (1,2,3,4,5) order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         Merge Sort Key: t1.c1
         ->  Vector Sort
               Sort Key: t1.c1
               ->  Vector Nest Loop
                     Join Filter: (t1.c1 = t2.c1)
                     ->  CStore Scan on t1
                           Filter: ((c1 + c2) = ANY ('{1,2,3,4,5}'::integer[]))
                     ->  CStore Scan on t2
(10 rows)

select t1.c1, t2.c1 from t1, t2 where t1.c1 = t2.c1 and (t1.c1 + t2.c2) in (1,2,3,4,5) order by 1;
 c1 | c1 
----+----
  1 |  1
  2 |  2
(2 rows)

--
-- forbid inlist2join query rewrite if there's subplan
set qrw_inlist2join_optmode=1;
create table t3(c1 int, c2 int, c3 int) distribute by hash(c1);
insert into t3 select v,v,v from generate_series(1,10) as v;
-- the sublink can be pull up, so there is no subpaln, do inlist2join
explain (costs off) select * from t1 where t1.c1 in (select c1 from t2 where t2.c2 > 2) AND t1.c2 in (1,2,3);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Nest Loop Semi Join
               Join Filter: (inlist2join_c.t1.c1 = t2.c1)
               ->  Vector Hash Semi Join
                     Hash Cond: (inlist2join_c.t1.c2 = "*VALUES*".column1)
                     ->  CStore Scan on t1
                     ->  Vector Adapter
                           ->  Values Scan on "*VALUES*"
               ->  Vector Materialize
                     ->  CStore Scan on t2
                           Filter: (c2 > 2)
(12 rows)

explain (costs off) select * from t1 where exists (select c1 from t2 where t2.c2 = t1.c1) and t1.c1 in (1,2,3);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Nest Loop Semi Join
               Join Filter: (inlist2join_c.t1.c1 = inlist2join_c.t2.c2)
               ->  Vector Hash Semi Join
                     Hash Cond: (inlist2join_c.t1.c1 = "*VALUES*".column1)
                     ->  CStore Scan on t1
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           ->  Vector Adapter
                                 ->  Values Scan on "*VALUES*"
               ->  Vector Materialize
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           ->  Vector Hash Semi Join
                                 Hash Cond: (inlist2join_c.t2.c2 = "*VALUES*".column1)
                                 ->  CStore Scan on t2
                                 ->  Vector Adapter
                                       ->  Values Scan on "*VALUES*"
(17 rows)

explain (costs off) select * from t1 join t2 on t1.c1=t2.c1 and t1.c1 not in (select c2 from t3 where t3.c2>2) and t1.c3 in (1,2,3);
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Anti Join
         Join Filter: ((inlist2join_c.t1.c1 = t3.c2) OR (inlist2join_c.t1.c1 IS NULL) OR (t3.c2 IS NULL))
         ->  Nested Loop
               Join Filter: (inlist2join_c.t1.c1 = t2.c1)
               ->  Hash Semi Join
                     Hash Cond: (inlist2join_c.t1.c3 = "*VALUES*".column1)
                     ->  Row Adapter
                           ->  CStore Scan on t1
                     ->  Hash
                           ->  Values Scan on "*VALUES*"
               ->  Row Adapter
                     ->  CStore Scan on t2
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Seq Scan on t3
                           Filter: (c2 > 2)
(17 rows)

-- the sublink can not be pull up, so there is subpaln, do not inlist2join
explain (costs off) select * from t1 where t1.c1 in (select c1 from t2 where t2.c2 = t1.c2) AND t1.c2 in (1,2,3);
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  CStore Scan on t1
               Filter: ((c2 = ANY ('{1,2,3}'::integer[])) AND (SubPlan 1))
               SubPlan 1
                 ->  Row Adapter
                       ->  Vector Result
                             Filter: (t2.c2 = t1.c2)
                             ->  Vector Materialize
                                   ->  Vector Streaming(type: BROADCAST)
                                         ->  CStore Scan on t2
(11 rows)

explain (costs off) select * from t1 where exists (select c1 from t2 where t2.c2 > 2) and t1.c1 in (1,2,3);
                          QUERY PLAN                           
---------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         InitPlan 1 (returns $0)
           ->  Row Adapter
                 ->  Vector Streaming(type: BROADCAST)
                       ->  CStore Scan on t2
                             Filter: (c2 > 2)
         ->  Vector Result
               One-Time Filter: $0
               ->  CStore Scan on t1
                     Filter: (c1 = ANY ('{1,2,3}'::integer[]))
(11 rows)

explain (costs off) select * from t1 join t2 on t1.c1=t2.c1 and t1.c1 not in (select c2 from t3 where t3.c2=t1.c2) and t1.c3 in (1,2,3);
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Streaming (type: GATHER)
         ->  Vector Nest Loop
               Join Filter: (t1.c1 = t2.c1)
               ->  CStore Scan on t1
                     Filter: ((c3 = ANY ('{1,2,3}'::integer[])) AND (NOT (SubPlan 1)))
                     SubPlan 1
                       ->  Result
                             Filter: (t3.c2 = t1.c2)
                             ->  Materialize
                                   ->  Streaming(type: BROADCAST)
                                         ->  Seq Scan on t3
               ->  CStore Scan on t2
(13 rows)

--
drop table t1;
drop table t2;
drop table t3;
drop schema inlist2join_c cascade;
