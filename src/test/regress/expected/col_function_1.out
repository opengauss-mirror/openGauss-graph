create schema vector_distribute_function_1;
set current_schema = vector_distribute_function_1;
create table row_functiontable(f1 int, f2 float, f3 text);
insert into row_functiontable values(1,2.0,'abcde'),(2,4.0,'abcde'),(3,5.0,'affde');
insert into row_functiontable values(4,7.0,'aeede'),(5,1.0,'facde'),(6,3.0,'affde');
create table function_table_01(f1 int, f2 float, f3 text)  with (orientation = column);
insert into function_table_01 select * from row_functiontable;
analyze function_table_01;
CREATE OR REPLACE FUNCTION test_function_immutable RETURNS BIGINT AS
$body$ 
BEGIN
RETURN 3;
END;
$body$
LANGUAGE 'plpgsql'
IMMUTABLE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;
explain (verbose, costs off) select * from test_function_immutable();
                QUERY PLAN                
------------------------------------------
 Function Scan on test_function_immutable
   Output: test_function_immutable
   Function Call: 3::bigint
(3 rows)

select * from test_function_immutable();
 test_function_immutable 
-------------------------
                       3
(1 row)

CREATE VIEW functionview AS SELECT f1,f2,left(f3,test_function_immutable()::INT) f3 FROM function_table_01;
--targetlist
explain (verbose, costs off) select f1,left(f3,test_function_immutable()::INT) from function_table_01 order by 1 limit 3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: f1, ("left"(f3, 3))
   ->  Vector Limit
         Output: f1, ("left"(f3, 3))
         ->  Vector Sort
               Output: f1, ("left"(f3, 3))
               Sort Key: function_table_01.f1
               ->  CStore Scan on vector_distribute_function_1.function_table_01
                     Output: f1, "left"(f3, 3)
(9 rows)

select f1,left(f3,test_function_immutable()::INT) from function_table_01 order by 1 limit 3;
 f1 | left 
----+------
  1 | abc
  2 | abc
  3 | aff
(3 rows)

--fromQual
explain (verbose, costs off) select * from function_table_01 where f1 = test_function_immutable();
                             QUERY PLAN                              
---------------------------------------------------------------------
 Row Adapter
   Output: f1, f2, f3
   ->  CStore Scan on vector_distribute_function_1.function_table_01
         Output: f1, f2, f3
         Filter: (function_table_01.f1 = 3::bigint)
(5 rows)

select * from function_table_01 where f1 = test_function_immutable();
 f1 | f2 |  f3   
----+----+-------
  3 |  5 | affde
(1 row)

--sortClause
explain (verbose, costs off) select f1,f3 from function_table_01 order by left(f3,test_function_immutable()::INT) limit 3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: f1, f3, ("left"(f3, 3))
   ->  Vector Limit
         Output: f1, f3, ("left"(f3, 3))
         ->  Vector Sort
               Output: f1, f3, ("left"(f3, 3))
               Sort Key: ("left"(function_table_01.f3, 3))
               ->  CStore Scan on vector_distribute_function_1.function_table_01
                     Output: f1, f3, "left"(f3, 3)
(9 rows)

select f1,f3 from function_table_01 order by left(f3,test_function_immutable()::INT), f1 limit 3;
 f1 |  f3   
----+-------
  1 | abcde
  2 | abcde
  4 | aeede
(3 rows)

--groupClause
explain (verbose, costs off) select avg(f2),left(f3,test_function_immutable()::INT) from function_table_01 group by 2 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: (avg(f2)), ("left"(f3, 3))
   ->  Vector Sort
         Output: (avg(f2)), ("left"(f3, 3))
         Sort Key: (avg(function_table_01.f2))
         ->  Vector Hash Aggregate
               Output: avg(f2), ("left"(f3, 3))
               Group By Key: "left"(function_table_01.f3, 3)
               ->  CStore Scan on vector_distribute_function_1.function_table_01
                     Output: "left"(f3, 3), f2
(10 rows)

select avg(f2),left(f3,test_function_immutable()::INT) from function_table_01 group by 2 order by 1;
 avg | left 
-----+------
   1 | fac
   3 | abc
   4 | aff
   7 | aee
(4 rows)

--havingClause
explain (verbose, costs off) select avg(f2) fa,f3 from function_table_01 group by f3 having avg(f2)>test_function_immutable()  order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: (avg(f2)), f3
   ->  Vector Sort
         Output: (avg(f2)), f3
         Sort Key: (avg(function_table_01.f2))
         ->  Vector Hash Aggregate
               Output: avg(f2), f3
               Group By Key: function_table_01.f3
               Filter: (avg(function_table_01.f2) > 3::double precision)
               ->  CStore Scan on vector_distribute_function_1.function_table_01
                     Output: f3, f2
(11 rows)

select avg(f2) fa,f3 from function_table_01 group by f3 having avg(f2)>test_function_immutable() order by 1;
 fa |  f3   
----+-------
  4 | affde
  7 | aeede
(2 rows)

--limitClause && offsetClause
explain (verbose, costs off) select * from function_table_01 order by 1 limit test_function_immutable() offset test_function_immutable();
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: f1, f2, f3
   ->  Vector Limit
         Output: f1, f2, f3
         ->  Vector Sort
               Output: f1, f2, f3
               Sort Key: function_table_01.f1
               ->  CStore Scan on vector_distribute_function_1.function_table_01
                     Output: f1, f2, f3
(9 rows)

select * from function_table_01 order by 1  limit test_function_immutable() offset test_function_immutable();
 f1 | f2 |  f3   
----+----+-------
  4 |  7 | aeede
  5 |  1 | facde
  6 |  3 | affde
(3 rows)

explain (verbose, costs off) select avg(f2),left(f3,test_function_immutable()::INT) from function_table_01 group by 2 having avg(f2)>test_function_immutable() order by 1 limit test_function_immutable() offset test_function_immutable()-2;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Row Adapter
   Output: (avg(f2)), ("left"(f3, 3))
   ->  Vector Limit
         Output: (avg(f2)), ("left"(f3, 3))
         ->  Vector Sort
               Output: (avg(f2)), ("left"(f3, 3))
               Sort Key: (avg(function_table_01.f2))
               ->  Vector Hash Aggregate
                     Output: avg(f2), ("left"(f3, 3))
                     Group By Key: "left"(function_table_01.f3, 3)
                     Filter: (avg(function_table_01.f2) > 3::double precision)
                     ->  CStore Scan on vector_distribute_function_1.function_table_01
                           Output: "left"(f3, 3), f2
(13 rows)

select avg(f2),left(f3,test_function_immutable()::INT) from function_table_01 group by 2 having avg(f2)>test_function_immutable() order by 1 limit test_function_immutable() offset test_function_immutable()-2;
 avg | left 
-----+------
   7 | aee
(1 row)

drop view functionview;
drop function test_function_immutable;
drop table function_table_01;
drop table row_functiontable;
drop schema vector_distribute_function_1;
