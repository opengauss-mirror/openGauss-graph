/*
 * This file is used to test three possible paths of hash agg stream paths
 */
-- Part-1
drop schema if exists distribute_aggregates_part1 cascade;
NOTICE:  schema "distribute_aggregates_part1" does not exist, skipping
create schema distribute_aggregates_part1;
set current_schema = distribute_aggregates_part1;
-- prepare a temp table for import data
create table tmp_t1(c1 int);
insert into tmp_t1 values (1);
-- Create Table and Insert Data
create table t_agg1(a int, b int, c int, d int, e int, f int, g regproc);
create table t_agg2(a int, b int, c int);
insert into t_agg1 select generate_series(1, 10000), generate_series(1, 10000)%5000, generate_series(1, 10000)%500, generate_series(1, 10000)%5, 500, 3, 'sin' from tmp_t1;
insert into t_agg2 select generate_series(1, 10), generate_series(11, 2, -1), generate_series(3, 12);
/*select * from table_skewness('t_agg1', 'b,c') order by 1, 2, 3;*/
analyze t_agg1;
analyze t_agg2;
-- Case 1: hashagg + gather + hashagg, applicable to very small aggregate set, usually much less than DN number
-- group by clause
explain (costs off) select e, sum(c) from t_agg1 group by e;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: e
   ->  Seq Scan on t_agg1
(3 rows)

select e, sum(c) from t_agg1 group by e;
  e  |   sum   
-----+---------
 500 | 2495000
(1 row)

explain (costs off) select e, sum(b+c), avg(d) from t_agg1 group by e;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: e
   ->  Seq Scan on t_agg1
(3 rows)

select e, sum(b+c), avg(d) from t_agg1 group by e;
  e  |   sum    |        avg         
-----+----------+--------------------
 500 | 27490000 | 2.0000000000000000
(1 row)

explain (costs off) select f, e, max(a), min(b) from t_agg1 group by f, e;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: f, e
   ->  Seq Scan on t_agg1
(3 rows)

select f, e, max(a), min(b) from t_agg1 group by f, e;
 f |  e  |  max  | min 
---+-----+-------+-----
 3 | 500 | 10000 |   0
(1 row)

explain (costs off) select e, min(b), rank() over (partition by f order by f) from t_agg1 group by f, e;
              QUERY PLAN              
--------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: f
         ->  HashAggregate
               Group By Key: f, e
               ->  Seq Scan on t_agg1
(6 rows)

select e, min(b), rank() over (partition by f order by f) from t_agg1 group by f, e;
  e  | min | rank 
-----+-----+------
 500 |   0 |    1
(1 row)

-- distinct clause
explain (costs off) select distinct(e) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: e
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(e) from t_agg1;
  e  
-----
 500
(1 row)

explain (costs off) select distinct(e+f) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: (e + f)
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(e+f) from t_agg1;
 ?column? 
----------
      503
(1 row)

-- join
explain (costs off) select sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.e;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.e
   ->  Hash Join
         Hash Cond: (t_agg1.c = t_agg2.b)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.e;
  sum   
--------
 951300
(1 row)

explain (costs off) select a, sum(c) from (select t_agg1.e a, t_agg1.b b, t_agg2.a-t_agg2.b c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.e
   ->  Hash Join
         Hash Cond: (t_agg1.b = t_agg2.c)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select a, sum(c) from (select t_agg1.e a, t_agg1.b b, t_agg2.a-t_agg2.b c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a;
  a  | sum 
-----+-----
 500 | -20
(1 row)

explain (costs off) select a, sum(c) from (select t_agg1.b b, t_agg1.e a, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by 1, 2) group by a;
                      QUERY PLAN                      
------------------------------------------------------
 HashAggregate
   Group By Key: __unnamed_subquery__.a
   ->  Subquery Scan on __unnamed_subquery__
         ->  HashAggregate
               Group By Key: t_agg1.b, t_agg1.e
               ->  Hash Join
                     Hash Cond: (t_agg1.b = t_agg2.c)
                     ->  Seq Scan on t_agg1
                     ->  Hash
                           ->  Seq Scan on t_agg2
(10 rows)

select a, sum(c) from (select t_agg1.b b, t_agg1.e a, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by 1, 2) group by a;
  a  | sum 
-----+-----
 500 | -20
(1 row)

explain (costs off) select a, sum(c) from (select t_agg1.b b, t_agg1.e a, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by 1, 2) group by a having sum(c)=-20;
                        QUERY PLAN                        
----------------------------------------------------------
 HashAggregate
   Group By Key: __unnamed_subquery__.a
   Filter: (sum(__unnamed_subquery__.c) = (-20)::numeric)
   ->  Subquery Scan on __unnamed_subquery__
         ->  HashAggregate
               Group By Key: t_agg1.b, t_agg1.e
               ->  Hash Join
                     Hash Cond: (t_agg1.b = t_agg2.c)
                     ->  Seq Scan on t_agg1
                     ->  Hash
                           ->  Seq Scan on t_agg2
(11 rows)

select a, sum(c) from (select t_agg1.b b, t_agg1.e a, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by 1, 2) group by a having sum(c)=-20;
  a  | sum 
-----+-----
 500 | -20
(1 row)

-- Case 2: redistribute + hashagg + gather, applicable to large aggregate set, with less rows eliminated by hash agg
-- group by clause
explain (costs off) select b, sum(a+c), avg(d) from t_agg1 group by b;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: b
   ->  Seq Scan on t_agg1
(3 rows)

select b, sum(a+c), avg(d) from t_agg1 group by b order by b limit 10;
 b |  sum  |          avg           
---+-------+------------------------
 0 | 15000 | 0.00000000000000000000
 1 |  5004 | 1.00000000000000000000
 2 |  5008 |     2.0000000000000000
 3 |  5012 |     3.0000000000000000
 4 |  5016 |     4.0000000000000000
 5 |  5020 | 0.00000000000000000000
 6 |  5024 | 1.00000000000000000000
 7 |  5028 |     2.0000000000000000
 8 |  5032 |     3.0000000000000000
 9 |  5036 |     4.0000000000000000
(10 rows)

explain (costs off) select b, c, max(a), min(d) from t_agg1 group by b, c;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: b, c
   ->  Seq Scan on t_agg1
(3 rows)

select b, c, max(a), min(d) from t_agg1 group by b, c order by b, c limit 10;
 b | c |  max  | min 
---+---+-------+-----
 0 | 0 | 10000 |   0
 1 | 1 |  5001 |   1
 2 | 2 |  5002 |   2
 3 | 3 |  5003 |   3
 4 | 4 |  5004 |   4
 5 | 5 |  5005 |   0
 6 | 6 |  5006 |   1
 7 | 7 |  5007 |   2
 8 | 8 |  5008 |   3
 9 | 9 |  5009 |   4
(10 rows)

explain (costs off) select b, d, min(c), rank() over (partition by d order by d) from t_agg1 group by b, d;
              QUERY PLAN              
--------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: d
         ->  HashAggregate
               Group By Key: b, d
               ->  Seq Scan on t_agg1
(6 rows)

select b, d, min(c), rank() over (partition by d order by d) from t_agg1 group by b, d order by b, d limit 10;
 b | d | min | rank 
---+---+-----+------
 0 | 0 |   0 |    1
 1 | 1 |   1 |    1
 2 | 2 |   2 |    1
 3 | 3 |   3 |    1
 4 | 4 |   4 |    1
 5 | 0 |   5 |    1
 6 | 1 |   6 |    1
 7 | 2 |   7 |    1
 8 | 3 |   8 |    1
 9 | 4 |   9 |    1
(10 rows)

-- distinct clause
explain (costs off) select distinct(b) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: b
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(b) from t_agg1 order by 1 limit 10;
 b 
---
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)

explain (costs off) select distinct(b+c) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: (b + c)
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(b+c) from t_agg1 order by 1 limit 10;
 ?column? 
----------
        0
        2
        4
        6
        8
       10
       12
       14
       16
       18
(10 rows)

-- subquery
-- (1) group by clause
explain (costs off) select sum(x) from (select sum(a) x from t_agg1 group by b);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.b
         ->  Seq Scan on t_agg1
(4 rows)

select sum(x) from (select sum(a) x from t_agg1 group by b);
   sum    
----------
 50005000
(1 row)

explain (costs off) select sum(x) from (select sum(a) x from t_agg1 group by b, c);
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.b, t_agg1.c
         ->  Seq Scan on t_agg1
(4 rows)

select sum(x) from (select sum(a) x from t_agg1 group by b, c);
   sum    
----------
 50005000
(1 row)

explain (costs off) select sum(c+d) from (select 2*b x, c, d from t_agg1) group by x;
           QUERY PLAN           
--------------------------------
 HashAggregate
   Group By Key: (2 * t_agg1.b)
   ->  Seq Scan on t_agg1
(3 rows)

select sum(c+d) from (select 2*b x, c, d from t_agg1) group by x order by x limit 10;
 sum 
-----
   0
   4
   8
  12
  16
  10
  14
  18
  22
  26
(10 rows)

explain (costs off) select sum(x) from (select 1, sum(a) x from t_agg1 group by 1);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  GroupAggregate
         Group By Key: 1
         ->  Seq Scan on t_agg1
(4 rows)

select sum(x) from (select 1, sum(a) x from t_agg1 group by 1);
   sum    
----------
 50005000
(1 row)

explain (costs off) select avg(z) from (select 2*a x, a+1 y, a-1 z from t_agg1) group by x, y;
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Group By Key: (2 * t_agg1.a), (t_agg1.a + 1)
   ->  Seq Scan on t_agg1
(3 rows)

select avg(z) from (select 2*a x, a+1 y, a-1 z from t_agg1) group by x, y order by x, y limit 10;
          avg           
------------------------
 0.00000000000000000000
 1.00000000000000000000
     2.0000000000000000
     3.0000000000000000
     4.0000000000000000
     5.0000000000000000
     6.0000000000000000
     7.0000000000000000
     8.0000000000000000
     9.0000000000000000
(10 rows)

CREATE TABLE sales_transaction_line
(
    sales_tran_id number(38,10) null,
    tran_line_status_cd clob null,
    tran_line_sales_type_cd char(100) null
)with (orientation=row);
explain (costs off)
SELECT
    CAST(TRAN_LINE_STATUS_CD AS char) c1,
    CAST(TRAN_LINE_STATUS_CD AS char) c2,
    TRAN_LINE_SALES_TYPE_CD c3,
    DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c1,c3 ;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: tran_line_sales_type_cd
         ->  HashAggregate
               Group By Key: (tran_line_status_cd)::character(1), tran_line_sales_type_cd
               ->  Seq Scan on sales_transaction_line
(6 rows)

explain (costs off)
SELECT
   CAST(TRAN_LINE_STATUS_CD AS char) c1,
   CAST(TRAN_LINE_STATUS_CD AS char) c2,
   TRAN_LINE_SALES_TYPE_CD c3,
   DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c1,c2,c3 ;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: tran_line_sales_type_cd
         ->  HashAggregate
               Group By Key: (tran_line_status_cd)::character(1), (tran_line_status_cd)::character(1), tran_line_sales_type_cd
               ->  Seq Scan on sales_transaction_line
(6 rows)

SELECT 
    CAST(TRAN_LINE_STATUS_CD AS char) c1,
    CAST(TRAN_LINE_STATUS_CD AS char) c2,
    TRAN_LINE_SALES_TYPE_CD c3,
    DENSE_RANK() OVER (order by TRAN_LINE_SALES_TYPE_CD)  
FROM sales_transaction_line 
GROUP BY c2,c3;
 c1 | c2 | c3 | dense_rank 
----+----+----+------------
(0 rows)

reset current_schema;
drop schema if exists distribute_aggregates_part1 cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table distribute_aggregates_part1.tmp_t1
drop cascades to table distribute_aggregates_part1.t_agg1
drop cascades to table distribute_aggregates_part1.t_agg2
drop cascades to table distribute_aggregates_part1.sales_transaction_line
