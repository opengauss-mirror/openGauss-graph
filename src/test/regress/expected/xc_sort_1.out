--
-- XC_SORT
--
-- This file contains tests for Merge Sort optimization for Postgres-XC. In this
-- optimization if possible the data is fetched ordered from the Datanodes and
-- merged at the Coordinator.
-- Testset 1 for distributed table (use hash tables so that node reduction can
-- be tested)
select create_table_nodes('xc_sort1_hash(val int, val2 int)', 'hash(val)', NULL);
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('xc_sort2_hash(val int, val2 int)', 'hash(val)', NULL);
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('xc_sort1_rep(val int, val2 int)', 'replication', NULL);
 create_table_nodes 
--------------------
 
(1 row)

select create_table_nodes('xc_sort2_rep(val int, val2 int)', 'replication', NULL);
 create_table_nodes 
--------------------
 
(1 row)

insert into xc_sort1_hash values (1, 2), (2, 4), (5, 3), (7, 8), (9, 2), (1, 3), (5, 10);
insert into xc_sort2_hash values (1, 2), (2, 4), (5, 3), (7, 8), (9, 2), (1, 3), (5, 10);
insert into xc_sort1_rep values (1, 2), (2, 4), (5, 3), (7, 8), (9, 2), (1, 3), (5, 10);
insert into xc_sort2_rep values (1, 2), (2, 4), (5, 3), (7, 8), (9, 2), (1, 3), (5, 10);
-- simple test
select * from xc_sort1_hash order by val, val2;
 val | val2 
-----+------
   1 |    2
   1 |    3
   2 |    4
   5 |    3
   5 |   10
   7 |    8
   9 |    2
(7 rows)

explain (costs off, verbose on) select * from xc_sort1_hash order by val, val2;
                       QUERY PLAN                        
---------------------------------------------------------
 Streaming (type: GATHER)
   Output: val, val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_sort1_hash.val, xc_sort1_hash.val2
         ->  Seq Scan on public.xc_sort1_hash
               Output: val, val2
(7 rows)

select val::char(3), val2 from xc_sort1_hash order by val, val2;
 val | val2 
-----+------
 1   |    2
 1   |    3
 2   |    4
 5   |    3
 5   |   10
 7   |    8
 9   |    2
(7 rows)

explain (costs off, verbose on) select val::char(3), val2 from xc_sort1_hash order by val, val2;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: ((val)::character(3)), val2
   ->  Sort
         Output: ((val)::character(3)), val2
         Sort Key: ((xc_sort1_hash.val)::character(3)), xc_sort1_hash.val2
         ->  Seq Scan on public.xc_sort1_hash
               Output: (val)::character(3), val2
(7 rows)

select sum(val), val2 from xc_sort1_hash group by val2 order by sum(val);
 sum | val2 
-----+------
   2 |    4
   5 |   10
   6 |    3
   7 |    8
  10 |    2
(5 rows)

explain (costs off, verbose on) select sum(val), val2 from xc_sort1_hash group by val2 order by sum(val);
                        QUERY PLAN                        
----------------------------------------------------------
 Streaming (type: GATHER)
   Output: (sum(val)), val2
   ->  Sort
         Output: (sum(val)), val2
         Sort Key: (sum(xc_sort1_hash.val))
         ->  HashAggregate
               Output: sum(val), val2
               Group By Key: xc_sort1_hash.val2
               ->  Streaming(type: REDISTRIBUTE)
                     Output: val2, val
                     Distribute Key: val2
                     ->  Seq Scan on public.xc_sort1_hash
                           Output: val2, val
(13 rows)

-- No need for sorting on the Coordinator, there will be only one node involved
select * from xc_sort1_hash where val = 5 order by val2;
 val | val2 
-----+------
   5 |    3
   5 |   10
(2 rows)

explain (costs off, verbose on) select * from xc_sort1_hash where val = 5 order by val2;
                  QUERY PLAN                   
-----------------------------------------------
 Streaming (type: GATHER)
   Output: val, val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_sort1_hash.val2
         ->  Seq Scan on public.xc_sort1_hash
               Output: val, val2
               Filter: (xc_sort1_hash.val = 5)
(8 rows)

-- pushable JOINs
select * from xc_sort1_hash natural join xc_sort2_hash order by val, val2;
 val | val2 
-----+------
   1 |    2
   1 |    3
   2 |    4
   5 |    3
   5 |   10
   7 |    8
   9 |    2
(7 rows)

explain (costs off, verbose on) select * from xc_sort1_hash natural join xc_sort2_hash order by val, val2;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: xc_sort1_hash.val, xc_sort1_hash.val2
   ->  Sort
         Output: xc_sort1_hash.val, xc_sort1_hash.val2
         Sort Key: xc_sort1_hash.val, xc_sort1_hash.val2
         ->  Hash Join
               Output: xc_sort1_hash.val, xc_sort1_hash.val2
               Hash Cond: ((xc_sort1_hash.val = xc_sort2_hash.val) AND (xc_sort1_hash.val2 = xc_sort2_hash.val2))
               ->  Seq Scan on public.xc_sort1_hash
                     Output: xc_sort1_hash.val, xc_sort1_hash.val2
               ->  Hash
                     Output: xc_sort2_hash.val, xc_sort2_hash.val2
                     ->  Seq Scan on public.xc_sort2_hash
                           Output: xc_sort2_hash.val, xc_sort2_hash.val2
(14 rows)

-- unshippable sort tests
select sum(val) over w, array_agg(val) over w from xc_sort1_hash window w as (order by val, val2 rows 2 preceding) order by 1; 
 sum | array_agg 
-----+-----------
   1 | {1}
   2 | {1,1}
   4 | {1,1,2}
   8 | {1,2,5}
  12 | {2,5,5}
  17 | {5,5,7}
  21 | {5,7,9}
(7 rows)

explain (costs off, verbose on) select sum(val) over w, array_agg(val) over w from xc_sort1_hash window w as (order by val, val2 rows 2 preceding) order by 1; 
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Output: (sum(val) OVER (?)), (array_agg(val) OVER (?)), val, val2
   Sort Key: (sum(xc_sort1_hash.val) OVER (?))
   ->  WindowAgg
         Output: sum(val) OVER (?), array_agg(val) OVER (?), val, val2
         ->  Streaming (type: GATHER)
               Output: val, val2
               ->  Sort
                     Output: val, val2
                     Sort Key: xc_sort1_hash.val, xc_sort1_hash.val2
                     ->  Seq Scan on public.xc_sort1_hash
                           Output: val, val2
(12 rows)

-- non-pushable JOINs
select * from xc_sort1_hash join xc_sort2_hash using (val2) order by xc_sort1_hash.val, xc_sort2_hash.val, xc_sort2_hash.val2; 
 val2 | val | val 
------+-----+-----
    2 |   1 |   1
    3 |   1 |   1
    3 |   1 |   5
    2 |   1 |   9
    4 |   2 |   2
    3 |   5 |   1
    3 |   5 |   5
   10 |   5 |   5
    8 |   7 |   7
    2 |   9 |   1
    2 |   9 |   9
(11 rows)

explain (costs off, verbose on) select * from xc_sort1_hash join xc_sort2_hash using (val2) order by xc_sort1_hash.val, xc_sort2_hash.val, xc_sort2_hash.val2; 
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: xc_sort1_hash.val2, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort2_hash.val2
   ->  Sort
         Output: xc_sort1_hash.val2, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort2_hash.val2
         Sort Key: xc_sort1_hash.val, xc_sort2_hash.val, xc_sort1_hash.val2
         ->  Hash Join
               Output: xc_sort1_hash.val2, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort1_hash.val, xc_sort2_hash.val, xc_sort2_hash.val2
               Hash Cond: (xc_sort1_hash.val2 = xc_sort2_hash.val2)
               ->  Streaming(type: REDISTRIBUTE)
                     Output: xc_sort1_hash.val2, xc_sort1_hash.val
                     Distribute Key: xc_sort1_hash.val2
                     ->  Seq Scan on public.xc_sort1_hash
                           Output: xc_sort1_hash.val2, xc_sort1_hash.val
               ->  Hash
                     Output: xc_sort2_hash.val, xc_sort2_hash.val2
                     ->  Streaming(type: REDISTRIBUTE)
                           Output: xc_sort2_hash.val, xc_sort2_hash.val2
                           Distribute Key: xc_sort2_hash.val2
                           ->  Seq Scan on public.xc_sort2_hash
                                 Output: xc_sort2_hash.val, xc_sort2_hash.val2
(20 rows)

-- Test 2 replicated tables (We shouldn't need covering Sort except when the
-- underlying plan is not shippable)
-- simple test
select * from xc_sort1_rep order by val, val2;
 val | val2 
-----+------
   1 |    2
   1 |    3
   2 |    4
   5 |    3
   5 |   10
   7 |    8
   9 |    2
(7 rows)

explain (costs off, verbose on) select * from xc_sort1_rep order by val, val2;
                      QUERY PLAN                       
-------------------------------------------------------
 Streaming (type: GATHER)
   Output: val, val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_sort1_rep.val, xc_sort1_rep.val2
         ->  Seq Scan on public.xc_sort1_rep
               Output: val, val2
(7 rows)

select val::char(3), val2 from xc_sort1_rep order by val, val2;
 val | val2 
-----+------
 1   |    2
 1   |    3
 2   |    4
 5   |    3
 5   |   10
 7   |    8
 9   |    2
(7 rows)

explain (costs off, verbose on) select val::char(3), val2 from xc_sort1_rep order by val, val2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: ((val)::character(3)), val2
   ->  Sort
         Output: ((val)::character(3)), val2
         Sort Key: ((xc_sort1_rep.val)::character(3)), xc_sort1_rep.val2
         ->  Seq Scan on public.xc_sort1_rep
               Output: (val)::character(3), val2
(7 rows)

select sum(val), val2 from xc_sort1_rep group by val2 order by sum(val);
 sum | val2 
-----+------
   2 |    4
   5 |   10
   6 |    3
   7 |    8
  10 |    2
(5 rows)

explain (costs off, verbose on) select sum(val), val2 from xc_sort1_rep group by val2 order by sum(val);
                    QUERY PLAN                     
---------------------------------------------------
 Streaming (type: GATHER)
   Output: (sum(val)), val2
   ->  Sort
         Output: (sum(val)), val2
         Sort Key: (sum(xc_sort1_rep.val))
         ->  HashAggregate
               Output: sum(val), val2
               Group By Key: xc_sort1_rep.val2
               ->  Seq Scan on public.xc_sort1_rep
                     Output: val2, val
(10 rows)

-- pushable JOINs
select * from xc_sort1_rep natural join xc_sort2_rep order by val, val2;
 val | val2 
-----+------
   1 |    2
   1 |    3
   2 |    4
   5 |    3
   5 |   10
   7 |    8
   9 |    2
(7 rows)

explain (costs off, verbose on) select * from xc_sort1_rep natural join xc_sort2_rep order by val, val2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: xc_sort1_rep.val, xc_sort1_rep.val2
   ->  Sort
         Output: xc_sort1_rep.val, xc_sort1_rep.val2
         Sort Key: xc_sort1_rep.val, xc_sort1_rep.val2
         ->  Hash Join
               Output: xc_sort1_rep.val, xc_sort1_rep.val2
               Hash Cond: ((xc_sort1_rep.val = xc_sort2_rep.val) AND (xc_sort1_rep.val2 = xc_sort2_rep.val2))
               ->  Seq Scan on public.xc_sort1_rep
                     Output: xc_sort1_rep.val, xc_sort1_rep.val2
               ->  Hash
                     Output: xc_sort2_rep.val, xc_sort2_rep.val2
                     ->  Seq Scan on public.xc_sort2_rep
                           Output: xc_sort2_rep.val, xc_sort2_rep.val2
(14 rows)

-- unshippable sort tests
select sum(val) over w, array_agg(val) over w from xc_sort1_rep window w as (order by val, val2 rows 2 preceding) order by 1; 
 sum | array_agg 
-----+-----------
   1 | {1}
   2 | {1,1}
   4 | {1,1,2}
   8 | {1,2,5}
  12 | {2,5,5}
  17 | {5,5,7}
  21 | {5,7,9}
(7 rows)

explain (costs off, verbose on) select sum(val) over w, array_agg(val) over w from xc_sort1_rep window w as (order by val, val2 rows 2 preceding) order by 1; 
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: (sum(val) OVER (?)), (array_agg(val) OVER (?)), val, val2
   ->  Sort
         Output: (sum(val) OVER (?)), (array_agg(val) OVER (?)), val, val2
         Sort Key: (sum(xc_sort1_rep.val) OVER (?))
         ->  WindowAgg
               Output: sum(val) OVER (?), array_agg(val) OVER (?), val, val2
               ->  Sort
                     Output: val, val2
                     Sort Key: xc_sort1_rep.val, xc_sort1_rep.val2
                     ->  Seq Scan on public.xc_sort1_rep
                           Output: val, val2
(12 rows)

-- non-pushable JOINs
select * from xc_sort1_rep join xc_sort2_hash using (val2) order by xc_sort1_rep.val, xc_sort2_hash.val, xc_sort2_hash.val2; 
 val2 | val | val 
------+-----+-----
    2 |   1 |   1
    3 |   1 |   1
    3 |   1 |   5
    2 |   1 |   9
    4 |   2 |   2
    3 |   5 |   1
    3 |   5 |   5
   10 |   5 |   5
    8 |   7 |   7
    2 |   9 |   1
    2 |   9 |   9
(11 rows)

explain (costs off, verbose on) select * from xc_sort1_rep join xc_sort2_hash using (val2) order by xc_sort1_rep.val, xc_sort2_hash.val, xc_sort2_hash.val2; 
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: xc_sort1_rep.val2, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort2_hash.val2
   ->  Sort
         Output: xc_sort1_rep.val2, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort2_hash.val2
         Sort Key: xc_sort1_rep.val, xc_sort2_hash.val, xc_sort1_rep.val2
         ->  Hash Join
               Output: xc_sort1_rep.val2, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort1_rep.val, xc_sort2_hash.val, xc_sort2_hash.val2
               Hash Cond: (xc_sort1_rep.val2 = xc_sort2_hash.val2)
               ->  Seq Scan on public.xc_sort1_rep
                     Output: xc_sort1_rep.val, xc_sort1_rep.val2
               ->  Hash
                     Output: xc_sort2_hash.val, xc_sort2_hash.val2
                     ->  Seq Scan on public.xc_sort2_hash
                           Output: xc_sort2_hash.val, xc_sort2_hash.val2
(14 rows)

-- Test 3 the GUC
select * from xc_sort1_hash order by val, val2; 
 val | val2 
-----+------
   1 |    2
   1 |    3
   2 |    4
   5 |    3
   5 |   10
   7 |    8
   9 |    2
(7 rows)

explain (costs off, verbose on) select * from xc_sort1_hash order by val, val2;  
                       QUERY PLAN                        
---------------------------------------------------------
 Streaming (type: GATHER)
   Output: val, val2
   ->  Sort
         Output: val, val2
         Sort Key: xc_sort1_hash.val, xc_sort1_hash.val2
         ->  Seq Scan on public.xc_sort1_hash
               Output: val, val2
(7 rows)

drop table xc_sort1_hash;
drop table xc_sort2_hash;
drop table xc_sort1_rep;
drop table xc_sort2_rep;
