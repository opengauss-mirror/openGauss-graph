/* Test inheritance of structure (LIKE) */
CREATE TABLE inhx (xx text DEFAULT 'text');
/*
 * Test double inheritance
 *
 * Ensure that defaults are NOT included unless
 * INCLUDING DEFAULTS is specified
 */
CREATE TABLE ctla (aa TEXT);
CREATE TABLE ctlb (bb TEXT) INHERITS (ctla);
CREATE TABLE foo (LIKE nonexistent);
ERROR:  relation "nonexistent" does not exist
LINE 1: CREATE TABLE foo (LIKE nonexistent);
                               ^
CREATE TABLE inhe (ee text, LIKE inhx) inherits (ctlb);
INSERT INTO inhe VALUES ('ee-col1', 'ee-col2', DEFAULT, 'ee-col4');
SELECT * FROM inhe; /* Columns aa, bb, xx value NULL, ee */
   aa    |   bb    | ee |   xx    
---------+---------+----+---------
 ee-col1 | ee-col2 |    | ee-col4
(1 row)

SELECT * FROM inhx; /* Empty set since LIKE inherits structure only */
 xx 
----
(0 rows)

SELECT * FROM ctlb; /* Has ee entry */
   aa    |   bb    
---------+---------
 ee-col1 | ee-col2
(1 row)

SELECT * FROM ctla; /* Has ee entry */
   aa    
---------
 ee-col1
(1 row)

CREATE TABLE inhf (LIKE inhx, LIKE inhx); /* Throw error */
ERROR:  column "xx" specified more than once
CREATE TABLE inhf (LIKE inhx INCLUDING DEFAULTS INCLUDING CONSTRAINTS);
INSERT INTO inhf DEFAULT VALUES;
SELECT * FROM inhf; /* Single entry with value 'text' */
  xx  
------
 text
(1 row)

ALTER TABLE inhx add constraint foo CHECK (xx = 'text');
ALTER TABLE inhx ADD PRIMARY KEY (xx);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "inhx_pkey" for table "inhx"
CREATE TABLE inhg (LIKE inhx); /* Doesn't copy constraint */
INSERT INTO inhg VALUES ('foo');
DROP TABLE inhg;
CREATE TABLE inhg (x text, LIKE inhx INCLUDING CONSTRAINTS, y text); /* Copies constraints */
INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds */
INSERT INTO inhg VALUES ('x', 'text', 'y'); /* Succeeds -- Unique constraints not copied */
INSERT INTO inhg VALUES ('x', 'foo',  'y');  /* fails due to constraint */
ERROR:  new row for relation "inhg" violates check constraint "foo"
DETAIL:  Failing row contains (x, foo, y).
SELECT * FROM inhg; /* Two records with three columns in order x=x, xx=text, y=y */
 x |  xx  | y 
---+------+---
 x | text | y
 x | text | y
(2 rows)

DROP TABLE inhg;
CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, y text) DISTRIBUTE BY REPLICATION; /* copies indexes */
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "inhg_pkey" for table "inhg"
INSERT INTO inhg VALUES (5, 10);
INSERT INTO inhg VALUES (20, 10); -- should fail
ERROR:  duplicate key value violates unique constraint "inhg_pkey"
DETAIL:  Key (xx)=(10) already exists.
DROP TABLE inhg;
/* Multiple primary keys creation should fail */
CREATE TABLE inhg (x text, LIKE inhx INCLUDING INDEXES, PRIMARY KEY(x)); /* fails */
ERROR:  multiple primary keys for table "inhg" are not allowed
CREATE TABLE inhz (xx text DEFAULT 'text', yy int UNIQUE) DISTRIBUTE BY REPLICATION;
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "inhz_yy_key" for table "inhz"
CREATE UNIQUE INDEX inhz_xx_idx on inhz (xx) WHERE xx <> 'test';
/* Ok to create multiple unique indexes */
CREATE TABLE inhg (x text UNIQUE, LIKE inhz INCLUDING INDEXES) DISTRIBUTE BY REPLICATION;
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "inhg_x_key" for table "inhg"
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "inhg_yy_key" for table "inhg"
INSERT INTO inhg (xx, yy, x) VALUES ('test', 5, 10);
INSERT INTO inhg (xx, yy, x) VALUES ('test', 10, 15);
INSERT INTO inhg (xx, yy, x) VALUES ('foo', 10, 15); -- should fail
ERROR:  duplicate key value violates unique constraint "inhg_x_key"
DETAIL:  Key (x)=(15) already exists.
DROP TABLE inhg;
DROP TABLE inhz;
-- including storage and comments
CREATE TABLE ctlt1 (a text CHECK (length(a) > 2) PRIMARY KEY, b text);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ctlt1_pkey" for table "ctlt1"
CREATE INDEX ctlt1_b_key ON ctlt1 (b);
CREATE INDEX ctlt1_fnidx ON ctlt1 ((a || b));
COMMENT ON COLUMN ctlt1.a IS 'A';
COMMENT ON COLUMN ctlt1.b IS 'B';
COMMENT ON CONSTRAINT ctlt1_a_check ON ctlt1 IS 't1_a_check';
COMMENT ON INDEX ctlt1_pkey IS 'index pkey';
COMMENT ON INDEX ctlt1_b_key IS 'index b_key';
ALTER TABLE ctlt1 ALTER COLUMN a SET STORAGE MAIN;
CREATE TABLE ctlt2 (c text);
ALTER TABLE ctlt2 ALTER COLUMN c SET STORAGE EXTERNAL;
COMMENT ON COLUMN ctlt2.c IS 'C';
CREATE TABLE ctlt3 (a text CHECK (length(a) < 5), c text);
ALTER TABLE ctlt3 ALTER COLUMN c SET STORAGE EXTERNAL;
ALTER TABLE ctlt3 ALTER COLUMN a SET STORAGE MAIN;
COMMENT ON COLUMN ctlt3.a IS 'A3';
COMMENT ON COLUMN ctlt3.c IS 'C';
COMMENT ON CONSTRAINT ctlt3_a_check ON ctlt3 IS 't3_a_check';
CREATE TABLE ctlt4 (a text, c text);
ALTER TABLE ctlt4 ALTER COLUMN c SET STORAGE EXTERNAL;
CREATE TABLE ctlt12_storage (LIKE ctlt1 INCLUDING STORAGE, LIKE ctlt2 INCLUDING STORAGE);
\d+ ctlt12_storage
                   Table "public.ctlt12_storage"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | main     |              | 
 b      | text |           | extended |              | 
 c      | text |           | external |              | 
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

CREATE TABLE ctlt12_comments (LIKE ctlt1 INCLUDING COMMENTS, LIKE ctlt2 INCLUDING COMMENTS);
\d+ ctlt12_comments
                  Table "public.ctlt12_comments"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | extended |              | A
 b      | text |           | extended |              | B
 c      | text |           | extended |              | C
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

CREATE TABLE ctlt1_inh (LIKE ctlt1 INCLUDING CONSTRAINTS INCLUDING COMMENTS) INHERITS (ctlt1);
NOTICE:  merging column "a" with inherited definition
NOTICE:  merging column "b" with inherited definition
NOTICE:  merging constraint "ctlt1_a_check" with inherited definition
\d+ ctlt1_inh
                     Table "public.ctlt1_inh"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | main     |              | A
 b      | text |           | extended |              | B
Check constraints:
    "ctlt1_a_check" CHECK (length(a) > 2)
Inherits: ctlt1
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

SELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt1_inh'::regclass;
 description 
-------------
 t1_a_check
(1 row)

CREATE TABLE ctlt13_inh () INHERITS (ctlt1, ctlt3);
NOTICE:  merging multiple inherited definitions of column "a"
\d+ ctlt13_inh
                     Table "public.ctlt13_inh"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | main     |              | 
 b      | text |           | extended |              | 
 c      | text |           | external |              | 
Check constraints:
    "ctlt1_a_check" CHECK (length(a) > 2)
    "ctlt3_a_check" CHECK (length(a) < 5)
Inherits: ctlt1,
          ctlt3
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

CREATE TABLE ctlt13_like (LIKE ctlt3 INCLUDING CONSTRAINTS INCLUDING COMMENTS INCLUDING STORAGE) INHERITS (ctlt1);
NOTICE:  merging column "a" with inherited definition
\d+ ctlt13_like
                    Table "public.ctlt13_like"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | main     |              | A3
 b      | text |           | extended |              | 
 c      | text |           | external |              | C
Check constraints:
    "ctlt1_a_check" CHECK (length(a) > 2)
    "ctlt3_a_check" CHECK (length(a) < 5)
Inherits: ctlt1
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

SELECT description FROM pg_description, pg_constraint c WHERE classoid = 'pg_constraint'::regclass AND objoid = c.oid AND c.conrelid = 'ctlt13_like'::regclass;
 description 
-------------
 t3_a_check
(1 row)

CREATE TABLE ctlt_all (LIKE ctlt1 INCLUDING DEFAULTS  INCLUDING CONSTRAINTS  INCLUDING INDEXES  INCLUDING STORAGE  INCLUDING COMMENTS);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ctlt_all_pkey" for table "ctlt_all"
\d+ ctlt_all
                      Table "public.ctlt_all"
 Column | Type | Modifiers | Storage  | Stats target | Description 
--------+------+-----------+----------+--------------+-------------
 a      | text | not null  | main     |              | A
 b      | text |           | extended |              | B
Indexes:
    "ctlt_all_pkey" PRIMARY KEY, btree (a)
    "ctlt_all_b_idx" btree (b)
    "ctlt_all_expr_idx" btree ((a || b))
Check constraints:
    "ctlt1_a_check" CHECK (length(a) > 2)
Has OIDs: no
Distribute By: HASH(a)
Location Nodes: ALL DATANODES

SELECT c.relname, objsubid, description FROM pg_description, pg_index i, pg_class c WHERE classoid = 'pg_class'::regclass AND objoid = i.indexrelid AND c.oid = i.indexrelid AND i.indrelid = 'ctlt_all'::regclass ORDER BY c.relname, objsubid;
    relname     | objsubid | description 
----------------+----------+-------------
 ctlt_all_b_idx |        0 | index b_key
 ctlt_all_pkey  |        0 | index pkey
(2 rows)

CREATE TABLE inh_error1 () INHERITS (ctlt1, ctlt4);
NOTICE:  merging multiple inherited definitions of column "a"
ERROR:  inherited column "a" has a storage parameter conflict
DETAIL:  MAIN versus EXTENDED
CREATE TABLE inh_error2 (LIKE ctlt4 INCLUDING STORAGE) INHERITS (ctlt1);
NOTICE:  merging column "a" with inherited definition
ERROR:  column "a" has a storage parameter conflict
DETAIL:  MAIN versus EXTENDED
DROP TABLE ctlt1, ctlt2, ctlt3, ctlt4, ctlt12_storage, ctlt12_comments, ctlt1_inh, ctlt13_inh, ctlt13_like, ctlt_all, ctla, ctlb CASCADE;
NOTICE:  drop cascades to table inhe
/* LIKE with other relation kinds */
CREATE TABLE ctlt4 (a int, b text);
CREATE SEQUENCE ctlseq1;
CREATE TABLE ctlt10 (LIKE ctlseq1);  -- fail
ERROR:  "ctlseq1" is not a table, view, composite type, or foreign table
LINE 1: CREATE TABLE ctlt10 (LIKE ctlseq1);
                                  ^
CREATE VIEW ctlv1 AS SELECT * FROM ctlt4;
CREATE TABLE ctlt11 (LIKE ctlv1);
ERROR:  openGauss does not support VIEW in LIKE clauses
DETAIL:  The feature is not currently supported
CREATE TABLE ctlt11a (LIKE ctlv1 INCLUDING DEFAULTS  INCLUDING CONSTRAINTS  INCLUDING INDEXES  INCLUDING STORAGE  INCLUDING COMMENTS);
ERROR:  openGauss does not support VIEW in LIKE clauses
DETAIL:  The feature is not currently supported
CREATE TYPE ctlty1 AS (a int, b text);
CREATE TABLE ctlt12 (LIKE ctlty1);
-- including all, including all excluding some option(s)
CREATE TABLE ctlt13 (LIKE ctlt4 INCLUDING ALL);
CREATE TABLE ctlt14 (LIKE ctlt4 INCLUDING ALL EXCLUDING RELOPTIONS) WITH (ORIENTATION = COLUMN);
-- should fail, syntax error
CREATE TABLE ctlt15 (LIKE ctlt4 INCLUDING ALL INCLUDING RELOPTIONS);
ERROR:  syntax error at or near "INCLUDING RELOPTIONS"
LINE 1: CREATE TABLE ctlt15 (LIKE ctlt4 INCLUDING ALL INCLUDING RELO...
                                                      ^
CREATE TABLE ctlt16 (LIKE ctlt4 INCLUDING ALL EXCLUDING ALL);
CREATE TABLE ctlt17 (LIKE ctlt4 INCLUDING DEFAULTS INCLUDING CONSTRAINTS EXCLUDING ALL);
CREATE TABLE ctlt18 (LIKE ctlt4 EXCLUDING ALL);
DROP SEQUENCE ctlseq1;
DROP TYPE ctlty1;
DROP VIEW ctlv1;
DROP TABLE IF EXISTS ctlt4, ctlt10, ctlt11, ctlt11a, ctlt12, ctlt13, ctlt14, ctlt16, ctlt17, ctlt18;
NOTICE:  table "ctlt10" does not exist, skipping
NOTICE:  table "ctlt11" does not exist, skipping
NOTICE:  table "ctlt11a" does not exist, skipping
create table ctltcol(id1 integer, id2 integer, id3 integer, partial cluster key(id1,id2))with(orientation = column);
create table ctltcollike(like ctltcol including all);
\d+ ctltcollike
                     Table "public.ctltcollike"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 id1    | integer |           | plain   |              | 
 id2    | integer |           | plain   |              | 
 id3    | integer |           | plain   |              | 
Partial Cluster :
    "ctltcollike_cluster" PARTIAL CLUSTER KEY (id1, id2)
Has OIDs: no
Distribute By: HASH(id1)
Location Nodes: ALL DATANODES
Options: orientation=column, compression=low

drop table ctltcol;
drop table ctltcollike;
create table test1(a int, b int, c int)distribute by hash(a, b);
create table test (like test1 including distribution);
\d+ test
                         Table "public.test"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a      | integer |           | plain   |              | 
 b      | integer |           | plain   |              | 
 c      | integer |           | plain   |              | 
Has OIDs: no
Distribute By: HASH(a, b)
Location Nodes: ALL DATANODES

drop table test;
drop table test1;
-- including all, with oids /without oids
create table ctltesta(a1 int, a2 int) with oids;
\d+ ctltesta
                       Table "public.ctltesta"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer |           | plain   |              | 
 a2     | integer |           | plain   |              | 
Has OIDs: yes
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

create table ctltestb(like ctltesta including all);
\d+ ctltestb
                       Table "public.ctltestb"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer |           | plain   |              | 
 a2     | integer |           | plain   |              | 
Has OIDs: yes
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

create table ctltestc(like ctltesta including all excluding oids);
\d+ ctltestc
                       Table "public.ctltestc"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer |           | plain   |              | 
 a2     | integer |           | plain   |              | 
Has OIDs: no
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

create table ctltestd(a1 int, a2 int, constraint firstkey primary key(a1))with oids distribute by hash(a1);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "firstkey" for table "ctltestd"
\d+ ctltestd
                       Table "public.ctltestd"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer | not null  | plain   |              | 
 a2     | integer |           | plain   |              | 
Indexes:
    "firstkey" PRIMARY KEY, btree (a1)
Has OIDs: yes
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

create table ctlteste(like ctltestd including all);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "ctlteste_pkey" for table "ctlteste"
\d+ ctlteste
                       Table "public.ctlteste"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer | not null  | plain   |              | 
 a2     | integer |           | plain   |              | 
Indexes:
    "ctlteste_pkey" PRIMARY KEY, btree (a1)
Has OIDs: yes
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

drop table if exists ctltesta, ctltestb, ctltestc,ctltestd, ctlteste;
create table ctltestf(a1 int, a2 int, constraint firstkey primary key(oid)) distribute by hash(a1);
ERROR:  column "oid" named in key does not exist
LINE 1: create table ctltestf(a1 int, a2 int, constraint firstkey pr...
                                              ^
\d+ ctltestf
create table ctltestg(a1 int, a2 int, constraint firstkey primary key(oid))with oids distribute by hash(a1);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "firstkey" for table "ctltestg"
\d+ ctltestg
                       Table "public.ctltestg"
 Column |  Type   | Modifiers | Storage | Stats target | Description 
--------+---------+-----------+---------+--------------+-------------
 a1     | integer |           | plain   |              | 
 a2     | integer |           | plain   |              | 
Indexes:
    "firstkey" PRIMARY KEY, btree (oid)
Has OIDs: yes
Distribute By: HASH(a1)
Location Nodes: ALL DATANODES

drop table if exists ctltestf, ctltestg;
NOTICE:  table "ctltestf" does not exist, skipping
