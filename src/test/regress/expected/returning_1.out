--
-- Test INSERT/UPDATE/DELETE RETURNING
--
-- Simple cases
-- Enforce use of COMMIT instead of 2PC for temporary objects
CREATE TEMP TABLE foo (f1 int, f2 text, f3 int default 42);
INSERT INTO foo (f1,f2,f3)
  VALUES (1, 'test', DEFAULT), (2, 'More', 11), (3, upper('more'), 7+9)
  RETURNING *, f1+f3 AS sum;
 f1 |  f2  | f3 | sum 
----+------+----+-----
  1 | test | 42 |  43
  2 | More | 11 |  13
  3 | MORE | 16 |  19
(3 rows)

SELECT * FROM foo ORDER BY f1;
 f1 |  f2  | f3 
----+------+----
  1 | test | 42
  2 | More | 11
  3 | MORE | 16
(3 rows)

with t as
(
UPDATE foo SET f2 = lower(f2), f3 = DEFAULT RETURNING foo.*, f1+f3 AS sum13
)
select * from t order by 1,2,3;
 f1 |  f2  | f3 | sum13 
----+------+----+-------
  1 | test | 42 |    43
  2 | more | 42 |    44
  3 | more | 42 |    45
(3 rows)

SELECT * FROM foo ORDER BY f1;
 f1 |  f2  | f3 
----+------+----
  1 | test | 42
  2 | more | 42
  3 | more | 42
(3 rows)

DELETE FROM foo WHERE f1 > 2 RETURNING f3, f2, f1, least(f1,f3);
 f3 |  f2  | f1 | least 
----+------+----+-------
 42 | more |  3 |     3
(1 row)

SELECT * FROM foo ORDER BY f1;
 f1 |  f2  | f3 
----+------+----
  1 | test | 42
  2 | more | 42
(2 rows)

-- Subplans and initplans in the RETURNING list
INSERT INTO foo SELECT f1+10, f2, f3+99 FROM foo order by 1, 2, 3
  RETURNING *, f1+112 IN (SELECT q1 FROM int8_tbl) AS subplan,
    EXISTS(SELECT * FROM int4_tbl) AS initplan;
 f1 |  f2  | f3  | subplan | initplan 
----+------+-----+---------+----------
 11 | test | 141 | t       | t
 12 | more | 141 |         | t
(2 rows)

with t as
(
UPDATE foo SET f3 = f3 * 2
  WHERE f1 > 10
  RETURNING *, f1+112 IN (SELECT q1 FROM int8_tbl) AS subplan,
    EXISTS(SELECT * FROM int4_tbl) AS initplan
)
select * from t order by 1,2,3,4;
 f1 |  f2  | f3  | subplan | initplan 
----+------+-----+---------+----------
 11 | test | 282 | t       | t
 12 | more | 282 |         | t
(2 rows)

with t as
(
DELETE FROM foo
  WHERE f1 > 10
  RETURNING *, f1+112 IN (SELECT q1 FROM int8_tbl) AS subplan,
    EXISTS(SELECT * FROM int4_tbl) AS initplan
)
select * from t order by 1,2,3,4;
 f1 |  f2  | f3  | subplan | initplan 
----+------+-----+---------+----------
 11 | test | 282 | t       | t
 12 | more | 282 |         | t
(2 rows)

-- Joins
UPDATE foo SET f3 = f3*2
  FROM int4_tbl i
  WHERE foo.f1 + 123455 = i.f1
  RETURNING foo.*, i.f1 as "i.f1";
 f1 |  f2  | f3 |  i.f1  
----+------+----+--------
  1 | test | 84 | 123456
(1 row)

SELECT * FROM foo ORDER BY f1;
 f1 |  f2  | f3 
----+------+----
  1 | test | 84
  2 | more | 42
(2 rows)

DELETE FROM foo
  USING int4_tbl i
  WHERE foo.f1 + 123455 = i.f1
  RETURNING foo.*, i.f1 as "i.f1";
 f1 |  f2  | f3 |  i.f1  
----+------+----+--------
  1 | test | 84 | 123456
(1 row)

SELECT * FROM foo ORDER BY f1;
 f1 |  f2  | f3 
----+------+----
  2 | more | 42
(1 row)

----
----
create table tbl_return(t1 int, t2 int);
insert into tbl_return select generate_series(1, 10);
analyze tbl_return;
explain (verbose on, costs off)
insert into tbl_return select * from tbl_return returning '1';
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Insert on public.tbl_return
   Output: '1'::text
   Node/s: All datanodes
   Node expr: public.tbl_return.t1
   Remote query: INSERT INTO public.tbl_return (t1, t2) VALUES ($1, $2) RETURNING 'Dummy'
   ->  Data Node Scan on tbl_return "_REMOTE_TABLE_QUERY_"
         Output: public.tbl_return.t1, public.tbl_return.t2
         Node/s: All datanodes
         Remote query: SELECT t1, t2 FROM ONLY public.tbl_return WHERE true
(9 rows)

insert into tbl_return select * from tbl_return returning '1';
 ?column? 
----------
 1
 1
 1
 1
 1
 1
 1
 1
 1
 1
(10 rows)

insert into tbl_return select * from tbl_return order by 1, 2 returning *,'1';
 t1 | t2 | ?column? 
----+----+----------
  1 |    | 1
  1 |    | 1
  2 |    | 1
  2 |    | 1
  3 |    | 1
  3 |    | 1
  4 |    | 1
  4 |    | 1
  5 |    | 1
  5 |    | 1
  6 |    | 1
  6 |    | 1
  7 |    | 1
  7 |    | 1
  8 |    | 1
  8 |    | 1
  9 |    | 1
  9 |    | 1
 10 |    | 1
 10 |    | 1
(20 rows)

explain (verbose on, costs off)
UPDATE tbl_return SET t2 = 2 WHERE t1 = 5 RETURNING '1', '2';
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Data Node Scan
   Output: ('1'::text), ('2'::text)
   Node/s: datanode2
   Remote query: UPDATE public.tbl_return SET t2 = 2 WHERE t1 = 5 RETURNING '1'::text AS "?column?", '2'::text AS "?column?"
(4 rows)

UPDATE tbl_return SET t2 = 2 WHERE t1 = 5 RETURNING '1', '2';
 ?column? | ?column? 
----------+----------
 1        | 2
 1        | 2
 1        | 2
 1        | 2
(4 rows)

explain (verbose on, costs off)
delete from tbl_return WHERE t1 = 3 RETURNING '1', '2';
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Data Node Scan
   Output: ('1'::text), ('2'::text)
   Node/s: datanode7
   Remote query: DELETE FROM public.tbl_return WHERE t1 = 3 RETURNING '1'::text AS "?column?", '2'::text AS "?column?"
(4 rows)

delete from tbl_return WHERE t1 = 3 RETURNING '1', '2';
 ?column? | ?column? 
----------+----------
 1        | 2
 1        | 2
 1        | 2
 1        | 2
(4 rows)

drop table tbl_return;
---- Check inheritance cases
--
--CREATE TEMP TABLE foochild (fc int) INHERITS (foo);
--
--INSERT INTO foochild VALUES(123,'child',999,-123);
--
--ALTER TABLE foo ADD COLUMN f4 int8 DEFAULT 99;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM foochild ORDER BY f1;
--
--UPDATE foo SET f4 = f4 + f3 WHERE f4 = 99 RETURNING *;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM foochild ORDER BY f1;
--
--UPDATE foo SET f3 = f3*2
--  FROM int8_tbl i
--  WHERE foo.f1 = i.q2
--  RETURNING *;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM foochild ORDER BY f1;
--
--DELETE FROM foo
--  USING int8_tbl i
--  WHERE foo.f1 = i.q2
--  RETURNING *;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM foochild ORDER BY f1;
--
--DROP TABLE foochild;
--
---- Rules and views
--
--CREATE TEMP VIEW voo AS SELECT f1, f2 FROM foo;
--
--CREATE RULE voo_i AS ON INSERT TO voo DO INSTEAD
--  INSERT INTO foo VALUES(new.*, 57);
--
--INSERT INTO voo VALUES(11,'zit');
---- fails:
--INSERT INTO voo VALUES(12,'zoo') RETURNING *, f1*2;
--
---- fails, incompatible list:
--CREATE OR REPLACE RULE voo_i AS ON INSERT TO voo DO INSTEAD
--  INSERT INTO foo VALUES(new.*, 57) RETURNING *;
--
--CREATE OR REPLACE RULE voo_i AS ON INSERT TO voo DO INSTEAD
--  INSERT INTO foo VALUES(new.*, 57) RETURNING f1, f2;
--
---- should still work
--INSERT INTO voo VALUES(13,'zit2');
---- works now
--INSERT INTO voo VALUES(14,'zoo2') RETURNING *;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM voo ORDER BY f1;
--
--CREATE OR REPLACE RULE voo_u AS ON UPDATE TO voo DO INSTEAD
--  UPDATE foo SET f1 = new.f1, f2 = new.f2 WHERE f1 = old.f1
--  RETURNING f1, f2;
--
--update voo set f1 = f1 + 1 where f2 = 'zoo2';
--update voo set f1 = f1 + 1 where f2 = 'zoo2' RETURNING *, f1*2;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM voo ORDER BY f1;
--
--CREATE OR REPLACE RULE voo_d AS ON DELETE TO voo DO INSTEAD
--  DELETE FROM foo WHERE f1 = old.f1
--  RETURNING f1, f2;
--
--DELETE FROM foo WHERE f1 = 13;
--DELETE FROM foo WHERE f2 = 'zit' RETURNING *;
--
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM voo ORDER BY f1;
--
---- Try a join case
--
--CREATE TEMP TABLE joinme (f2j text, other int);
--INSERT INTO joinme VALUES('more', 12345);
--INSERT INTO joinme VALUES('zoo2', 54321);
--INSERT INTO joinme VALUES('other', 0);
--
--CREATE TEMP VIEW joinview AS
--  SELECT foo.*, other FROM foo JOIN joinme ON (f2 = f2j);
--
--SELECT * FROM joinview ORDER BY f1;
--
--CREATE RULE joinview_u AS ON UPDATE TO joinview DO INSTEAD
--  UPDATE foo SET f1 = new.f1, f3 = new.f3
--    FROM joinme WHERE f2 = f2j AND f2 = old.f2
--    RETURNING foo.*, other;
--
--UPDATE joinview SET f1 = f1 + 1 WHERE f3 = 57 RETURNING *, other + 1;
--
--SELECT * FROM joinview ORDER BY f1;
--SELECT * FROM foo ORDER BY f1;
--SELECT * FROM voo ORDER BY f1;
