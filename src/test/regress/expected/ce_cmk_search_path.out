\! gs_ktool -d all
DELETE ALL

\! gs_ktool -g
GENERATE
1
-- create another user
DROP ROLE IF EXISTS newuser;
NOTICE:  role "newuser" does not exist, skipping
CREATE USER newuser PASSWORD 'gauss@123';
-- create schema
DROP SCHEMA IF EXISTS testns CASCADE;
NOTICE:  schema "testns" does not exist, skipping
CREATE SCHEMA testns;
SET search_path to testns;
-- grant privileges on schema (ALL = USAGE, CREATE)
GRANT ALL ON SCHEMA testns TO newuser;
-- CREATE CMK
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
show search_path;
 search_path 
-------------
 testns
(1 row)

CREATE SCHEMA testsp;
SET search_path to testsp;
show search_path;
 search_path 
-------------
 testsp
(1 row)

-- CREATE CEK
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = public.MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
ERROR(CLIENT): failed to get client master key public.mycmk1 from cache
select count(*), 'count' from gs_client_global_keys;
 count | ?column? 
-------+----------
     1 | count
(1 row)

select count(*), 'count' from gs_column_keys;
 count | ?column? 
-------+----------
     0 | count
(1 row)

-- change search path to testns and create a table
SET search_path to testns;
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
-- create TABLE 
CREATE TABLE acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC));
SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'USAGE');
 has_cmk_privilege 
-------------------
 f
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'USAGE');
 has_cek_privilege 
-------------------
 f
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'USAGE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'CREATE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_table_privilege('newuser', 'acltest1', 'INSERT, SELECT, UPDATE, DELETE, TRUNCATE, TRIGGER');
 has_table_privilege 
---------------------
 f
(1 row)

RESET SESSION AUTHORIZATION;
DROP TABLE acltest1;
REVOKE USAGE ON COLUMN_ENCRYPTION_KEY MyCEK1 FROM newuser;
REVOKE USAGE ON CLIENT_MASTER_KEY MyCMK1 FROM newuser;
DROP COLUMN ENCRYPTION KEY MyCEK1;
DROP CLIENT MASTER KEY MyCMK1;
DROP SCHEMA IF EXISTS testns CASCADE;
DROP SCHEMA IF EXISTS testsp CASCADE;
DROP SCHEMA IF EXISTS newuser CASCADE;
DROP ROLE IF EXISTS newuser;
\! gs_ktool -d all
DELETE ALL
 1
