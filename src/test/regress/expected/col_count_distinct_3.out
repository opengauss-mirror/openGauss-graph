/*
 * This file is used to test pull down of count(distinct) expression
 */
create schema col_distribute_count_distinct_3;
set current_schema = col_distribute_count_distinct_3;
-- Create Table and Insert Data
create table src(c1 int);
insert into src values(0);
create table t_distinct(a int, b int, c int, d int) with (orientation=column);
INSERT INTO t_distinct select generate_series(1, 1000)%501, generate_series(1, 1000)%75, generate_series(1, 1000)%25, generate_series(1, 1000)%7 from src;
analyze t_distinct;
-- Case 3 groupagg optimization
set enable_hashagg=off;
explain (costs off) select avg(distinct(a)) from t_distinct;
              QUERY PLAN               
---------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on t_distinct
(3 rows)

select avg(distinct(a)) from t_distinct;
         avg          
----------------------
 250.0000000000000000
(1 row)

explain (costs off) select avg(distinct(b::numeric(5,1)))+5, d from t_distinct group by d order by 2;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(6 rows)

select avg(distinct(b::numeric(5,1)))+5, d from t_distinct group by d order by 2;
      ?column?       | d 
---------------------+---
 42.0000000000000000 | 0
 42.0000000000000000 | 1
 42.0000000000000000 | 2
 42.0000000000000000 | 3
 42.0000000000000000 | 4
 42.0000000000000000 | 5
 42.0000000000000000 | 6
(7 rows)

explain (costs off) select avg(distinct(c))+count(distinct(c)), b from t_distinct group by b order by 2;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: b
         ->  Vector Sort
               Sort Key: b
               ->  CStore Scan on t_distinct
(6 rows)

select avg(distinct(c))+count(distinct(c)), b from t_distinct group by b order by 2 limit 10;
        ?column?        | b 
------------------------+---
 1.00000000000000000000 | 0
 2.00000000000000000000 | 1
     3.0000000000000000 | 2
     4.0000000000000000 | 3
     5.0000000000000000 | 4
     6.0000000000000000 | 5
     7.0000000000000000 | 6
     8.0000000000000000 | 7
     9.0000000000000000 | 8
    10.0000000000000000 | 9
(10 rows)

explain (costs off) select c from t_distinct group by c having avg(distinct(c))>50 order by 1;
                   QUERY PLAN                    
-------------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: c
         Filter: (avg(DISTINCT c) > 50::numeric)
         ->  Vector Sort
               Sort Key: c
               ->  CStore Scan on t_distinct
(7 rows)

select c from t_distinct group by c having avg(distinct(c))>50 order by 1 limit 10;
 c 
---
(0 rows)

explain (costs off) select b, c from t_distinct group by b, c order by b, count(distinct(c))-c;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: b, ((count(DISTINCT c) - c))
         ->  Vector Sort Aggregate
               Group By Key: b, c
               ->  Vector Sort
                     Sort Key: b, c
                     ->  CStore Scan on t_distinct
(8 rows)

select b, c from t_distinct group by b, c order by b, count(distinct(c))-c limit 10;
 b | c 
---+---
 0 | 0
 1 | 1
 2 | 2
 3 | 3
 4 | 4
 5 | 5
 6 | 6
 7 | 7
 8 | 8
 9 | 9
(10 rows)

explain (costs off) select count(distinct(c)), d from t_distinct group by d having avg(distinct(c)) <> 0 order by 2;
                   QUERY PLAN                    
-------------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         Filter: (avg(DISTINCT c) <> 0::numeric)
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(c)), d from t_distinct group by d having avg(distinct(c)) <> 0 order by 2;
 count | d 
-------+---
    25 | 0
    25 | 1
    25 | 2
    25 | 3
    25 | 4
    25 | 5
    25 | 6
(7 rows)

reset enable_hashagg;
-- Case 4 two_level_hashagg
explain (costs off) select count(distinct(b)), count(c), d from t_distinct group by d order by d;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(6 rows)

select count(distinct(b)), count(c), d from t_distinct group by d order by d;
 count | count | d 
-------+-------+---
    75 |   142 | 0
    75 |   143 | 1
    75 |   143 | 2
    75 |   143 | 3
    75 |   143 | 4
    75 |   143 | 5
    75 |   143 | 6
(7 rows)

explain (costs off) select avg(distinct(b)), d, count(c) from t_distinct group by d order by d;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(6 rows)

select avg(distinct(b)), d, count(c) from t_distinct group by d order by d;
         avg         | d | count 
---------------------+---+-------
 37.0000000000000000 | 0 |   142
 37.0000000000000000 | 1 |   143
 37.0000000000000000 | 2 |   143
 37.0000000000000000 | 3 |   143
 37.0000000000000000 | 4 |   143
 37.0000000000000000 | 5 |   143
 37.0000000000000000 | 6 |   143
(7 rows)

explain (costs off) select count(c), count(distinct(a)), d from t_distinct group by d order by d;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(6 rows)

select count(c), count(distinct(a)), d from t_distinct group by d order by d;
 count | count | d 
-------+-------+---
   142 |   142 | 0
   143 |   143 | 1
   143 |   143 | 2
   143 |   143 | 3
   143 |   143 | 4
   143 |   143 | 5
   143 |   143 | 6
(7 rows)

explain (costs off) select count(c), d, count(distinct(d)) from t_distinct group by d order by 1;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: (count(c))
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(8 rows)

select count(c), d, count(distinct(d)) from t_distinct group by d order by 1, 2;
 count | d | count 
-------+---+-------
   142 | 0 |     1
   143 | 1 |     1
   143 | 2 |     1
   143 | 3 |     1
   143 | 4 |     1
   143 | 5 |     1
   143 | 6 |     1
(7 rows)

explain (costs off) select count(c), d, count(distinct(b)) from t_distinct group by d order by 3;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: (count(DISTINCT b))
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(8 rows)

select count(c), d, count(distinct(b)) from t_distinct group by d order by 3, 2;
 count | d | count 
-------+---+-------
   142 | 0 |    75
   143 | 1 |    75
   143 | 2 |    75
   143 | 3 |    75
   143 | 4 |    75
   143 | 5 |    75
   143 | 6 |    75
(7 rows)

explain (costs off) select count(d), count(distinct(d)), a%2, b%2, c%2 from t_distinct group by 3,4,5 order by 3,4,5;
                       QUERY PLAN                        
---------------------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: ((a % 2)), ((b % 2)), ((c % 2))
         ->  Vector Sort
               Sort Key: ((a % 2)), ((b % 2)), ((c % 2))
               ->  CStore Scan on t_distinct
(6 rows)

select count(d), count(distinct(d)), a%2, b%2, c%2 from t_distinct group by 3,4,5 order by 3,4,5;
 count | count | ?column? | ?column? | ?column? 
-------+-------+----------+----------+----------
   182 |     7 |        0 |        0 |        0
    84 |     7 |        0 |        0 |        1
    78 |     7 |        0 |        1 |        0
   156 |     7 |        0 |        1 |        1
   168 |     7 |        1 |        0 |        0
    72 |     7 |        1 |        0 |        1
    92 |     7 |        1 |        1 |        0
   168 |     7 |        1 |        1 |        1
(8 rows)

explain (costs off) select count(c), d from t_distinct group by d having count(distinct(d))=1 order by d;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         Filter: (count(DISTINCT d) = 1)
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(7 rows)

select count(c), d from t_distinct group by d having count(distinct(d))=1 order by d;
 count | d 
-------+---
   142 | 0
   143 | 1
   143 | 2
   143 | 3
   143 | 4
   143 | 5
   143 | 6
(7 rows)

explain (costs off) select count(c), count(distinct(b)) from t_distinct group by d having count(d)=1428 order by d;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         Filter: (count(d) = 1428)
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(7 rows)

select count(c), count(distinct(b)) from t_distinct group by d having count(d)=1428 order by d;
 count | count 
-------+-------
(0 rows)

explain (costs off) select count(distinct(c)), d from t_distinct group by d order by count(c), d;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: (count(c)), d
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(8 rows)

select count(distinct(c)), d from t_distinct group by d order by count(c), d;
 count | d 
-------+---
    25 | 0
    25 | 1
    25 | 2
    25 | 3
    25 | 4
    25 | 5
    25 | 6
(7 rows)

explain (costs off) select count(distinct(c)), d from t_distinct where c <= any (select count(distinct(b)) from t_distinct group by c limit 5) group by d order by d;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: col_distribute_count_distinct_3.t_distinct.d
         ->  Vector Sort
               Sort Key: col_distribute_count_distinct_3.t_distinct.d
               ->  Vector Nest Loop Semi Join
                     Join Filter: (col_distribute_count_distinct_3.t_distinct.c <= "ANY_subquery".count)
                     ->  CStore Scan on t_distinct
                     ->  Vector Materialize
                           ->  Vector Subquery Scan on "ANY_subquery"
                                 ->  Vector Limit
                                       ->  Vector Sort Aggregate
                                             Group By Key: col_distribute_count_distinct_3.t_distinct.c
                                             ->  Vector Sort
                                                   Sort Key: col_distribute_count_distinct_3.t_distinct.c
                                                   ->  CStore Scan on t_distinct
(16 rows)

select count(distinct(c)), d from t_distinct where c <= any (select count(distinct(b)) from t_distinct group by c limit 5) group by d order by d;
 count | d 
-------+---
     4 | 0
     4 | 1
     4 | 2
     4 | 3
     4 | 4
     4 | 5
     4 | 6
(7 rows)

-- Clean Table
drop table t_distinct;
reset current_schema;
drop schema col_distribute_count_distinct_3 cascade;
NOTICE:  drop cascades to table col_distribute_count_distinct_3.src
