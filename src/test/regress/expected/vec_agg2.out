/*
 * This file is used to test the function of ExecVecAggregation()---(2)
 */
----
--- Create Table and Insert Data
----
create schema vector_agg_engine_second;
set current_schema=vector_agg_engine_second;
set time zone prc;
set time zone prc;
set datestyle to iso;
create table vector_agg_engine_second.VECTOR_AGG_TABLE_04
(
   col_id	integer
  ,col_place	varchar
)with (orientation=column);
COPY VECTOR_AGG_TABLE_04(col_id, col_place) FROM stdin;
create table vector_agg_engine_second.VECTOR_AGG_TABLE_05
(
   col_id	integer
  ,col_place	varchar
)with (orientation=column);
COPY VECTOR_AGG_TABLE_05(col_id, col_place) FROM stdin;
create table vector_agg_engine_second.VECTOR_AGG_TABLE_06
(
   col_int int
  ,col_int2 int8
  ,col_char char(20)
  ,col_varchar varchar(30)
  ,col_date date
  ,col_num numeric(10,2)
  ,col_num2 numeric(10,4)
  ,col_float float4
  ,col_float2 float8
)WITH (orientation=column) distribute by hash (col_int);
analyze vector_agg_table_04;
analyze vector_agg_table_05;
analyze vector_agg_table_06;
----
--- cas4: Test Agg With NULL Table
----
select count(col_char),count(col_date),count(col_num2) from vector_agg_table_06;
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

select count(col_char),count(col_date),count(col_num2) from vector_agg_table_06 group by col_num;
 count | count | count 
-------+-------+-------
(0 rows)

select min(col_int),max(col_varchar),min(col_num2) from vector_agg_table_06;
 min | max | min 
-----+-----+-----
     |     |    
(1 row)

select min(col_int),max(col_varchar),min(col_num2) from vector_agg_table_06 group by col_date;
 min | max | min 
-----+-----+-----
(0 rows)

select sum(col_int2),sum(col_float),sum(col_num2) from vector_agg_table_06;
 sum | sum | sum 
-----+-----+-----
     |     |    
(1 row)

select sum(col_int2),sum(col_float),sum(col_num2) from vector_agg_table_06 group by col_int;
 sum | sum | sum 
-----+-----+-----
(0 rows)

select avg(col_int2),avg(col_num),avg(col_float) from vector_agg_table_06;
 avg | avg | avg 
-----+-----+-----
     |     |    
(1 row)

select avg(col_int2),avg(col_num),avg(col_float) from vector_agg_table_06 group by col_num2;
 avg | avg | avg 
-----+-----+-----
(0 rows)

select count(col_num2),min(col_char),max(col_varchar),sum(col_float),avg(col_num2) from vector_agg_table_06;
 count | min | max | sum | avg 
-------+-----+-----+-----+-----
     0 |     |     |     |    
(1 row)

select count(col_num2),min(col_char),max(col_varchar),sum(col_float),avg(col_num2) from vector_agg_table_06 group by col_num2;
 count | min | max | sum | avg 
-------+-----+-----+-----+-----
(0 rows)

select count(col_char),count(col_date),count(col_num2) from vector_agg_table_06;
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

select count(col_char),count(col_date),count(col_num2) from vector_agg_table_06 group by col_num;
 count | count | count 
-------+-------+-------
(0 rows)

select min(col_int),max(col_varchar),min(col_num2) from vector_agg_table_06;
 min | max | min 
-----+-----+-----
     |     |    
(1 row)

select min(col_int),max(col_varchar),min(col_num2) from vector_agg_table_06 group by col_date;
 min | max | min 
-----+-----+-----
(0 rows)

select sum(col_int2),sum(col_float),sum(col_num2) from vector_agg_table_06;
 sum | sum | sum 
-----+-----+-----
     |     |    
(1 row)

select sum(col_int2),sum(col_float),sum(col_num2) from vector_agg_table_06 group by col_int;
 sum | sum | sum 
-----+-----+-----
(0 rows)

select avg(col_int2),avg(col_num),avg(col_float) from vector_agg_table_06;
 avg | avg | avg 
-----+-----+-----
     |     |    
(1 row)

select avg(col_int2),avg(col_num),avg(col_float) from vector_agg_table_06 group by col_num2;
 avg | avg | avg 
-----+-----+-----
(0 rows)

select count(col_num2),min(col_char),max(col_varchar),sum(col_float),avg(col_num2) from vector_agg_table_06;
 count | min | max | sum | avg 
-------+-----+-----+-----+-----
     0 |     |     |     |    
(1 row)

select count(col_num2),min(col_char),max(col_varchar),sum(col_float),avg(col_num2) from vector_agg_table_06 group by col_num2;
 count | min | max | sum | avg 
-------+-----+-----+-----+-----
(0 rows)

select sum(col_int2) + avg(col_num / 1.20) from vector_agg_table_06 group by col_int;
 ?column? 
----------
(0 rows)

---
---
explain select count(distinct vector_agg_table_04.*) from vector_agg_table_04;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.02..0.03 rows=1 width=19)
   ->  Data Node Scan on vector_agg_table_04 "_REMOTE_TABLE_QUERY_"  (cost=0.00..0.00 rows=8 width=11)
         Node/s: All datanodes
(3 rows)

select count(distinct vector_agg_table_04.*) from vector_agg_table_04; --A.*
 count 
-------
     6
(1 row)

select count(vector_agg_engine_second.vector_agg_table_04.*) from vector_agg_engine_second.vector_agg_table_04; --A.B.*
 count 
-------
     8
(1 row)

select count(regression.vector_agg_engine_second.vector_agg_table_04.*) from regression.vector_agg_engine_second.vector_agg_table_04; --A.B.C.*
 count 
-------
     8
(1 row)

select count(distinct AA.*) from (select a.*, b.* from vector_agg_table_04 a, vector_agg_table_05 b where a.col_id = b.col_id) AA;
 count 
-------
     4
(1 row)

----
--- depend on lineitem_vec
----
select sum(L_QUANTITY) a ,l_returnflag from vector_engine.lineitem_vec group by L_returnflag order by a;
     a     | l_returnflag 
-----------+--------------
  61294.00 | A
  62210.00 | R
 132416.00 | N
(3 rows)

select avg(L_QUANTITY) a, sum(l_quantity) b , l_returnflag from vector_engine.lineitem_vec group by L_returnflag order by a;
          a          |     b     | l_returnflag 
---------------------+-----------+--------------
 25.1824157764995892 |  61294.00 | A
 25.7068530382450010 | 132416.00 | N
 25.7598343685300207 |  62210.00 | R
(3 rows)

select l_returnflag, l_linestatus, 
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, 
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge 
from vector_engine.lineitem_vec 
group by l_returnflag, l_linestatus order by 1, 2;
 l_returnflag | l_linestatus | sum_disc_price |    sum_charge    
--------------+--------------+----------------+------------------
 A            | F            |  87412093.2709 |  90826041.405058
 N            | F            |   2524639.6609 |   2621125.059923
 N            | O            | 185621134.7858 | 193145625.338017
 R            | F            |  88721248.6007 |  92323897.429505
(4 rows)

explain (verbose on, costs off) 
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	vector_engine.lineitem_vec
where
	l_shipdate <= date '1998-12-01' - interval '3 day'
group by
	l_returnflag,
	l_linestatus
order by
	sum_qty
;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
   ->  Vector Streaming (type: GATHER)
         Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
         Merge Sort Key: (sum((sum(lineitem_vec.l_quantity))))
         ->  Vector Sort
               Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
               Sort Key: (sum((sum(lineitem_vec.l_quantity))))
               ->  Vector Sonic Hash Aggregate
                     Output: l_returnflag, l_linestatus, sum((sum(l_quantity))), sum((sum(l_extendedprice))), sum((sum((l_extendedprice * (1::numeric - l_discount))))), sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))))), pg_catalog.avg((avg(l_quantity))), pg_catalog.avg((avg(l_extendedprice))), pg_catalog.avg((avg(l_discount))), pg_catalog.count(*)
                     Group By Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           Output: l_returnflag, l_linestatus, (sum(l_quantity)), (sum(l_extendedprice)), (sum((l_extendedprice * (1::numeric - l_discount)))), (sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))), (avg(l_quantity)), (avg(l_extendedprice)), (avg(l_discount)), (count(*))
                           Distribute Key: l_linestatus, l_returnflag
                           ->  Vector Sonic Hash Aggregate
                                 Output: l_returnflag, l_linestatus, sum(l_quantity), sum(l_extendedprice), sum((l_extendedprice * (1::numeric - l_discount))), sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count(*)
                                 Group By Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
                                 ->  CStore Scan on vector_engine.lineitem_vec
                                       Output: l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax
                                       Distribute Key: l_orderkey
                                       Filter: (lineitem_vec.l_shipdate <= '1998-11-28 00:00:00'::timestamp without time zone)
(21 rows)

select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	vector_engine.lineitem_vec
where
	l_shipdate <= date '1998-12-01' - interval '3 day'
group by
	l_returnflag,
	l_linestatus
order by
	sum_qty
;
 l_returnflag | l_linestatus |  sum_qty  | sum_base_price | sum_disc_price |    sum_charge    |       avg_qty       |     avg_price      |       avg_disc        | count_order 
--------------+--------------+-----------+----------------+----------------+------------------+---------------------+--------------------+-----------------------+-------------
 N            | F            |   1852.00 |     2634524.69 |   2524639.6609 |   2621125.059923 | 26.4571428571428571 | 37636.067000000000 | .04742857142857142857 |          70
 A            | F            |  61294.00 |    92020418.33 |  87412093.2709 |  90826041.405058 | 25.1824157764995892 | 37806.252395234182 | .05058751027115858669 |        2434
 R            | F            |  62210.00 |    93368051.62 |  88721248.6007 |  92323897.429505 | 25.7598343685300207 | 38661.719097308489 | .04997929606625258799 |        2415
 N            | O            | 130564.00 |   195348592.46 | 185621134.7858 | 193145625.338017 | 25.6965164337728794 | 38446.879051367841 | .05026372761267467034 |        5081
(4 rows)

explain (verbose on, costs off) 
select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	vector_engine.lineitem_vec
where
	l_shipdate <= date '1998-12-01' - interval '3 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus
;
                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
   ->  Vector Streaming (type: GATHER)
         Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
         Merge Sort Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
         ->  Vector Sort
               Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (pg_catalog.count(*))
               Sort Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
               ->  Vector Sonic Hash Aggregate
                     Output: l_returnflag, l_linestatus, sum((sum(l_quantity))), sum((sum(l_extendedprice))), sum((sum((l_extendedprice * (1::numeric - l_discount))))), sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))))), pg_catalog.avg((avg(l_quantity))), pg_catalog.avg((avg(l_extendedprice))), pg_catalog.avg((avg(l_discount))), pg_catalog.count(*)
                     Group By Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
                     ->  Vector Streaming(type: REDISTRIBUTE)
                           Output: l_returnflag, l_linestatus, (sum(l_quantity)), (sum(l_extendedprice)), (sum((l_extendedprice * (1::numeric - l_discount)))), (sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))), (avg(l_quantity)), (avg(l_extendedprice)), (avg(l_discount)), (count(*))
                           Distribute Key: l_linestatus, l_returnflag
                           ->  Vector Sonic Hash Aggregate
                                 Output: l_returnflag, l_linestatus, sum(l_quantity), sum(l_extendedprice), sum((l_extendedprice * (1::numeric - l_discount))), sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count(*)
                                 Group By Key: lineitem_vec.l_returnflag, lineitem_vec.l_linestatus
                                 ->  CStore Scan on vector_engine.lineitem_vec
                                       Output: l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax
                                       Distribute Key: l_orderkey
                                       Filter: (lineitem_vec.l_shipdate <= '1998-11-28 00:00:00'::timestamp without time zone)
(21 rows)

select
	l_returnflag,
	l_linestatus,
	sum(l_quantity) as sum_qty,
	sum(l_extendedprice) as sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
	avg(l_quantity) as avg_qty,
	avg(l_extendedprice) as avg_price,
	avg(l_discount) as avg_disc,
	count(*) as count_order
from
	vector_engine.lineitem_vec
where
	l_shipdate <= date '1998-12-01' - interval '3 day'
group by
	l_returnflag,
	l_linestatus
order by
	l_returnflag,
	l_linestatus
;
 l_returnflag | l_linestatus |  sum_qty  | sum_base_price | sum_disc_price |    sum_charge    |       avg_qty       |     avg_price      |       avg_disc        | count_order 
--------------+--------------+-----------+----------------+----------------+------------------+---------------------+--------------------+-----------------------+-------------
 A            | F            |  61294.00 |    92020418.33 |  87412093.2709 |  90826041.405058 | 25.1824157764995892 | 37806.252395234182 | .05058751027115858669 |        2434
 N            | F            |   1852.00 |     2634524.69 |   2524639.6609 |   2621125.059923 | 26.4571428571428571 | 37636.067000000000 | .04742857142857142857 |          70
 N            | O            | 130564.00 |   195348592.46 | 185621134.7858 | 193145625.338017 | 25.6965164337728794 | 38446.879051367841 | .05026372761267467034 |        5081
 R            | F            |  62210.00 |    93368051.62 |  88721248.6007 |  92323897.429505 | 25.7598343685300207 | 38661.719097308489 | .04997929606625258799 |        2415
(4 rows)

select count(max(L_ORDERKEY)) over(), min(L_PARTKEY), c1 from (select L_ORDERKEY, L_PARTKEY, count(L_LINENUMBER) as c1 from vector_engine.lineitem_vec group by L_ORDERKEY, L_PARTKEY) 
group by c1 order by 1, 2, 3;
 count | min | c1 
-------+-----+----
     1 | 194 |  1
(1 row)

--
--vechashagg, segnum>1
--
-------------------------
 off
(1 row)

create table vector_agg_engine_second.vector_agg_table_07 (a int, b int) with (orientation=column) DISTRIBUTE BY HASH(a);
insert into vector_agg_engine_second.vector_agg_table_07 values(1,1);
insert into vector_agg_engine_second.vector_agg_table_07 values(2,2);
insert into vector_agg_engine_second.vector_agg_table_07 values(2,3);
ANALYZE vector_agg_engine_second.vector_agg_table_07;
update pg_class set reltuples=10000000000 where relname='vector_agg_table_07' ;
update pg_statistic set stadistinct=10000000000 from pg_class where pg_statistic.starelid=pg_class.relfilenode  and pg_class.relname='vector_agg_table_07';
update pg_statistic set stadndistinct=10000000000 from pg_class where pg_statistic.starelid=pg_class.relfilenode  and pg_class.relname='vector_agg_table_07';
set work_mem=6000000;
select sum(vector_agg_table_07.a),count(vector_agg_table_07.b) from vector_agg_table_07 group by vector_agg_table_07.a,vector_agg_table_07.b order by sum;
 sum | count 
-----+-------
   1 |     1
   2 |     1
   2 |     1
(3 rows)

reset work_mem;
----
--- Clean Resource and Tables
----
drop schema vector_agg_engine_second cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table vector_agg_table_04
drop cascades to table vector_agg_table_05
drop cascades to table vector_agg_table_06
drop cascades to table vector_agg_table_07
