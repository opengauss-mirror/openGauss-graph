---
--- test creation of SERIAL column
---
CREATE TABLE serialTest (f1 text, f2 serial);
NOTICE:  CREATE TABLE will create implicit sequence "serialtest_f2_seq" for serial column "serialtest.f2"
INSERT INTO serialTest VALUES ('foo');
INSERT INTO serialTest VALUES ('bar');
INSERT INTO serialTest VALUES ('force', 100);
INSERT INTO serialTest VALUES ('wrong', NULL);
ERROR:  null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest ORDER BY f1, f2;
  f1   | f2  
-------+-----
 bar   |   2
 foo   |   1
 force | 100
(3 rows)

-- test smallserial / bigserial
CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
  f5 bigserial, f6 serial8);
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f2_seq" for serial column "serialtest2.f2"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f3_seq" for serial column "serialtest2.f3"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f4_seq" for serial column "serialtest2.f4"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f5_seq" for serial column "serialtest2.f5"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f6_seq" for serial column "serialtest2.f6"
INSERT INTO serialTest2 (f1)
  VALUES ('test_defaults');
INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
  VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
          9223372036854775807),
         ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
          -9223372036854775808);
-- All these INSERTs should fail:
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
CONTEXT:  referenced column: f3
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
CONTEXT:  referenced column: f4
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
CONTEXT:  referenced column: f3
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
CONTEXT:  referenced column: f4
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
CONTEXT:  referenced column: f5
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
CONTEXT:  referenced column: f6
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
CONTEXT:  referenced column: f5
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
CONTEXT:  referenced column: f6
SELECT * FROM serialTest2 ORDER BY f2 ASC;
      f1       |     f2      |   f3   |   f4   |          f5          |          f6          
---------------+-------------+--------+--------+----------------------+----------------------
 test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
 test_defaults |           1 |      1 |      1 |                    1 |                    1
 test_max_vals |  2147483647 |  32767 |  32767 |  9223372036854775807 |  9223372036854775807
(3 rows)

SELECT nextval('serialTest2_f2_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f3_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f4_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f5_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f6_seq');
 nextval 
---------
       2
(1 row)

-- basic sequence operations using both text and oid references
CREATE SEQUENCE sequence_test;
SELECT nextval('sequence_test'::text);
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
       2
(1 row)

SELECT currval('sequence_test'::text);
ERROR:  currval function is not supported
CONTEXT:  referenced column: currval
SELECT currval('sequence_test'::regclass);
ERROR:  currval function is not supported
CONTEXT:  referenced column: currval
SELECT setval('sequence_test'::text, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::text, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      99
(1 row)

SELECT setval('sequence_test'::regclass, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::regclass, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      99
(1 row)

DROP SEQUENCE sequence_test;
-- renaming sequences
CREATE SEQUENCE foo_seq;
ALTER TABLE foo_seq RENAME TO foo_seq_new;
ERROR:  RENAME SEQUENCE is not yet supported.
SELECT * FROM foo_seq_new;
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT * FROM foo_seq_new;
                      ^
SELECT nextval('foo_seq_new');
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT nextval('foo_seq_new');
                       ^
CONTEXT:  referenced column: nextval
SELECT nextval('foo_seq_new');
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT nextval('foo_seq_new');
                       ^
CONTEXT:  referenced column: nextval
SELECT * FROM foo_seq_new;
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT * FROM foo_seq_new;
                      ^
DROP SEQUENCE IF EXISTS foo_seq_new;
NOTICE:  sequence "foo_seq_new" does not exist, skipping
DROP SEQUENCE IF EXISTS foo_seq;
-- renaming serial sequences
ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
ERROR:  RENAME SEQUENCE is not yet supported.
INSERT INTO serialTest VALUES ('more');
SELECT * FROM serialTest ORDER BY f1, f2;
  f1   | f2  
-------+-----
 bar   |   2
 foo   |   1
 force | 100
 more  |   3
(4 rows)

--
-- Check dependencies of serial and ordinary sequences
--
-- Enforce use of COMMIT instead of 2PC for temporary objects
--CREATE TEMP SEQUENCE myseq2;
--CREATE TEMP SEQUENCE myseq3;
--CREATE TEMP TABLE t1 (
--  f1 serial,
--  f2 int DEFAULT nextval('myseq2'),
--  f3 int DEFAULT nextval('myseq3'::text)
--);
-- Both drops should fail, but with different error messages:
--DROP SEQUENCE t1_f1_seq;
--DROP SEQUENCE myseq2;
-- This however will work:
--DROP SEQUENCE myseq3;
--DROP TABLE t1;
-- Fails because no longer existent:
--DROP SEQUENCE t1_f1_seq;
-- Now OK:
--DROP SEQUENCE myseq2;
--
-- Alter sequence
--
ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
NOTICE:  relation "sequence_test2" does not exist, skipping
CREATE SEQUENCE sequence_test2 START WITH 32;
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

ALTER SEQUENCE sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
ERROR:  ALTER SEQUENCE is not yet supported.
SELECT nextval('sequence_test2');
 nextval 
---------
      33
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      34
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      35
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      37
(1 row)

ALTER SEQUENCE sequence_test2 RESTART;
ERROR:  ALTER SEQUENCE is not yet supported.
SELECT nextval('sequence_test2');
 nextval 
---------
      38
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      39
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      40
(1 row)

-- Information schema
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 regression       | public          | sequence_test2     | bigint    |                64 |                       2 |             0 | 32          | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f2_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f3_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f4_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f5_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f6_seq | bigint    |                64 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
(6 rows)

-- Test comments
COMMENT ON SEQUENCE asdf IS 'won''t work';
ERROR:  relation "asdf" does not exist
COMMENT ON SEQUENCE sequence_test2 IS 'will work';
COMMENT ON SEQUENCE sequence_test2 IS NULL;
-- Test lastval()
CREATE SEQUENCE seq;
SELECT nextval('seq');
 nextval 
---------
       1
(1 row)

SELECT lastval();
ERROR:  lastval function is not supported
CONTEXT:  referenced column: lastval
SELECT setval('seq', 99);
 setval 
--------
     99
(1 row)

SELECT lastval();
ERROR:  lastval function is not supported
CONTEXT:  referenced column: lastval
CREATE SEQUENCE seq2;
SELECT nextval('seq2');
 nextval 
---------
       1
(1 row)

SELECT lastval();
ERROR:  lastval function is not supported
CONTEXT:  referenced column: lastval
DROP SEQUENCE seq2;
-- should fail
SELECT lastval();
ERROR:  lastval function is not supported
CONTEXT:  referenced column: lastval
CREATE USER seq_user PASSWORD 'gauss@123';
START TRANSACTION;
SET LOCAL SESSION AUTHORIZATION seq_user PASSWORD 'gauss@123';
CREATE SEQUENCE seq3;
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
SELECT lastval();
ERROR:  lastval function is not supported
CONTEXT:  referenced column: lastval
ROLLBACK;
-- Sequences should get wiped out as well:
DROP TABLE serialTest, serialTest2;
-- Make sure sequences are gone:
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema | sequence_name  | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+----------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 regression       | public          | sequence_test2 | bigint    |                64 |                       2 |             0 | 32          | 1             | 9223372036854775807 | 1         | NO
(1 row)

DROP USER seq_user;
DROP SEQUENCE seq;
create sequence seqllt;
create temp table seqllt(c1 int);
select nextval('seqllt');
--?ERROR:  "pg_temp_*
DETAIL:  Please make sure using the correct schema
CONTEXT:  referenced column: nextval
drop table seqllt;
drop sequence seqllt;
create schema origSchema;
create schema newSchema;
create sequence  origSchema.seq1;
alter sequence origSchema.seq1 set schema newSchema;
ERROR:  ALTER SEQUENCE SET SCHEMA is not yet supported.
drop sequence origSchema.seq1;
drop schema origSchema;
drop schema newSchema;
create table seqCycleTab(c1 int, c2 int); 
create sequence seqCycle maxvalue 5 cycle;
insert into seqCycleTab values(nextval('seqCycle'),generate_series(1,8));
select * from seqCycleTab order by c1,c2;
 c1 | c2 
----+----
  1 |  1
  1 |  6
  2 |  2
  2 |  7
  3 |  3
  3 |  8
  4 |  4
  5 |  5
(8 rows)

drop table seqCycleTab;
drop sequence seqCycle;
create sequence seqMin increment by -1 start -1 minvalue -2;
select nextval('seqMin');
 nextval 
---------
      -1
(1 row)

select nextval('seqMin');
 nextval 
---------
      -2
(1 row)

select nextval('seqMin');
WARNING:  Failed to receive GTM rollback transaction response  for aborting prepared (null).
--?ERROR:  Sequence reached minimum value.*
CONTEXT:  referenced column: nextval
drop sequence seqMin;
create table t1(c1 int);
create sequence seq1;
alter table t1 add column c2 int default nextval('seq1')+1;
ERROR:  It's not supported to alter table add column default with nextval expression.
drop table t1;
drop sequence seq1;
--temp sequence
create temp sequence seq;
ERROR:  Temporary sequences are not supported
create sequence pg_temp.seq;
ERROR:  Temporary sequences are not supported
--test alter sequence maxvalue
--normal case with nocache
create sequence seq maxvalue 100;
alter sequence  seq maxvalue -1;
ERROR:  MINVALUE (1) must be less than MAXVALUE (-1)
alter sequence seq maxvalue 90;
select * from seq;
 sequence_name | last_value | start_value | increment_by | max_value | min_value | cache_value | log_cnt | is_cycled | is_called |  uuid   
---------------+------------+-------------+--------------+-----------+-----------+-------------+---------+-----------+-----------+---------
--? seq           |         -1 |           1 |            1 |        90 |         1 |           1 |       0 | f         | f         | .*
(1 row)

alter sequence seq maxvalue 110;
select * from seq;
 sequence_name | last_value | start_value | increment_by | max_value | min_value | cache_value | log_cnt | is_cycled | is_called |  uuid   
---------------+------------+-------------+--------------+-----------+-----------+-------------+---------+-----------+-----------+---------
--? seq           |         -1 |           1 |            1 |       110 |         1 |           1 |       0 | f         | f         | .*
(1 row)

alter sequence seq nomaxvalue;
select * from seq;
 sequence_name | last_value | start_value | increment_by |      max_value      | min_value | cache_value | log_cnt | is_cycled | is_called |  uuid   
---------------+------------+-------------+--------------+---------------------+-----------+-------------+---------+-----------+-----------+---------
--? seq           |         -1 |           1 |            1 | 9223372036854775807 |         1 |           1 |       0 | f         | f         | .*
(1 row)

alter sequence seq maxvalue 2;
select nextval('seq');
 nextval 
---------
       1
(1 row)

select nextval('seq');
 nextval 
---------
       2
(1 row)

select nextval('seq');
WARNING:  Failed to receive GTM rollback transaction response  for aborting prepared (null).
--?ERROR:  Sequence reached maximum value 2, seqval 2, uuid .* 
CONTEXT:  referenced column: nextval
alter sequence seq maxvalue 10;
select nextval('seq');
 nextval 
---------
       3
(1 row)

drop sequence seq;
--normal case with cache
create sequence seq maxvalue 100 cache 5 increment 2 start 2;
NOTICE:  Not advised to use MAXVALUE or MINVALUE together with CACHE.
DETAIL:  If CACHE is defined, some sequence values may be wasted, causing available sequence numbers to be less than expected.
select seq.nextval;
 nextval 
---------
       2
(1 row)

execute direct on(coordinator2) 'select seq.nextval';
 nextval 
---------
      12
(1 row)

alter sequence seq maxvalue 15;
WARNING:  Failed to receive GTM rollback transaction response  for aborting prepared (null).
--?ERROR:  Can not alter sequence uuid .* maxval from 100 to 15, because new maxval 15 should be greater than currval 20 in gtm
alter sequence seq maxvalue 50;
execute direct on (coordinator1) 'select seq.nextval';
 nextval 
---------
      22
(1 row)

execute direct on (coordinator2) 'select seq.nextval';
 nextval 
---------
      32
(1 row)

alter sequence seq maxvalue 100;
execute direct on (coordinator1) 'select seq.nextval';
 nextval 
---------
      42
(1 row)

execute direct on (coordinator2) 'select seq.nextval';
 nextval 
---------
      52
(1 row)

alter sequence seq minvalue 0;
ERROR:  ALTER SEQUENCE is not yet supported.
drop sequence seq;
--serial in table
create table test_seq (a int, b serial);
NOTICE:  CREATE TABLE will create implicit sequence "test_seq_b_seq" for serial column "test_seq.b"
insert into test_seq(a) values(generate_series(1,10));
select * from test_seq order by a;
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

alter sequence test_seq_b_seq maxvalue 9;
WARNING:  Failed to receive GTM rollback transaction response  for aborting prepared (null).
--?ERROR:  Can not alter sequence uuid .* maxval from 9223372036854775806 to 9, because new maxval 9 should be greater than currval 11 in gtm
alter sequence test_seq_b_seq maxvalue 20;
insert into test_seq(a) values(generate_series(11,20));
--?WARNING:  Failed to receive GTM rollback transaction response  for aborting prepared .*.
--?ERROR:  Sequence reached maximum value 20, seqval 20, uuid .* 
CONTEXT:  referenced column: b
select * from test_seq order by a;
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
(10 rows)

alter sequence test_seq_b_seq maxvalue 100;
insert into test_seq(a) values(generate_series(11,20));
select * from test_seq order by a;
 a  | b  
----+----
  1 |  1
  2 |  2
  3 |  3
  4 |  4
  5 |  5
  6 |  6
  7 |  7
  8 |  8
  9 |  9
 10 | 10
 11 | 21
 12 | 22
 13 | 23
 14 | 24
 15 | 25
 16 | 26
 17 | 27
 18 | 28
 19 | 29
 20 | 30
(20 rows)

drop table test_seq;
--lock nextval on cn
create sequence seq;
create table test_base(a int, b int);
insert into test_base values(1,1);
create table t_nextval (a int, b int);
create table t_serial(a int, b serial);
NOTICE:  CREATE TABLE will create implicit sequence "t_serial_b_seq" for serial column "t_serial.b"
begin;
insert into t_nextval select a,nextval('seq') from test_base;
select a.* from pg_locks a,pg_class b where a.relation= b.oid and b.relname='seq';
--?.*
--?.*
--? relation | .* |  .* |      |       |            |               |         |       |          | .*            | .* | RowExclusiveLock | t       | t
(1 row)

end;
begin;
insert into t_serial(a) select a from test_base;
select a.* from pg_locks a,pg_class b where a.relation= b.oid and b.relname='t_serial_b_seq';
--?.*
--?.*
--? relation | .* |  .* |      |       |            |               |         |       |          | .*            | .* | RowExclusiveLock | t       | t
(1 row)

end;
drop sequence seq;
drop table t_nextval;
drop table test_base;
drop table t_serial;
