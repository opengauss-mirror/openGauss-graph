create schema hw_row_groupingsets;
set search_path=hw_row_groupingsets;
create table row_gstest1(a int, b int, v int);
insert into row_gstest1 values (1,1,10),(1,1,11),(1,2,12),(1,2,13),(1,3,14),
(2,3,15),  (3,3,16), (3,4,17), (4,1,18), (4,1,19);
create table row_gstest2 (a integer, b integer, c integer, d integer,
                           e integer, f integer, g integer, h integer);
copy row_gstest2 from stdin;
create table row_gstest3 (a integer, b integer, c integer, d integer);
copy row_gstest3 from stdin;
analyze row_gstest1;
analyze row_gstest2;
analyze row_gstest3;
select a, b, grouping(a,b), sum(v), count(*), max(v)
  from row_gstest1 group by rollup (a,b) order by 1, 2, 3, 4, 5, 6;
 a | b | grouping | sum | count | max 
---+---+----------+-----+-------+-----
 1 | 1 |        0 |  21 |     2 |  11
 1 | 2 |        0 |  25 |     2 |  13
 1 | 3 |        0 |  14 |     1 |  14
 1 |   |        1 |  60 |     5 |  14
 2 | 3 |        0 |  15 |     1 |  15
 2 |   |        1 |  15 |     1 |  15
 3 | 3 |        0 |  16 |     1 |  16
 3 | 4 |        0 |  17 |     1 |  17
 3 |   |        1 |  33 |     2 |  17
 4 | 1 |        0 |  37 |     2 |  19
 4 |   |        1 |  37 |     2 |  19
   |   |        3 | 145 |    10 |  19
(12 rows)

-- nesting with window functions
select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum
  from row_gstest2 group by rollup (a,b)  order by 1, 2, 3, 4;
 a | b | sum | rsum 
---+---+-----+------
 1 | 1 |   8 |    8
 1 | 2 |   2 |   10
 1 |   |  10 |   20
 2 | 2 |   2 |   22
 2 |   |   2 |   24
   |   |  12 |   36
(6 rows)

-- nesting with grouping sets
select sum(c) from row_gstest2 group by grouping sets((), grouping sets((), grouping sets(()))) order by 1 desc;
 sum 
-----
  12
  12
  12
(3 rows)

select sum(c) from row_gstest2 group by grouping sets((), grouping sets((), grouping sets(((a, b))))) order by 1 desc;
 sum 
-----
  12
  12
   8
   2
   2
(5 rows)

select sum(c) from row_gstest2 group by grouping sets(grouping sets(rollup(c), grouping sets(cube(c)))) order by 1 desc;
 sum 
-----
  12
  12
   6
   6
   6
   6
(6 rows)

select sum(c) from row_gstest2 group by grouping sets(a, grouping sets(a, cube(b))) order by 1 desc;
 sum 
-----
  12
  10
  10
   8
   4
   2
   2
(7 rows)

select sum(c) from row_gstest2 group by grouping sets(grouping sets((a, (b)))) order by 1 desc;
 sum 
-----
   8
   2
   2
(3 rows)

select sum(c) from row_gstest2 group by grouping sets(grouping sets((a, b))) order by 1 desc;
 sum 
-----
   8
   2
   2
(3 rows)

select sum(c) from row_gstest2 group by grouping sets(grouping sets(a, grouping sets(a), a)) order by 1 desc;
 sum 
-----
  10
  10
  10
   2
   2
   2
(6 rows)

select sum(c) from row_gstest2 group by grouping sets(grouping sets(a, grouping sets(a, grouping sets(a), ((a)), a, grouping sets(a), (a)), a)) order by 1 desc;
 sum 
-----
  10
  10
  10
  10
  10
  10
  10
  10
   2
   2
   2
   2
   2
   2
   2
   2
(16 rows)

select sum(c) from row_gstest2 group by grouping sets((a,(a,b)), grouping sets((a,(a,b)),a)) order by 1 desc;
 sum 
-----
  10
   8
   8
   2
   2
   2
   2
   2
(8 rows)

create table row_gstest_empty (a integer, b integer, v integer);
select a, b, sum(v), count(*) from row_gstest_empty group by grouping sets ((a,b),a);
 a | b | sum | count 
---+---+-----+-------
(0 rows)

select a, b, sum(v), count(*) from row_gstest_empty group by grouping sets ((a,b),());
 a | b | sum | count 
---+---+-----+-------
   |   |     |     0
(1 row)

select a, b, sum(v), count(*) from row_gstest_empty group by grouping sets ((a,b),(),(),());
 a | b | sum | count 
---+---+-----+-------
   |   |     |     0
   |   |     |     0
   |   |     |     0
(3 rows)

select a, b, avg(v), sum(v), count(*) from row_gstest_empty group by grouping sets ((a,b),(),(),());
 a | b | avg | sum | count 
---+---+-----+-----+-------
   |   |     |     |     0
   |   |     |     |     0
   |   |     |     |     0
(3 rows)

select sum(v), count(*) from row_gstest_empty group by grouping sets ((),(),());
 sum | count 
-----+-------
     |     0
     |     0
     |     0
(3 rows)

-- empty input with joins tests some important code paths
select t1.a, t2.b, sum(t1.v), count(*) from row_gstest_empty t1, row_gstest_empty t2 group by grouping sets ((t1.a,t2.b),());
 a | b | sum | count 
---+---+-----+-------
   |   |     |     0
(1 row)

-- simple joins, var resolution, GROUPING on join vars
select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a) from row_gstest1 t1, row_gstest2 t2 group by grouping sets ((t1.a, t2.b), ()) order by 1, 2, 3, 4, 5;
 a | b | grouping | sum  | max 
---+---+----------+------+-----
 1 | 1 |        0 |  420 |   1
 1 | 2 |        0 |  120 |   2
 2 | 1 |        0 |  105 |   1
 2 | 2 |        0 |   30 |   2
 3 | 1 |        0 |  231 |   1
 3 | 2 |        0 |   66 |   2
 4 | 1 |        0 |  259 |   1
 4 | 2 |        0 |   74 |   2
   |   |        3 | 1305 |   2
(9 rows)

select t1.a, t2.b, grouping(t1.a, t2.b), sum(t1.v), max(t2.a) from row_gstest1 t1 join row_gstest2 t2 on (t1.a=t2.a) group by grouping sets ((t1.a, t2.b), ())
order by 1, 2, 3, 4, 5;
 a | b | grouping | sum | max 
---+---+----------+-----+-----
 1 | 1 |        0 | 420 |   1
 1 | 2 |        0 |  60 |   1
 2 | 2 |        0 |  15 |   2
   |   |        3 | 495 |   2
(4 rows)

select a, b, grouping(a, b), sum(t1.v), max(t2.c) from row_gstest1 t1 join row_gstest2 t2 using (a,b) group by grouping sets ((a, b), ())  order by 1, 2, 3, 4, 5;;
 a | b | grouping | sum | max 
---+---+----------+-----+-----
 1 | 1 |        0 | 147 |   2
 1 | 2 |        0 |  25 |   2
   |   |        3 | 172 |   2
(3 rows)

-- check that functionally dependent cols are not nulled
select a, d, grouping(a,b,c) from row_gstest3 group by grouping sets ((a,b), (a,c));
ERROR:  column "row_gstest3.d" must appear in the GROUP BY clause or be used in an aggregate function
LINE 1: select a, d, grouping(a,b,c) from row_gstest3 group by group...
                  ^
-- Views with GROUPING SET queries
select a, b, grouping(a,b), sum(c), count(*), max(c) from row_gstest2 group by rollup ((a,b,c),(c,d)) order by 1, 2, 3, 4, 5, 6;
 a | b | grouping | sum | count | max 
---+---+----------+-----+-------+-----
 1 | 1 |        0 |   1 |     1 |   1
 1 | 1 |        0 |   2 |     1 |   2
 1 | 1 |        0 |   2 |     1 |   2
 1 | 1 |        0 |   5 |     5 |   1
 1 | 1 |        0 |   6 |     6 |   1
 1 | 2 |        0 |   2 |     1 |   2
 1 | 2 |        0 |   2 |     1 |   2
 2 | 2 |        0 |   2 |     1 |   2
 2 | 2 |        0 |   2 |     1 |   2
   |   |        3 |  12 |     9 |   2
(10 rows)

select a, b, sum(c), sum(sum(c)) over (order by a,b) as rsum from row_gstest2 group by cube (a,b)  order by 1, 2, 3, 4;
 a | b | sum | rsum 
---+---+-----+------
 1 | 1 |   8 |    8
 1 | 2 |   2 |   10
 1 |   |  10 |   20
 2 | 2 |   2 |   22
 2 |   |   2 |   24
   | 1 |   8 |   32
   | 2 |   4 |   36
   |   |  12 |   48
(8 rows)

-- Agg level check. This query should error out.
select (select grouping(a,b) from row_gstest2) from row_gstest2 group by a,b;
ERROR:  arguments to GROUPING must be grouping expressions of the associated query level
LINE 1: select (select grouping(a,b) from row_gstest2) from row_gste...
                                ^
select a, b, grouping(a, b, c) from row_gstest2 group by a, b;
ERROR:  arguments to GROUPING must be grouping expressions of the associated query level
LINE 1: select a, b, grouping(a, b, c) from row_gstest2 group by a, ...
                                    ^
--Nested queries
select a, b, sum(c), count(*) from row_gstest2 group by grouping sets (rollup(a,b),a) order by 1, 2, 3, 4;
 a | b | sum | count 
---+---+-----+-------
 1 | 1 |   8 |     7
 1 | 2 |   2 |     1
 1 |   |  10 |     8
 1 |   |  10 |     8
 2 | 2 |   2 |     1
 2 |   |   2 |     1
 2 |   |   2 |     1
   |   |  12 |     9
(8 rows)

create table row_aptest(a int, b varchar(5), c char(5), d text, e numeric(5, 0), f timestamp);
insert into row_aptest values(1, generate_series(1, 2), generate_series(1, 3), generate_series(1, 4), generate_series(1, 6), '2012-12-16 10:11:15');
analyze row_aptest;
select a, b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup(a, b, c, d, e, f) order by 1, 2, 3, 4, 5, 6, 7;
 a | b |   c   | sum |          avg           | max | min 
---+---+-------+-----+------------------------+-----+-----
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   6 |     3.0000000000000000 | 3   |   1
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   6 |     4.0000000000000000 | 4   |   2
 1 |   |       |  12 |     3.5000000000000000 | 4   |   1
   |   |       |  12 |     3.5000000000000000 | 4   |   1
(46 rows)

select b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup(b, c, d, e, f) order by 1, 2, 3, 4, 5, 6;
 b |   c   | sum |          avg           | max | min 
---+-------+-----+------------------------+-----+-----
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   6 |     3.0000000000000000 | 3   |   1
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   6 |     4.0000000000000000 | 4   |   2
   |       |  12 |     3.5000000000000000 | 4   |   1
(45 rows)

select b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup(b, c, d, e) order by 1, 2, 3, 4, 5, 6;
 b |   c   | sum |          avg           | max | min 
---+-------+-----+------------------------+-----+-----
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   6 |     3.0000000000000000 | 3   |   1
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   6 |     4.0000000000000000 | 4   |   2
   |       |  12 |     3.5000000000000000 | 4   |   1
(33 rows)

select a, b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by cube(a, b, c, d, e, f) order by 1, 2, 3, 4, 5, 6, 7;
 a | b |   c   | sum |          avg           | max | min 
---+---+-------+-----+------------------------+-----+-----
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 |       |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1 |       |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 |       |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1 |       |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 |       |   1 |     3.0000000000000000 | 1   |   3
 1 | 1 |       |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   1 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 |       |   1 |     5.0000000000000000 | 1   |   5
 1 | 1 |       |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 |       |   1 |     5.0000000000000000 | 3   |   5
 1 | 1 |       |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 |       |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1 |       |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   2 |     3.0000000000000000 | 3   |   3
 1 | 1 |       |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 |       |   2 |     5.0000000000000000 | 3   |   5
 1 | 1 |       |   3 |     3.0000000000000000 | 1   |   1
 1 | 1 |       |   3 |     3.0000000000000000 | 1   |   1
 1 | 1 |       |   3 |     3.0000000000000000 | 3   |   1
 1 | 1 |       |   3 |     3.0000000000000000 | 3   |   1
 1 | 1 |       |   6 |     3.0000000000000000 | 3   |   1
 1 | 1 |       |   6 |     3.0000000000000000 | 3   |   1
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 |       |   1 |     2.0000000000000000 | 2   |   2
 1 | 2 |       |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 |       |   1 |     2.0000000000000000 | 4   |   2
 1 | 2 |       |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 |       |   1 |     4.0000000000000000 | 2   |   4
 1 | 2 |       |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 |       |   1 |     4.0000000000000000 | 4   |   4
 1 | 2 |       |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 |       |   1 |     6.0000000000000000 | 2   |   6
 1 | 2 |       |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   1 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 |       |   2 |     2.0000000000000000 | 4   |   2
 1 | 2 |       |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 |       |   2 |     4.0000000000000000 | 4   |   4
 1 | 2 |       |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   2 |     6.0000000000000000 | 4   |   6
 1 | 2 |       |   3 |     4.0000000000000000 | 2   |   2
 1 | 2 |       |   3 |     4.0000000000000000 | 2   |   2
 1 | 2 |       |   3 |     4.0000000000000000 | 4   |   2
 1 | 2 |       |   3 |     4.0000000000000000 | 4   |   2
 1 | 2 |       |   6 |     4.0000000000000000 | 4   |   2
 1 | 2 |       |   6 |     4.0000000000000000 | 4   |   2
 1 |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 2   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   1 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 |   | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   2 |     4.0000000000000000 | 4   |   4
 1 |   | 1     |   4 |     2.5000000000000000 | 4   |   1
 1 |   | 1     |   4 |     2.5000000000000000 | 4   |   1
 1 |   | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 2   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   1 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   2 |     2.0000000000000000 | 4   |   2
 1 |   | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 |   | 2     |   4 |     3.5000000000000000 | 4   |   2
 1 |   | 2     |   4 |     3.5000000000000000 | 4   |   2
 1 |   | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 2   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   1 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |   | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   2 |     6.0000000000000000 | 4   |   6
 1 |   | 3     |   4 |     4.5000000000000000 | 4   |   3
 1 |   | 3     |   4 |     4.5000000000000000 | 4   |   3
 1 |   |       |   1 | 1.00000000000000000000 | 1   |   1
 1 |   |       |   1 | 1.00000000000000000000 | 1   |   1
 1 |   |       |   1 | 1.00000000000000000000 | 3   |   1
 1 |   |       |   1 | 1.00000000000000000000 | 3   |   1
 1 |   |       |   1 |     2.0000000000000000 | 2   |   2
 1 |   |       |   1 |     2.0000000000000000 | 2   |   2
 1 |   |       |   1 |     2.0000000000000000 | 4   |   2
 1 |   |       |   1 |     2.0000000000000000 | 4   |   2
 1 |   |       |   1 |     3.0000000000000000 | 1   |   3
 1 |   |       |   1 |     3.0000000000000000 | 1   |   3
 1 |   |       |   1 |     3.0000000000000000 | 3   |   3
 1 |   |       |   1 |     3.0000000000000000 | 3   |   3
 1 |   |       |   1 |     4.0000000000000000 | 2   |   4
 1 |   |       |   1 |     4.0000000000000000 | 2   |   4
 1 |   |       |   1 |     4.0000000000000000 | 4   |   4
 1 |   |       |   1 |     4.0000000000000000 | 4   |   4
 1 |   |       |   1 |     5.0000000000000000 | 1   |   5
 1 |   |       |   1 |     5.0000000000000000 | 1   |   5
 1 |   |       |   1 |     5.0000000000000000 | 3   |   5
 1 |   |       |   1 |     5.0000000000000000 | 3   |   5
 1 |   |       |   1 |     6.0000000000000000 | 2   |   6
 1 |   |       |   1 |     6.0000000000000000 | 2   |   6
 1 |   |       |   1 |     6.0000000000000000 | 4   |   6
 1 |   |       |   1 |     6.0000000000000000 | 4   |   6
 1 |   |       |   2 | 1.00000000000000000000 | 3   |   1
 1 |   |       |   2 | 1.00000000000000000000 | 3   |   1
 1 |   |       |   2 |     2.0000000000000000 | 4   |   2
 1 |   |       |   2 |     2.0000000000000000 | 4   |   2
 1 |   |       |   2 |     3.0000000000000000 | 3   |   3
 1 |   |       |   2 |     3.0000000000000000 | 3   |   3
 1 |   |       |   2 |     4.0000000000000000 | 4   |   4
 1 |   |       |   2 |     4.0000000000000000 | 4   |   4
 1 |   |       |   2 |     5.0000000000000000 | 3   |   5
 1 |   |       |   2 |     5.0000000000000000 | 3   |   5
 1 |   |       |   2 |     6.0000000000000000 | 4   |   6
 1 |   |       |   2 |     6.0000000000000000 | 4   |   6
 1 |   |       |   3 |     3.0000000000000000 | 1   |   1
 1 |   |       |   3 |     3.0000000000000000 | 1   |   1
 1 |   |       |   3 |     3.0000000000000000 | 3   |   1
 1 |   |       |   3 |     3.0000000000000000 | 3   |   1
 1 |   |       |   3 |     4.0000000000000000 | 2   |   2
 1 |   |       |   3 |     4.0000000000000000 | 2   |   2
 1 |   |       |   3 |     4.0000000000000000 | 4   |   2
 1 |   |       |   3 |     4.0000000000000000 | 4   |   2
 1 |   |       |  12 |     3.5000000000000000 | 4   |   1
 1 |   |       |  12 |     3.5000000000000000 | 4   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 1 |       |   1 | 1.00000000000000000000 | 1   |   1
   | 1 |       |   1 | 1.00000000000000000000 | 1   |   1
   | 1 |       |   1 | 1.00000000000000000000 | 3   |   1
   | 1 |       |   1 | 1.00000000000000000000 | 3   |   1
   | 1 |       |   1 |     3.0000000000000000 | 1   |   3
   | 1 |       |   1 |     3.0000000000000000 | 1   |   3
   | 1 |       |   1 |     3.0000000000000000 | 3   |   3
   | 1 |       |   1 |     3.0000000000000000 | 3   |   3
   | 1 |       |   1 |     5.0000000000000000 | 1   |   5
   | 1 |       |   1 |     5.0000000000000000 | 1   |   5
   | 1 |       |   1 |     5.0000000000000000 | 3   |   5
   | 1 |       |   1 |     5.0000000000000000 | 3   |   5
   | 1 |       |   2 | 1.00000000000000000000 | 3   |   1
   | 1 |       |   2 | 1.00000000000000000000 | 3   |   1
   | 1 |       |   2 |     3.0000000000000000 | 3   |   3
   | 1 |       |   2 |     3.0000000000000000 | 3   |   3
   | 1 |       |   2 |     5.0000000000000000 | 3   |   5
   | 1 |       |   2 |     5.0000000000000000 | 3   |   5
   | 1 |       |   3 |     3.0000000000000000 | 1   |   1
   | 1 |       |   3 |     3.0000000000000000 | 1   |   1
   | 1 |       |   3 |     3.0000000000000000 | 3   |   1
   | 1 |       |   3 |     3.0000000000000000 | 3   |   1
   | 1 |       |   6 |     3.0000000000000000 | 3   |   1
   | 1 |       |   6 |     3.0000000000000000 | 3   |   1
   | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 2 |       |   1 |     2.0000000000000000 | 2   |   2
   | 2 |       |   1 |     2.0000000000000000 | 2   |   2
   | 2 |       |   1 |     2.0000000000000000 | 4   |   2
   | 2 |       |   1 |     2.0000000000000000 | 4   |   2
   | 2 |       |   1 |     4.0000000000000000 | 2   |   4
   | 2 |       |   1 |     4.0000000000000000 | 2   |   4
   | 2 |       |   1 |     4.0000000000000000 | 4   |   4
   | 2 |       |   1 |     4.0000000000000000 | 4   |   4
   | 2 |       |   1 |     6.0000000000000000 | 2   |   6
   | 2 |       |   1 |     6.0000000000000000 | 2   |   6
   | 2 |       |   1 |     6.0000000000000000 | 4   |   6
   | 2 |       |   1 |     6.0000000000000000 | 4   |   6
   | 2 |       |   2 |     2.0000000000000000 | 4   |   2
   | 2 |       |   2 |     2.0000000000000000 | 4   |   2
   | 2 |       |   2 |     4.0000000000000000 | 4   |   4
   | 2 |       |   2 |     4.0000000000000000 | 4   |   4
   | 2 |       |   2 |     6.0000000000000000 | 4   |   6
   | 2 |       |   2 |     6.0000000000000000 | 4   |   6
   | 2 |       |   3 |     4.0000000000000000 | 2   |   2
   | 2 |       |   3 |     4.0000000000000000 | 2   |   2
   | 2 |       |   3 |     4.0000000000000000 | 4   |   2
   | 2 |       |   3 |     4.0000000000000000 | 4   |   2
   | 2 |       |   6 |     4.0000000000000000 | 4   |   2
   | 2 |       |   6 |     4.0000000000000000 | 4   |   2
   |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   1 |     4.0000000000000000 | 2   |   4
   |   | 1     |   1 |     4.0000000000000000 | 2   |   4
   |   | 1     |   1 |     4.0000000000000000 | 2   |   4
   |   | 1     |   1 |     4.0000000000000000 | 2   |   4
   |   | 1     |   1 |     4.0000000000000000 | 4   |   4
   |   | 1     |   1 |     4.0000000000000000 | 4   |   4
   |   | 1     |   1 |     4.0000000000000000 | 4   |   4
   |   | 1     |   1 |     4.0000000000000000 | 4   |   4
   |   | 1     |   2 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   2 | 1.00000000000000000000 | 3   |   1
   |   | 1     |   2 |     4.0000000000000000 | 4   |   4
   |   | 1     |   2 |     4.0000000000000000 | 4   |   4
   |   | 1     |   4 |     2.5000000000000000 | 4   |   1
   |   | 1     |   4 |     2.5000000000000000 | 4   |   1
   |   | 2     |   1 |     2.0000000000000000 | 2   |   2
   |   | 2     |   1 |     2.0000000000000000 | 2   |   2
   |   | 2     |   1 |     2.0000000000000000 | 2   |   2
   |   | 2     |   1 |     2.0000000000000000 | 2   |   2
   |   | 2     |   1 |     2.0000000000000000 | 4   |   2
   |   | 2     |   1 |     2.0000000000000000 | 4   |   2
   |   | 2     |   1 |     2.0000000000000000 | 4   |   2
   |   | 2     |   1 |     2.0000000000000000 | 4   |   2
   |   | 2     |   1 |     5.0000000000000000 | 1   |   5
   |   | 2     |   1 |     5.0000000000000000 | 1   |   5
   |   | 2     |   1 |     5.0000000000000000 | 1   |   5
   |   | 2     |   1 |     5.0000000000000000 | 1   |   5
   |   | 2     |   1 |     5.0000000000000000 | 3   |   5
   |   | 2     |   1 |     5.0000000000000000 | 3   |   5
   |   | 2     |   1 |     5.0000000000000000 | 3   |   5
   |   | 2     |   1 |     5.0000000000000000 | 3   |   5
   |   | 2     |   2 |     2.0000000000000000 | 4   |   2
   |   | 2     |   2 |     2.0000000000000000 | 4   |   2
   |   | 2     |   2 |     5.0000000000000000 | 3   |   5
   |   | 2     |   2 |     5.0000000000000000 | 3   |   5
   |   | 2     |   4 |     3.5000000000000000 | 4   |   2
   |   | 2     |   4 |     3.5000000000000000 | 4   |   2
   |   | 3     |   1 |     3.0000000000000000 | 1   |   3
   |   | 3     |   1 |     3.0000000000000000 | 1   |   3
   |   | 3     |   1 |     3.0000000000000000 | 1   |   3
   |   | 3     |   1 |     3.0000000000000000 | 1   |   3
   |   | 3     |   1 |     3.0000000000000000 | 3   |   3
   |   | 3     |   1 |     3.0000000000000000 | 3   |   3
   |   | 3     |   1 |     3.0000000000000000 | 3   |   3
   |   | 3     |   1 |     3.0000000000000000 | 3   |   3
   |   | 3     |   1 |     6.0000000000000000 | 2   |   6
   |   | 3     |   1 |     6.0000000000000000 | 2   |   6
   |   | 3     |   1 |     6.0000000000000000 | 2   |   6
   |   | 3     |   1 |     6.0000000000000000 | 2   |   6
   |   | 3     |   1 |     6.0000000000000000 | 4   |   6
   |   | 3     |   1 |     6.0000000000000000 | 4   |   6
   |   | 3     |   1 |     6.0000000000000000 | 4   |   6
   |   | 3     |   1 |     6.0000000000000000 | 4   |   6
   |   | 3     |   2 |     3.0000000000000000 | 3   |   3
   |   | 3     |   2 |     3.0000000000000000 | 3   |   3
   |   | 3     |   2 |     6.0000000000000000 | 4   |   6
   |   | 3     |   2 |     6.0000000000000000 | 4   |   6
   |   | 3     |   4 |     4.5000000000000000 | 4   |   3
   |   | 3     |   4 |     4.5000000000000000 | 4   |   3
   |   |       |   1 | 1.00000000000000000000 | 1   |   1
   |   |       |   1 | 1.00000000000000000000 | 1   |   1
   |   |       |   1 | 1.00000000000000000000 | 3   |   1
   |   |       |   1 | 1.00000000000000000000 | 3   |   1
   |   |       |   1 |     2.0000000000000000 | 2   |   2
   |   |       |   1 |     2.0000000000000000 | 2   |   2
   |   |       |   1 |     2.0000000000000000 | 4   |   2
   |   |       |   1 |     2.0000000000000000 | 4   |   2
   |   |       |   1 |     3.0000000000000000 | 1   |   3
   |   |       |   1 |     3.0000000000000000 | 1   |   3
   |   |       |   1 |     3.0000000000000000 | 3   |   3
   |   |       |   1 |     3.0000000000000000 | 3   |   3
   |   |       |   1 |     4.0000000000000000 | 2   |   4
   |   |       |   1 |     4.0000000000000000 | 2   |   4
   |   |       |   1 |     4.0000000000000000 | 4   |   4
   |   |       |   1 |     4.0000000000000000 | 4   |   4
   |   |       |   1 |     5.0000000000000000 | 1   |   5
   |   |       |   1 |     5.0000000000000000 | 1   |   5
   |   |       |   1 |     5.0000000000000000 | 3   |   5
   |   |       |   1 |     5.0000000000000000 | 3   |   5
   |   |       |   1 |     6.0000000000000000 | 2   |   6
   |   |       |   1 |     6.0000000000000000 | 2   |   6
   |   |       |   1 |     6.0000000000000000 | 4   |   6
   |   |       |   1 |     6.0000000000000000 | 4   |   6
   |   |       |   2 | 1.00000000000000000000 | 3   |   1
   |   |       |   2 | 1.00000000000000000000 | 3   |   1
   |   |       |   2 |     2.0000000000000000 | 4   |   2
   |   |       |   2 |     2.0000000000000000 | 4   |   2
   |   |       |   2 |     3.0000000000000000 | 3   |   3
   |   |       |   2 |     3.0000000000000000 | 3   |   3
   |   |       |   2 |     4.0000000000000000 | 4   |   4
   |   |       |   2 |     4.0000000000000000 | 4   |   4
   |   |       |   2 |     5.0000000000000000 | 3   |   5
   |   |       |   2 |     5.0000000000000000 | 3   |   5
   |   |       |   2 |     6.0000000000000000 | 4   |   6
   |   |       |   2 |     6.0000000000000000 | 4   |   6
   |   |       |   3 |     3.0000000000000000 | 1   |   1
   |   |       |   3 |     3.0000000000000000 | 1   |   1
   |   |       |   3 |     3.0000000000000000 | 3   |   1
   |   |       |   3 |     3.0000000000000000 | 3   |   1
   |   |       |   3 |     4.0000000000000000 | 2   |   2
   |   |       |   3 |     4.0000000000000000 | 2   |   2
   |   |       |   3 |     4.0000000000000000 | 4   |   2
   |   |       |   3 |     4.0000000000000000 | 4   |   2
   |   |       |  12 |     3.5000000000000000 | 4   |   1
   |   |       |  12 |     3.5000000000000000 | 4   |   1
(464 rows)

select b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by cube(b, c, d, e, f) order by 1, 2, 3, 4, 5, 6;
 b |   c   | sum |          avg           | max | min 
---+-------+-----+------------------------+-----+-----
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   1 | 1.00000000000000000000 | 1   |   1
 1 |       |   1 | 1.00000000000000000000 | 1   |   1
 1 |       |   1 | 1.00000000000000000000 | 3   |   1
 1 |       |   1 | 1.00000000000000000000 | 3   |   1
 1 |       |   1 |     3.0000000000000000 | 1   |   3
 1 |       |   1 |     3.0000000000000000 | 1   |   3
 1 |       |   1 |     3.0000000000000000 | 3   |   3
 1 |       |   1 |     3.0000000000000000 | 3   |   3
 1 |       |   1 |     5.0000000000000000 | 1   |   5
 1 |       |   1 |     5.0000000000000000 | 1   |   5
 1 |       |   1 |     5.0000000000000000 | 3   |   5
 1 |       |   1 |     5.0000000000000000 | 3   |   5
 1 |       |   2 | 1.00000000000000000000 | 3   |   1
 1 |       |   2 | 1.00000000000000000000 | 3   |   1
 1 |       |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   2 |     5.0000000000000000 | 3   |   5
 1 |       |   2 |     5.0000000000000000 | 3   |   5
 1 |       |   3 |     3.0000000000000000 | 1   |   1
 1 |       |   3 |     3.0000000000000000 | 1   |   1
 1 |       |   3 |     3.0000000000000000 | 3   |   1
 1 |       |   3 |     3.0000000000000000 | 3   |   1
 1 |       |   6 |     3.0000000000000000 | 3   |   1
 1 |       |   6 |     3.0000000000000000 | 3   |   1
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   1 |     2.0000000000000000 | 2   |   2
 2 |       |   1 |     2.0000000000000000 | 2   |   2
 2 |       |   1 |     2.0000000000000000 | 4   |   2
 2 |       |   1 |     2.0000000000000000 | 4   |   2
 2 |       |   1 |     4.0000000000000000 | 2   |   4
 2 |       |   1 |     4.0000000000000000 | 2   |   4
 2 |       |   1 |     4.0000000000000000 | 4   |   4
 2 |       |   1 |     4.0000000000000000 | 4   |   4
 2 |       |   1 |     6.0000000000000000 | 2   |   6
 2 |       |   1 |     6.0000000000000000 | 2   |   6
 2 |       |   1 |     6.0000000000000000 | 4   |   6
 2 |       |   1 |     6.0000000000000000 | 4   |   6
 2 |       |   2 |     2.0000000000000000 | 4   |   2
 2 |       |   2 |     2.0000000000000000 | 4   |   2
 2 |       |   2 |     4.0000000000000000 | 4   |   4
 2 |       |   2 |     4.0000000000000000 | 4   |   4
 2 |       |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   3 |     4.0000000000000000 | 2   |   2
 2 |       |   3 |     4.0000000000000000 | 2   |   2
 2 |       |   3 |     4.0000000000000000 | 4   |   2
 2 |       |   3 |     4.0000000000000000 | 4   |   2
 2 |       |   6 |     4.0000000000000000 | 4   |   2
 2 |       |   6 |     4.0000000000000000 | 4   |   2
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 1     |   4 |     2.5000000000000000 | 4   |   1
   | 1     |   4 |     2.5000000000000000 | 4   |   1
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 2     |   4 |     3.5000000000000000 | 4   |   2
   | 2     |   4 |     3.5000000000000000 | 4   |   2
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 3     |   4 |     4.5000000000000000 | 4   |   3
   | 3     |   4 |     4.5000000000000000 | 4   |   3
   |       |   1 | 1.00000000000000000000 | 1   |   1
   |       |   1 | 1.00000000000000000000 | 1   |   1
   |       |   1 | 1.00000000000000000000 | 3   |   1
   |       |   1 | 1.00000000000000000000 | 3   |   1
   |       |   1 |     2.0000000000000000 | 2   |   2
   |       |   1 |     2.0000000000000000 | 2   |   2
   |       |   1 |     2.0000000000000000 | 4   |   2
   |       |   1 |     2.0000000000000000 | 4   |   2
   |       |   1 |     3.0000000000000000 | 1   |   3
   |       |   1 |     3.0000000000000000 | 1   |   3
   |       |   1 |     3.0000000000000000 | 3   |   3
   |       |   1 |     3.0000000000000000 | 3   |   3
   |       |   1 |     4.0000000000000000 | 2   |   4
   |       |   1 |     4.0000000000000000 | 2   |   4
   |       |   1 |     4.0000000000000000 | 4   |   4
   |       |   1 |     4.0000000000000000 | 4   |   4
   |       |   1 |     5.0000000000000000 | 1   |   5
   |       |   1 |     5.0000000000000000 | 1   |   5
   |       |   1 |     5.0000000000000000 | 3   |   5
   |       |   1 |     5.0000000000000000 | 3   |   5
   |       |   1 |     6.0000000000000000 | 2   |   6
   |       |   1 |     6.0000000000000000 | 2   |   6
   |       |   1 |     6.0000000000000000 | 4   |   6
   |       |   1 |     6.0000000000000000 | 4   |   6
   |       |   2 | 1.00000000000000000000 | 3   |   1
   |       |   2 | 1.00000000000000000000 | 3   |   1
   |       |   2 |     2.0000000000000000 | 4   |   2
   |       |   2 |     2.0000000000000000 | 4   |   2
   |       |   2 |     3.0000000000000000 | 3   |   3
   |       |   2 |     3.0000000000000000 | 3   |   3
   |       |   2 |     4.0000000000000000 | 4   |   4
   |       |   2 |     4.0000000000000000 | 4   |   4
   |       |   2 |     5.0000000000000000 | 3   |   5
   |       |   2 |     5.0000000000000000 | 3   |   5
   |       |   2 |     6.0000000000000000 | 4   |   6
   |       |   2 |     6.0000000000000000 | 4   |   6
   |       |   3 |     3.0000000000000000 | 1   |   1
   |       |   3 |     3.0000000000000000 | 1   |   1
   |       |   3 |     3.0000000000000000 | 3   |   1
   |       |   3 |     3.0000000000000000 | 3   |   1
   |       |   3 |     4.0000000000000000 | 2   |   2
   |       |   3 |     4.0000000000000000 | 2   |   2
   |       |   3 |     4.0000000000000000 | 4   |   2
   |       |   3 |     4.0000000000000000 | 4   |   2
   |       |  12 |     3.5000000000000000 | 4   |   1
   |       |  12 |     3.5000000000000000 | 4   |   1
(232 rows)

select b, c, sum(a), avg(e), max(d), min(e) from row_aptest group by cube(b, c, d, e) order by 1, 2, 3, 4, 5, 6;
 b |   c   | sum |          avg           | max | min 
---+-------+-----+------------------------+-----+-----
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 1   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   1 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 1     |   2 | 1.00000000000000000000 | 3   |   1
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 1   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   1 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 2     |   2 |     5.0000000000000000 | 3   |   5
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 1   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   1 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 | 3     |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   1 | 1.00000000000000000000 | 1   |   1
 1 |       |   1 | 1.00000000000000000000 | 3   |   1
 1 |       |   1 |     3.0000000000000000 | 1   |   3
 1 |       |   1 |     3.0000000000000000 | 3   |   3
 1 |       |   1 |     5.0000000000000000 | 1   |   5
 1 |       |   1 |     5.0000000000000000 | 3   |   5
 1 |       |   2 | 1.00000000000000000000 | 3   |   1
 1 |       |   2 |     3.0000000000000000 | 3   |   3
 1 |       |   2 |     5.0000000000000000 | 3   |   5
 1 |       |   3 |     3.0000000000000000 | 1   |   1
 1 |       |   3 |     3.0000000000000000 | 3   |   1
 1 |       |   6 |     3.0000000000000000 | 3   |   1
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 2   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   1 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 1     |   2 |     4.0000000000000000 | 4   |   4
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 2   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   1 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 2     |   2 |     2.0000000000000000 | 4   |   2
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 2   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   1 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 | 3     |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   1 |     2.0000000000000000 | 2   |   2
 2 |       |   1 |     2.0000000000000000 | 4   |   2
 2 |       |   1 |     4.0000000000000000 | 2   |   4
 2 |       |   1 |     4.0000000000000000 | 4   |   4
 2 |       |   1 |     6.0000000000000000 | 2   |   6
 2 |       |   1 |     6.0000000000000000 | 4   |   6
 2 |       |   2 |     2.0000000000000000 | 4   |   2
 2 |       |   2 |     4.0000000000000000 | 4   |   4
 2 |       |   2 |     6.0000000000000000 | 4   |   6
 2 |       |   3 |     4.0000000000000000 | 2   |   2
 2 |       |   3 |     4.0000000000000000 | 4   |   2
 2 |       |   6 |     4.0000000000000000 | 4   |   2
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 1   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 | 1.00000000000000000000 | 3   |   1
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 2   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   1 |     4.0000000000000000 | 4   |   4
   | 1     |   2 | 1.00000000000000000000 | 3   |   1
   | 1     |   2 |     4.0000000000000000 | 4   |   4
   | 1     |   4 |     2.5000000000000000 | 4   |   1
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 2   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     2.0000000000000000 | 4   |   2
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 1   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   1 |     5.0000000000000000 | 3   |   5
   | 2     |   2 |     2.0000000000000000 | 4   |   2
   | 2     |   2 |     5.0000000000000000 | 3   |   5
   | 2     |   4 |     3.5000000000000000 | 4   |   2
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 1   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     3.0000000000000000 | 3   |   3
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 2   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   1 |     6.0000000000000000 | 4   |   6
   | 3     |   2 |     3.0000000000000000 | 3   |   3
   | 3     |   2 |     6.0000000000000000 | 4   |   6
   | 3     |   4 |     4.5000000000000000 | 4   |   3
   |       |   1 | 1.00000000000000000000 | 1   |   1
   |       |   1 | 1.00000000000000000000 | 3   |   1
   |       |   1 |     2.0000000000000000 | 2   |   2
   |       |   1 |     2.0000000000000000 | 4   |   2
   |       |   1 |     3.0000000000000000 | 1   |   3
   |       |   1 |     3.0000000000000000 | 3   |   3
   |       |   1 |     4.0000000000000000 | 2   |   4
   |       |   1 |     4.0000000000000000 | 4   |   4
   |       |   1 |     5.0000000000000000 | 1   |   5
   |       |   1 |     5.0000000000000000 | 3   |   5
   |       |   1 |     6.0000000000000000 | 2   |   6
   |       |   1 |     6.0000000000000000 | 4   |   6
   |       |   2 | 1.00000000000000000000 | 3   |   1
   |       |   2 |     2.0000000000000000 | 4   |   2
   |       |   2 |     3.0000000000000000 | 3   |   3
   |       |   2 |     4.0000000000000000 | 4   |   4
   |       |   2 |     5.0000000000000000 | 3   |   5
   |       |   2 |     6.0000000000000000 | 4   |   6
   |       |   3 |     3.0000000000000000 | 1   |   1
   |       |   3 |     3.0000000000000000 | 3   |   1
   |       |   3 |     4.0000000000000000 | 2   |   2
   |       |   3 |     4.0000000000000000 | 4   |   2
   |       |  12 |     3.5000000000000000 | 4   |   1
(116 rows)

delete from row_aptest;
--test include duplicate columns
insert into row_aptest values(generate_series(1, 10), generate_series(1, 10), generate_series(1, 10), generate_series(1, 10), generate_series(1, 10), '2012-12-16 10:11:15');
select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup(a, a, b) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 |    |   1 | 1.00000000000000000000 | 1   |   1
  1 |    |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 |    |   2 |     2.0000000000000000 | 2   |   2
  2 |    |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 |    |   3 |     3.0000000000000000 | 3   |   3
  3 |    |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 |    |   4 |     4.0000000000000000 | 4   |   4
  4 |    |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 |    |   5 |     5.0000000000000000 | 5   |   5
  5 |    |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 |    |   6 |     6.0000000000000000 | 6   |   6
  6 |    |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 |    |   7 |     7.0000000000000000 | 7   |   7
  7 |    |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 |    |   8 |     8.0000000000000000 | 8   |   8
  8 |    |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 |    |   9 |     9.0000000000000000 | 9   |   9
  9 |    |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 |    |  10 |    10.0000000000000000 | 10  |  10
 10 |    |  10 |    10.0000000000000000 | 10  |  10
    |    |  55 |     5.5000000000000000 | 9   |   1
(31 rows)

select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup((a, b), (a, b)) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
    |    |  55 |     5.5000000000000000 | 9   |   1
(21 rows)

select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by rollup((a, b), (c, d)) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
    |    |  55 |     5.5000000000000000 | 9   |   1
(21 rows)

select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by cube(a, a, b) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 |    |   1 | 1.00000000000000000000 | 1   |   1
  1 |    |   1 | 1.00000000000000000000 | 1   |   1
  1 |    |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 |    |   2 |     2.0000000000000000 | 2   |   2
  2 |    |   2 |     2.0000000000000000 | 2   |   2
  2 |    |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 |    |   3 |     3.0000000000000000 | 3   |   3
  3 |    |   3 |     3.0000000000000000 | 3   |   3
  3 |    |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 |    |   4 |     4.0000000000000000 | 4   |   4
  4 |    |   4 |     4.0000000000000000 | 4   |   4
  4 |    |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 |    |   5 |     5.0000000000000000 | 5   |   5
  5 |    |   5 |     5.0000000000000000 | 5   |   5
  5 |    |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 |    |   6 |     6.0000000000000000 | 6   |   6
  6 |    |   6 |     6.0000000000000000 | 6   |   6
  6 |    |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 |    |   7 |     7.0000000000000000 | 7   |   7
  7 |    |   7 |     7.0000000000000000 | 7   |   7
  7 |    |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 |    |   8 |     8.0000000000000000 | 8   |   8
  8 |    |   8 |     8.0000000000000000 | 8   |   8
  8 |    |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 |    |   9 |     9.0000000000000000 | 9   |   9
  9 |    |   9 |     9.0000000000000000 | 9   |   9
  9 |    |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 |    |  10 |    10.0000000000000000 | 10  |  10
 10 |    |  10 |    10.0000000000000000 | 10  |  10
 10 |    |  10 |    10.0000000000000000 | 10  |  10
    | 1  |   1 | 1.00000000000000000000 | 1   |   1
    | 10 |  10 |    10.0000000000000000 | 10  |  10
    | 2  |   2 |     2.0000000000000000 | 2   |   2
    | 3  |   3 |     3.0000000000000000 | 3   |   3
    | 4  |   4 |     4.0000000000000000 | 4   |   4
    | 5  |   5 |     5.0000000000000000 | 5   |   5
    | 6  |   6 |     6.0000000000000000 | 6   |   6
    | 7  |   7 |     7.0000000000000000 | 7   |   7
    | 8  |   8 |     8.0000000000000000 | 8   |   8
    | 9  |   9 |     9.0000000000000000 | 9   |   9
    |    |  55 |     5.5000000000000000 | 9   |   1
(71 rows)

select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by cube((a, b), (a, b)) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
    |    |  55 |     5.5000000000000000 | 9   |   1
(31 rows)

select a, b, sum(a), avg(e), max(d), min(e) from row_aptest group by cube((a, b), (c, d)) order by 1, 2, 3, 4, 5, 6;
 a  | b  | sum |          avg           | max | min 
----+----+-----+------------------------+-----+-----
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  1 | 1  |   1 | 1.00000000000000000000 | 1   |   1
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  2 | 2  |   2 |     2.0000000000000000 | 2   |   2
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  3 | 3  |   3 |     3.0000000000000000 | 3   |   3
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  4 | 4  |   4 |     4.0000000000000000 | 4   |   4
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  5 | 5  |   5 |     5.0000000000000000 | 5   |   5
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  6 | 6  |   6 |     6.0000000000000000 | 6   |   6
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  7 | 7  |   7 |     7.0000000000000000 | 7   |   7
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  8 | 8  |   8 |     8.0000000000000000 | 8   |   8
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
  9 | 9  |   9 |     9.0000000000000000 | 9   |   9
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
 10 | 10 |  10 |    10.0000000000000000 | 10  |  10
    |    |   1 | 1.00000000000000000000 | 1   |   1
    |    |   2 |     2.0000000000000000 | 2   |   2
    |    |   3 |     3.0000000000000000 | 3   |   3
    |    |   4 |     4.0000000000000000 | 4   |   4
    |    |   5 |     5.0000000000000000 | 5   |   5
    |    |   6 |     6.0000000000000000 | 6   |   6
    |    |   7 |     7.0000000000000000 | 7   |   7
    |    |   8 |     8.0000000000000000 | 8   |   8
    |    |   9 |     9.0000000000000000 | 9   |   9
    |    |  10 |    10.0000000000000000 | 10  |  10
    |    |  55 |     5.5000000000000000 | 9   |   1
(31 rows)

--include windowfunc
create table row_t1(a int, b int, c int);
insert into row_t1 values(generate_series(1, 10), generate_series(1, 10), generate_series(1, 10));
analyze row_t1;
explain (verbose on, costs off) select a, rank() over (partition by grouping(a)) from row_t1 group by rollup(a, b, c) order by 1, 2;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Output: a, (rank() OVER (PARTITION BY (GROUPING(a)))), b, c, (GROUPING(a))
   Sort Key: row_t1.a, (rank() OVER (PARTITION BY (GROUPING(row_t1.a))))
   ->  WindowAgg
         Output: a, rank() OVER (PARTITION BY (GROUPING(a))), b, c, (GROUPING(a))
         ->  Sort
               Output: a, b, c, (GROUPING(a))
               Sort Key: (GROUPING(row_t1.a))
               ->  GroupAggregate
                     Output: a, b, c, GROUPING(a)
                     Group By Key: row_t1.a, row_t1.b, row_t1.c
                     Group By Key: row_t1.a, row_t1.b
                     Group By Key: row_t1.a
                     Group By Key: ()
                     ->  Sort
                           Output: a, b, c
                           Sort Key: row_t1.a, row_t1.b, row_t1.c
                           ->  Seq Scan on hw_row_groupingsets.row_t1
                                 Output: a, b, c
(19 rows)

--include distinct
explain (verbose on, costs off) select avg(a), count(distinct b), count(distinct c) from row_t1 group by ();
                       QUERY PLAN                       
--------------------------------------------------------
 Aggregate
   Output: avg(a), count(DISTINCT b), count(DISTINCT c)
   Group By Key: ()
   ->  Seq Scan on hw_row_groupingsets.row_t1
         Output: a, b, c
(5 rows)

explain (verbose on, costs off) select a, count(distinct b), count(distinct b) from row_t1 group by rollup(a, b);
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: a, count(DISTINCT b), count(DISTINCT b), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: ()
   ->  Sort
         Output: a, b
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b
(10 rows)

explain (verbose on, costs off) select a, count(distinct b), count(distinct c) from row_t1 group by rollup(a, b);
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Output: a, count(DISTINCT b), count(DISTINCT c), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: ()
   ->  Sort
         Output: a, b, c
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b, c
(10 rows)

select avg(a), count(distinct b), count(distinct c) from row_t1 group by () order by 1, 2, 3;
        avg         | count | count 
--------------------+-------+-------
 5.5000000000000000 |    10 |    10
(1 row)

select a, count(distinct b), count(distinct b) from row_t1 group by rollup(a, b) order by 1, 2, 3;
 a  | count | count 
----+-------+-------
  1 |     1 |     1
  1 |     1 |     1
  2 |     1 |     1
  2 |     1 |     1
  3 |     1 |     1
  3 |     1 |     1
  4 |     1 |     1
  4 |     1 |     1
  5 |     1 |     1
  5 |     1 |     1
  6 |     1 |     1
  6 |     1 |     1
  7 |     1 |     1
  7 |     1 |     1
  8 |     1 |     1
  8 |     1 |     1
  9 |     1 |     1
  9 |     1 |     1
 10 |     1 |     1
 10 |     1 |     1
    |    10 |    10
(21 rows)

select a, count(distinct b), count(distinct c) from row_t1 group by rollup(a, b) order by 1, 2, 3;
 a  | count | count 
----+-------+-------
  1 |     1 |     1
  1 |     1 |     1
  2 |     1 |     1
  2 |     1 |     1
  3 |     1 |     1
  3 |     1 |     1
  4 |     1 |     1
  4 |     1 |     1
  5 |     1 |     1
  5 |     1 |     1
  6 |     1 |     1
  6 |     1 |     1
  7 |     1 |     1
  7 |     1 |     1
  8 |     1 |     1
  8 |     1 |     1
  9 |     1 |     1
  9 |     1 |     1
 10 |     1 |     1
 10 |     1 |     1
    |    10 |    10
(21 rows)

explain (verbose on, costs off) select min(distinct b), c from row_t1 group by b, rollup(a, c) order by 1, 2;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Output: (min(DISTINCT b)), c, b, a
   Sort Key: (min(DISTINCT row_t1.b)), row_t1.c
   ->  GroupAggregate
         Output: min(DISTINCT b), c, b, a
         Group By Key: row_t1.b, row_t1.a, row_t1.c
         Group By Key: row_t1.b, row_t1.a
         Group By Key: row_t1.b
         ->  Sort
               Output: c, b, a
               Sort Key: row_t1.b, row_t1.a, row_t1.c
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: c, b, a
(13 rows)

explain (verbose on, costs off) select a, sum(c), grouping(c) from row_t1 group by rollup(a, b), grouping sets(c) order by 1, 2, 3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: a, (sum(c)), (GROUPING(c)), b, c
   Sort Key: row_t1.a, (sum(row_t1.c)), (GROUPING(row_t1.c))
   ->  GroupAggregate
         Output: a, sum(c), GROUPING(c), b, c
         Group By Key: row_t1.c, row_t1.a, row_t1.b
         Group By Key: row_t1.c, row_t1.a
         Group By Key: row_t1.c
         ->  Sort
               Output: a, b, c
               Sort Key: row_t1.c, row_t1.a, row_t1.b
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, b, c
(13 rows)

explain (verbose on, costs off) select a, sum(c), grouping(c) from row_t1 group by rollup(a, b), cube(c) order by 1, 2, 3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: a, (sum(c)), (GROUPING(c)), b, c
   Sort Key: row_t1.a, (sum(row_t1.c)), (GROUPING(row_t1.c))
   ->  GroupAggregate
         Output: a, sum(c), GROUPING(c), b, c
         Group By Key: row_t1.a, row_t1.b, row_t1.c
         Group By Key: row_t1.a, row_t1.b
         Group By Key: row_t1.a
         Group By Key: ()
         Sort Key: row_t1.c, row_t1.a
           Group By Key: row_t1.c, row_t1.a
           Group By Key: row_t1.c
         ->  Sort
               Output: a, b, c
               Sort Key: row_t1.a, row_t1.b, row_t1.c
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, b, c
(17 rows)

select a, sum(c), grouping(c) from row_t1 group by rollup(a, b), grouping sets(c) order by 1, 2, 3;
 a  | sum | grouping 
----+-----+----------
  1 |   1 |        0
  1 |   1 |        0
  2 |   2 |        0
  2 |   2 |        0
  3 |   3 |        0
  3 |   3 |        0
  4 |   4 |        0
  4 |   4 |        0
  5 |   5 |        0
  5 |   5 |        0
  6 |   6 |        0
  6 |   6 |        0
  7 |   7 |        0
  7 |   7 |        0
  8 |   8 |        0
  8 |   8 |        0
  9 |   9 |        0
  9 |   9 |        0
 10 |  10 |        0
 10 |  10 |        0
    |   1 |        0
    |   2 |        0
    |   3 |        0
    |   4 |        0
    |   5 |        0
    |   6 |        0
    |   7 |        0
    |   8 |        0
    |   9 |        0
    |  10 |        0
(30 rows)

select a, sum(c), grouping(c) from row_t1 group by rollup(a, b), cube(c) order by 1, 2, 3;
 a  | sum | grouping 
----+-----+----------
  1 |   1 |        0
  1 |   1 |        0
  1 |   1 |        1
  1 |   1 |        1
  2 |   2 |        0
  2 |   2 |        0
  2 |   2 |        1
  2 |   2 |        1
  3 |   3 |        0
  3 |   3 |        0
  3 |   3 |        1
  3 |   3 |        1
  4 |   4 |        0
  4 |   4 |        0
  4 |   4 |        1
  4 |   4 |        1
  5 |   5 |        0
  5 |   5 |        0
  5 |   5 |        1
  5 |   5 |        1
  6 |   6 |        0
  6 |   6 |        0
  6 |   6 |        1
  6 |   6 |        1
  7 |   7 |        0
  7 |   7 |        0
  7 |   7 |        1
  7 |   7 |        1
  8 |   8 |        0
  8 |   8 |        0
  8 |   8 |        1
  8 |   8 |        1
  9 |   9 |        0
  9 |   9 |        0
  9 |   9 |        1
  9 |   9 |        1
 10 |  10 |        0
 10 |  10 |        0
 10 |  10 |        1
 10 |  10 |        1
    |   1 |        0
    |   2 |        0
    |   3 |        0
    |   4 |        0
    |   5 |        0
    |   6 |        0
    |   7 |        0
    |   8 |        0
    |   9 |        0
    |  10 |        0
    |  55 |        1
(51 rows)

explain (verbose on, costs off) select a, sum(c), grouping(c) from row_t1 group by cube(a, b), grouping sets(c) order by 1, 2, 3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: a, (sum(c)), (GROUPING(c)), b, c
   Sort Key: row_t1.a, (sum(row_t1.c)), (GROUPING(row_t1.c))
   ->  GroupAggregate
         Output: a, sum(c), GROUPING(c), b, c
         Group By Key: row_t1.c, row_t1.a, row_t1.b
         Group By Key: row_t1.c, row_t1.a
         Group By Key: row_t1.c
         Sort Key: row_t1.b, row_t1.c
           Group By Key: row_t1.b, row_t1.c
         ->  Sort
               Output: a, b, c
               Sort Key: row_t1.c, row_t1.a, row_t1.b
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, b, c
(15 rows)

select a, sum(c), grouping(c) from row_t1 group by cube(a, b), grouping sets(c) order by 1, 2, 3;
 a  | sum | grouping 
----+-----+----------
  1 |   1 |        0
  1 |   1 |        0
  2 |   2 |        0
  2 |   2 |        0
  3 |   3 |        0
  3 |   3 |        0
  4 |   4 |        0
  4 |   4 |        0
  5 |   5 |        0
  5 |   5 |        0
  6 |   6 |        0
  6 |   6 |        0
  7 |   7 |        0
  7 |   7 |        0
  8 |   8 |        0
  8 |   8 |        0
  9 |   9 |        0
  9 |   9 |        0
 10 |  10 |        0
 10 |  10 |        0
    |   1 |        0
    |   1 |        0
    |   2 |        0
    |   2 |        0
    |   3 |        0
    |   3 |        0
    |   4 |        0
    |   4 |        0
    |   5 |        0
    |   5 |        0
    |   6 |        0
    |   6 |        0
    |   7 |        0
    |   7 |        0
    |   8 |        0
    |   8 |        0
    |   9 |        0
    |   9 |        0
    |  10 |        0
    |  10 |        0
(40 rows)

explain (verbose on, costs off) select a, sum(c), grouping(c) from row_t1 group by cube(a, b), grouping sets(c) order by 1, 2, 3;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: a, (sum(c)), (GROUPING(c)), b, c
   Sort Key: row_t1.a, (sum(row_t1.c)), (GROUPING(row_t1.c))
   ->  GroupAggregate
         Output: a, sum(c), GROUPING(c), b, c
         Group By Key: row_t1.c, row_t1.a, row_t1.b
         Group By Key: row_t1.c, row_t1.a
         Group By Key: row_t1.c
         Sort Key: row_t1.b, row_t1.c
           Group By Key: row_t1.b, row_t1.c
         ->  Sort
               Output: a, b, c
               Sort Key: row_t1.c, row_t1.a, row_t1.b
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, b, c
(15 rows)

select a, sum(c), grouping(c) from row_t1 group by cube(a, b), grouping sets(c) order by 1, 2, 3;
 a  | sum | grouping 
----+-----+----------
  1 |   1 |        0
  1 |   1 |        0
  2 |   2 |        0
  2 |   2 |        0
  3 |   3 |        0
  3 |   3 |        0
  4 |   4 |        0
  4 |   4 |        0
  5 |   5 |        0
  5 |   5 |        0
  6 |   6 |        0
  6 |   6 |        0
  7 |   7 |        0
  7 |   7 |        0
  8 |   8 |        0
  8 |   8 |        0
  9 |   9 |        0
  9 |   9 |        0
 10 |  10 |        0
 10 |  10 |        0
    |   1 |        0
    |   1 |        0
    |   2 |        0
    |   2 |        0
    |   3 |        0
    |   3 |        0
    |   4 |        0
    |   4 |        0
    |   5 |        0
    |   5 |        0
    |   6 |        0
    |   6 |        0
    |   7 |        0
    |   7 |        0
    |   8 |        0
    |   8 |        0
    |   9 |        0
    |   9 |        0
    |  10 |        0
    |  10 |        0
(40 rows)

explain (verbose on, costs off) select a, sum(c) from row_t1 group by grouping sets(a);
                  QUERY PLAN                  
----------------------------------------------
 HashAggregate
   Output: a, sum(c)
   Group By Key: row_t1.a
   ->  Seq Scan on hw_row_groupingsets.row_t1
         Output: a, c
(5 rows)

select a, sum(c)  from row_t1 group by grouping sets(a) order by 1, 2;
 a  | sum 
----+-----
  1 |   1
  2 |   2
  3 |   3
  4 |   4
  5 |   5
  6 |   6
  7 |   7
  8 |   8
  9 |   9
 10 |  10
(10 rows)

explain (verbose on, costs off) select a, sum(c)  from row_t1 group by cube(a, b), grouping sets(a);
                     QUERY PLAN                     
----------------------------------------------------
 GroupAggregate
   Output: a, sum(c), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: row_t1.a
   ->  Sort
         Output: a, b, c
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b, c
(11 rows)

select a, sum(c)  from row_t1 group by cube(a, b), grouping sets(a) order by 1, 2;
 a  | sum 
----+-----
  1 |   1
  1 |   1
  1 |   1
  1 |   1
  2 |   2
  2 |   2
  2 |   2
  2 |   2
  3 |   3
  3 |   3
  3 |   3
  3 |   3
  4 |   4
  4 |   4
  4 |   4
  4 |   4
  5 |   5
  5 |   5
  5 |   5
  5 |   5
  6 |   6
  6 |   6
  6 |   6
  6 |   6
  7 |   7
  7 |   7
  7 |   7
  7 |   7
  8 |   8
  8 |   8
  8 |   8
  8 |   8
  9 |   9
  9 |   9
  9 |   9
  9 |   9
 10 |  10
 10 |  10
 10 |  10
 10 |  10
(40 rows)

explain (verbose on, costs off) select a, sum(c) from row_t1 group by cube(a, b), a;
                     QUERY PLAN                     
----------------------------------------------------
 GroupAggregate
   Output: a, sum(c), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: row_t1.a
   ->  Sort
         Output: a, b, c
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b, c
(11 rows)

select a, sum(c)  from row_t1 group by cube(a, b), a order by 1, 2;
 a  | sum 
----+-----
  1 |   1
  1 |   1
  1 |   1
  1 |   1
  2 |   2
  2 |   2
  2 |   2
  2 |   2
  3 |   3
  3 |   3
  3 |   3
  3 |   3
  4 |   4
  4 |   4
  4 |   4
  4 |   4
  5 |   5
  5 |   5
  5 |   5
  5 |   5
  6 |   6
  6 |   6
  6 |   6
  6 |   6
  7 |   7
  7 |   7
  7 |   7
  7 |   7
  8 |   8
  8 |   8
  8 |   8
  8 |   8
  9 |   9
  9 |   9
  9 |   9
  9 |   9
 10 |  10
 10 |  10
 10 |  10
 10 |  10
(40 rows)

explain (verbose on, costs off) select a, sum(c)  from row_t1 group by rollup(a, b), grouping sets(a);
                     QUERY PLAN                     
----------------------------------------------------
 GroupAggregate
   Output: a, sum(c), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: row_t1.a
   ->  Sort
         Output: a, b, c
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b, c
(10 rows)

select a, sum(c)  from row_t1 group by rollup(a, b), grouping sets(a) order by 1, 2;
 a  | sum 
----+-----
  1 |   1
  1 |   1
  1 |   1
  2 |   2
  2 |   2
  2 |   2
  3 |   3
  3 |   3
  3 |   3
  4 |   4
  4 |   4
  4 |   4
  5 |   5
  5 |   5
  5 |   5
  6 |   6
  6 |   6
  6 |   6
  7 |   7
  7 |   7
  7 |   7
  8 |   8
  8 |   8
  8 |   8
  9 |   9
  9 |   9
  9 |   9
 10 |  10
 10 |  10
 10 |  10
(30 rows)

explain (verbose on, costs off) select a, sum(c) from row_t1 group by rollup(a, b), a;
                     QUERY PLAN                     
----------------------------------------------------
 GroupAggregate
   Output: a, sum(c), b
   Group By Key: row_t1.a, row_t1.b
   Group By Key: row_t1.a
   Group By Key: row_t1.a
   ->  Sort
         Output: a, b, c
         Sort Key: row_t1.a, row_t1.b
         ->  Seq Scan on hw_row_groupingsets.row_t1
               Output: a, b, c
(10 rows)

select a, sum(c)  from row_t1 group by rollup(a, b), a order by 1, 2;
 a  | sum 
----+-----
  1 |   1
  1 |   1
  1 |   1
  2 |   2
  2 |   2
  2 |   2
  3 |   3
  3 |   3
  3 |   3
  4 |   4
  4 |   4
  4 |   4
  5 |   5
  5 |   5
  5 |   5
  6 |   6
  6 |   6
  6 |   6
  7 |   7
  7 |   7
  7 |   7
  8 |   8
  8 |   8
  8 |   8
  9 |   9
  9 |   9
  9 |   9
 10 |  10
 10 |  10
 10 |  10
(30 rows)

create index row_t1_index on row_t1(a);
explain (verbose on, costs off)select max(a) from row_t1 group by ();
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   Output: max(a)
   Group By Key: ()
   ->  Seq Scan on hw_row_groupingsets.row_t1
         Output: a, b, c
(5 rows)

explain (verbose on, costs off)select max(a) from row_t1 group by grouping sets(());
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   Output: max(a)
   Group By Key: ()
   ->  Seq Scan on hw_row_groupingsets.row_t1
         Output: a, b, c
(5 rows)

select max(a) from row_t1 group by ();
 max 
-----
  10
(1 row)

select max(a) from row_t1 group by grouping sets(());
 max 
-----
  10
(1 row)

explain (verbose on, costs off)select max(a) from row_t1 group by grouping sets((), ());
                  QUERY PLAN                  
----------------------------------------------
 Aggregate
   Output: max(a)
   Group By Key: ()
   Group By Key: ()
   ->  Seq Scan on hw_row_groupingsets.row_t1
         Output: a, b, c
(6 rows)

explain (verbose on, costs off)
select a, b, c from row_t1 where b = c group by grouping sets((a, b)), rollup(c) order by 1, 2, 3;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Output: a, b, c
   Sort Key: row_t1.a, row_t1.b, row_t1.c
   ->  GroupAggregate
         Output: a, b, c
         Group By Key: row_t1.a, row_t1.b, row_t1.c
         Group By Key: row_t1.a, row_t1.b
         ->  Sort
               Output: a, b, c
               Sort Key: row_t1.a, row_t1.b, row_t1.c
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, b, c
                     Filter: (row_t1.b = row_t1.c)
(13 rows)

explain (verbose on, costs off)
SELECT a Column_012, 25 Column_014 FROM row_t1 GROUP BY CUBE(Column_012, Column_014) ORDER BY Column_014, Column_012 ASC;
                        QUERY PLAN                        
----------------------------------------------------------
 Sort
   Output: a, (25)
   Sort Key: (25), row_t1.a
   ->  GroupAggregate
         Output: a, (25)
         Group By Key: row_t1.a, (25)
         Group By Key: row_t1.a
         Group By Key: ()
         Sort Key: (25)
           Group By Key: (25)
         ->  Sort
               Output: a, (25)
               Sort Key: row_t1.a, (25)
               ->  Seq Scan on hw_row_groupingsets.row_t1
                     Output: a, 25
(15 rows)

explain (costs off) select distinct a, b, c from row_t1 group by grouping sets((a, b)), rollup(c) order by 1, 2, 3;
                 QUERY PLAN                 
--------------------------------------------
 Unique
   ->  Sort
         Sort Key: a, b, c
         ->  GroupAggregate
               Group By Key: a, b, c
               Group By Key: a, b
               ->  Sort
                     Sort Key: a, b, c
                     ->  Seq Scan on row_t1
(9 rows)

explain (costs off) select a, b, c, 10 from row_t1 where a = b group by grouping sets((a, b)), rollup(c) order by 1, 2, 3, 4;
              QUERY PLAN              
--------------------------------------
 Sort
   Sort Key: a, c
   ->  GroupAggregate
         Group By Key: a, b, c
         Group By Key: a, b
         ->  Sort
               Sort Key: a, b, c
               ->  Seq Scan on row_t1
                     Filter: (a = b)
(9 rows)

explain (costs off) select a, b, c, 10 from row_t1 where a = b group by grouping sets(a), rollup(b, c) order by 1, 2, 3, 4;
              QUERY PLAN              
--------------------------------------
 Sort
   Sort Key: a, b, c
   ->  GroupAggregate
         Group By Key: a, b, c
         Group By Key: a, b
         Group By Key: a
         ->  Sort
               Sort Key: a, b, c
               ->  Seq Scan on row_t1
                     Filter: (a = b)
(10 rows)

explain (costs off) select a, b, c, 10 as col from row_t1 where a = b group by grouping sets((a, b)), rollup(c, col) order by 1, 2, 3, 4;
              QUERY PLAN               
---------------------------------------
 Sort
   Sort Key: a, c, (10)
   ->  GroupAggregate
         Group By Key: a, b, c, (10)
         Group By Key: a, b, c
         Group By Key: a, b
         ->  Sort
               Sort Key: a, b, c, (10)
               ->  Seq Scan on row_t1
                     Filter: (a = b)
(10 rows)

explain (costs off) select a, b, c, 10 as col from row_t1 where a = b group by grouping sets(a), rollup(b, c, col) order by 1, 2, 3, 4;
              QUERY PLAN               
---------------------------------------
 Sort
   Sort Key: a, b, c, (10)
   ->  GroupAggregate
         Group By Key: a, b, c, (10)
         Group By Key: a, b, c
         Group By Key: a, b
         Group By Key: a
         ->  Sort
               Sort Key: a, b, c, (10)
               ->  Seq Scan on row_t1
                     Filter: (a = b)
(11 rows)

create table location(location_id integer );
create table alert_emails(item_id varchar(20) not null, location_id integer null);
 
insert into alert_emails values ('a',  0);
insert into alert_emails values ('b', null);
insert into alert_emails values ('c',  2);
insert into alert_emails values ('d',  3);
insert into location values (0);
insert into location values (1);
insert into location values (2);
insert into location values (3);
analyze location;
analyze alert_emails;
explain (verbose on, costs off)
select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by grouping sets(c1,c2) 
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id, ale.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: loc.location_id
         Sort Key: ale.location_id
           Group By Key: ale.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: loc.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(20 rows)

select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by grouping sets(c1,c2) 
order by 1, 2;
 c1 | c2 
----+----
  0 |   
  2 |   
  3 |   
    |  0
    |  2
    |  3
(6 rows)

explain (verbose on, costs off)
select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c1 = c2
group by grouping sets(c1,c2) 
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id, ale.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: loc.location_id
         Sort Key: ale.location_id
           Group By Key: ale.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: loc.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(20 rows)

select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c1 = c2
group by grouping sets(c1,c2) 
order by 1, 2;
 c1 | c2 
----+----
  0 |   
  2 |   
  3 |   
    |  0
    |  2
    |  3
(6 rows)

explain (verbose on, costs off)
select loc.location_id as c1, ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c1, c2, grouping sets(c1,c2)
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: loc.location_id, ale.location_id
         Group By Key: loc.location_id, ale.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: loc.location_id, ale.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(19 rows)

select loc.location_id as c1, ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c1, c2, grouping sets(c1,c2)
order by 1, 2;
 c1 | c2 
----+----
  0 |  0
  0 |  0
  2 |  2
  2 |  2
  3 |  3
  3 |  3
(6 rows)

explain (verbose on, costs off)
select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c1, grouping sets(c1,c2)
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id, ale.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: loc.location_id, ale.location_id
         Group By Key: loc.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: loc.location_id, ale.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(19 rows)

select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c1, grouping sets(c1,c2)
order by 1, 2;
 c1 | c2 
----+----
  0 |  0
  0 |   
  2 |  2
  2 |   
  3 |  3
  3 |   
(6 rows)

explain (verbose on, costs off)
select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c2, grouping sets(c1,c2)
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id, ale.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: ale.location_id, loc.location_id
         Group By Key: ale.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: ale.location_id, loc.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(19 rows)

select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by c2, grouping sets(c1,c2)
order by 1, 2;
 c1 | c2 
----+----
  0 |  0
  2 |  2
  3 |  3
    |  0
    |  2
    |  3
(6 rows)

explain (verbose on, costs off)
select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by grouping sets(c1, c2)
order by 1, 2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: loc.location_id, ale.location_id
   Sort Key: loc.location_id, ale.location_id
   ->  GroupAggregate
         Output: loc.location_id, ale.location_id
         Group By Key: loc.location_id
         Sort Key: ale.location_id
           Group By Key: ale.location_id
         ->  Sort
               Output: loc.location_id, ale.location_id
               Sort Key: loc.location_id
               ->  Hash Join
                     Output: loc.location_id, ale.location_id
                     Hash Cond: (loc.location_id = ale.location_id)
                     ->  Seq Scan on hw_row_groupingsets.location loc
                           Output: loc.location_id
                     ->  Hash
                           Output: ale.location_id
                           ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                 Output: ale.location_id
(20 rows)

select loc.location_id as c1,ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
group by grouping sets(c1, c2)
order by 1, 2;
 c1 | c2 
----+----
  0 |   
  2 |   
  3 |   
    |  0
    |  2
    |  3
(6 rows)

explain (verbose on, costs off)								  
select c1 from (select loc.location_id as c1, ale.location_id as c2 from location as loc, 
alert_emails ale where c2 = c1 group by c2, grouping sets (c1, c2)) as tt
group by c1 order by c1;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Group
   Output: tt.c1
   Group By Key: tt.c1
   ->  Sort
         Output: tt.c1
         Sort Key: tt.c1
         ->  Subquery Scan on tt
               Output: tt.c1
               ->  GroupAggregate
                     Output: loc.location_id, ale.location_id
                     Group By Key: ale.location_id, loc.location_id
                     Group By Key: ale.location_id
                     ->  Sort
                           Output: loc.location_id, ale.location_id
                           Sort Key: ale.location_id, loc.location_id
                           ->  Hash Join
                                 Output: loc.location_id, ale.location_id
                                 Hash Cond: (loc.location_id = ale.location_id)
                                 ->  Seq Scan on hw_row_groupingsets.location loc
                                       Output: loc.location_id
                                 ->  Hash
                                       Output: ale.location_id
                                       ->  Seq Scan on hw_row_groupingsets.alert_emails ale
                                             Output: ale.location_id
(24 rows)

select c1 from (select loc.location_id as c1, ale.location_id as c2 from location as loc, 
alert_emails ale where c2 = c1 group by c2, grouping sets (c1, c2)) as tt
group by c1 order by c1;
 c1 
----
  0
  2
  3
   
(4 rows)

explain (costs off) select 1 from row_t1
join
(select loc.location_id as c1, ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
 group by c2, grouping sets(c1,c2)) as tt
on (row_t1.a = tt.c1);
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Hash Join
   Hash Cond: (row_t1.a = tt.c1)
   ->  Seq Scan on row_t1
   ->  Hash
         ->  Subquery Scan on tt
               ->  GroupAggregate
                     Group By Key: ale.location_id, loc.location_id
                     Group By Key: ale.location_id
                     ->  Sort
                           Sort Key: ale.location_id, loc.location_id
                           ->  Hash Join
                                 Hash Cond: (loc.location_id = ale.location_id)
                                 ->  Seq Scan on location loc
                                 ->  Hash
                                       ->  Seq Scan on alert_emails ale
(15 rows)

select 1 from row_t1
join
(select loc.location_id as c1, ale.location_id as c2
from location as loc, alert_emails ale
where c2 = c1
 group by c2, grouping sets(c1,c2)) as tt
on (row_t1.a = tt.c1);
 ?column? 
----------
        1
        1
(2 rows)

-- test replacing dis keys for rollup()
explain (costs off)
SELECT v1.location_id
, v4.location_id
from (
select cast(location_id as text) location_id
from (select loc.location_id, ale.location_id l2
from location loc, alert_emails ale
limit 100)
) as v1,
(select location_id, min(location_id) from location
group by 1) as v4
where v1.location_id=v4.location_id
group by 1, 2, cube(v1.location_id, v1.location_id+5);
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group By Key: ((loc.location_id)::text), v4.location_id, ((((loc.location_id)::text)::bigint + 5))
   Group By Key: ((loc.location_id)::text), v4.location_id, ((((loc.location_id)::text)::bigint + 5))
   Group By Key: ((loc.location_id)::text), v4.location_id
   Group By Key: ((loc.location_id)::text), v4.location_id
   ->  Sort
         Sort Key: ((loc.location_id)::text), v4.location_id, ((((loc.location_id)::text)::bigint + 5))
         ->  Hash Join
               Hash Cond: (((loc.location_id)::text)::bigint = v4.location_id)
               ->  Limit
                     ->  Nested Loop
                           ->  Seq Scan on location loc
                           ->  Materialize
                                 ->  Seq Scan on alert_emails ale
               ->  Hash
                     ->  Subquery Scan on v4
                           ->  HashAggregate
                                 Group By Key: location.location_id
                                 ->  Seq Scan on location
(19 rows)

explain (costs off)
SELECT v1.location_id
from (
select cast(location_id as text) location_id
from (select location_id, max(location_id)
from location
group by 1)
) as v1,
(select location_id, min(location_id) from location
group by 1) as v4
where v1.location_id=v4.location_id
group by 1, cube(v1.location_id, v1.location_id+5); 
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group By Key: ((hw_row_groupingsets.location.location_id)::text), ((((hw_row_groupingsets.location.location_id)::text)::bigint + 5))
   Group By Key: ((hw_row_groupingsets.location.location_id)::text), ((((hw_row_groupingsets.location.location_id)::text)::bigint + 5))
   Group By Key: ((hw_row_groupingsets.location.location_id)::text)
   Group By Key: ((hw_row_groupingsets.location.location_id)::text)
   ->  Sort
         Sort Key: ((hw_row_groupingsets.location.location_id)::text), ((((hw_row_groupingsets.location.location_id)::text)::bigint + 5))
         ->  Hash Join
               Hash Cond: (((hw_row_groupingsets.location.location_id)::text)::bigint = v4.location_id)
               ->  HashAggregate
                     Group By Key: hw_row_groupingsets.location.location_id
                     ->  Seq Scan on location
               ->  Hash
                     ->  Subquery Scan on v4
                           ->  HashAggregate
                                 Group By Key: hw_row_groupingsets.location.location_id
                                 ->  Seq Scan on location
(17 rows)

create table location_type
(
    location_type_cd varchar(50) not null ,
    location_type_desc varchar(250) not null 
);
 
create table channel
(
    channel_cd varchar(50) not null ,
    channel_desc varchar(250) null
);
explain (costs off)
SELECT location_type_desc 
FROM location_type , channel                 
WHERE location_type_desc = channel_desc
GROUP BY GROUPING SETS(location_type_desc, location_type_desc);
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 GroupAggregate
   Group By Key: location_type.location_type_desc
   Group By Key: location_type.location_type_desc
   ->  Sort
         Sort Key: location_type.location_type_desc
         ->  Hash Join
               Hash Cond: ((location_type.location_type_desc)::text = (channel.channel_desc)::text)
               ->  Seq Scan on location_type
               ->  Hash
                     ->  Seq Scan on channel
(10 rows)

drop table location_type;
drop table channel;
drop table row_aptest;
drop table row_t1;
drop table row_gstest1;
drop table row_gstest2;
drop table row_gstest3;
drop table row_gstest_empty;
drop table location;
drop table alert_emails;
drop schema hw_row_groupingsets cascade;
