/*
################################################################################
# TESTCASE NAME : plan_table
# COMPONENT(S)  : plan_table:复杂查询 tpcds 列存测试
################################################################################
*/
--I1.建表
--
-- Load TPC-DS schema to GaussDB Database
--
create schema tpcds_col;
set current_schema=tpcds_col;
--
-- Name: customer_address; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table customer_address
(
    ca_address_sk             integer               not null,
    ca_address_id             char(16)              not null,
    ca_street_number          char(10)                      ,
    ca_street_name            varchar(60)                   ,
    ca_street_type            char(15)                      ,
    ca_suite_number           char(10)                      ,
    ca_city                   varchar(60)                   ,
    ca_county                 varchar(30)                   ,
    ca_state                  char(2)                       ,
    ca_zip                    char(10)                      ,
    ca_country                varchar(20)                   ,
    ca_gmt_offset             decimal(5,2)                  ,
    ca_location_type          char(20)                     
) 
 with (orientation = column)
;
--
-- Name: customer_demographics; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table customer_demographics
(
    cd_demo_sk                integer               not null,
    cd_gender                 char(1)                       ,
    cd_marital_status         char(1)                       ,
    cd_education_status       char(20)                      ,
    cd_purchase_estimate      integer                       ,
    cd_credit_rating          char(10)                      ,
    cd_dep_count              integer                       ,
    cd_dep_employed_count     integer                       ,
    cd_dep_college_count      integer                       
) 
 with (orientation = column)
;
--
-- Name: date_dim; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table date_dim
(
    d_date_sk                 integer               not null,
    d_date_id                 char(16)              not null,
    d_date                    date                          ,
    d_month_seq               integer                       ,
    d_week_seq                integer                       ,
    d_quarter_seq             integer                       ,
    d_year                    integer                       ,
    d_dow                     integer                       ,
    d_moy                     integer                       ,
    d_dom                     integer                       ,
    d_qoy                     integer                       ,
    d_fy_year                 integer                       ,
    d_fy_quarter_seq          integer                       ,
    d_fy_week_seq             integer                       ,
    d_day_name                char(9)                       ,
    d_quarter_name            char(6)                       ,
    d_holiday                 char(1)                       ,
    d_weekend                 char(1)                       ,
    d_following_holiday       char(1)                       ,
    d_first_dom               integer                       ,
    d_last_dom                integer                       ,
    d_same_day_ly             integer                       ,
    d_same_day_lq             integer                       ,
    d_current_day             char(1)                       ,
    d_current_week            char(1)                       ,
    d_current_month           char(1)                       ,
    d_current_quarter         char(1)                       ,
    d_current_year            char(1)                       
) 
 with (orientation = column)
;
--
-- Name: warehouse; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table warehouse
(
    w_warehouse_sk            integer               not null,
    w_warehouse_id            char(16)              not null,
    w_warehouse_name          varchar(20)                   ,
    w_warehouse_sq_ft         integer                       ,
    w_street_number           char(10)                      ,
    w_street_name             varchar(60)                   ,
    w_street_type             char(15)                      ,
    w_suite_number            char(10)                      ,
    w_city                    varchar(60)                   ,
    w_county                  varchar(30)                   ,
    w_state                   char(2)                       ,
    w_zip                     char(10)                      ,
    w_country                 varchar(20)                   ,
    w_gmt_offset              decimal(5,2)                  
) 
 with (orientation = column)
;
--
-- Name: ship_mode; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table ship_mode
(
    sm_ship_mode_sk           integer               not null,
    sm_ship_mode_id           char(16)              not null,
    sm_type                   char(30)                      ,
    sm_code                   char(10)                      ,
    sm_carrier                char(20)                      ,
    sm_contract               char(20)                      
) 
 with (orientation = column)
;
--
-- Name: time_dim; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table time_dim
(
    t_time_sk                 integer               not null,
    t_time_id                 char(16)              not null,
    t_time                    integer                       ,
    t_hour                    integer                       ,
    t_minute                  integer                       ,
    t_second                  integer                       ,
    t_am_pm                   char(2)                       ,
    t_shift                   char(20)                      ,
    t_sub_shift               char(20)                      ,
    t_meal_time               char(20)                     
) 
 with (orientation = column)
;
--
-- Name: reason; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table reason
(
    r_reason_sk               integer               not null,
    r_reason_id               char(16)              not null,
    r_reason_desc             char(100)                    
) 
 with (orientation = column)
;
--
-- Name: income_band; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer                       
) 
 with (orientation = column)
 ;
--
-- Name: item; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_rec_start_date          date                          ,
    i_rec_end_date            date                          ,
    i_item_desc               varchar(200)                  ,
    i_current_price           decimal(7,2)                  ,
    i_wholesale_cost          decimal(7,2)                  ,
    i_brand_id                integer                       ,
    i_brand                   char(50)                      ,
    i_class_id                integer                       ,
    i_class                   char(50)                      ,
    i_category_id             integer                       ,
    i_category                char(50)                      ,
    i_manufact_id             integer                       ,
    i_manufact                char(50)                      ,
    i_size                    char(20)                      ,
    i_formulation             char(20)                      ,
    i_color                   char(20)                      ,
    i_units                   char(10)                      ,
    i_container               char(10)                      ,
    i_manager_id              integer                       ,
    i_product_name            char(50)                      
) 
 with (orientation = column)
;
--
-- Name: store; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_rec_start_date          date                          ,
    s_rec_end_date            date                          ,
    s_closed_date_sk          integer                       ,
    s_store_name              varchar(50)                   ,
    s_number_employees        integer                       ,
    s_floor_space             integer                       ,
    s_hours                   char(20)                      ,
    s_manager                 varchar(40)                   ,
    s_market_id               integer                       ,
    s_geography_class         varchar(100)                  ,
    s_market_desc             varchar(100)                  ,
    s_market_manager          varchar(40)                   ,
    s_division_id             integer                       ,
    s_division_name           varchar(50)                   ,
    s_company_id              integer                       ,
    s_company_name            varchar(50)                   ,
    s_street_number           varchar(10)                   ,
    s_street_name             varchar(60)                   ,
    s_street_type             char(15)                      ,
    s_suite_number            char(10)                      ,
    s_city                    varchar(60)                   ,
    s_county                  varchar(30)                   ,
    s_state                   char(2)                       ,
    s_zip                     char(10)                      ,
    s_country                 varchar(20)                   ,
    s_gmt_offset              decimal(5,2)                  ,
    s_tax_precentage          decimal(5,2)                  
) 
 with (orientation = column)
 ;
--
-- Name: call_center; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_rec_start_date         date                          ,
    cc_rec_end_date           date                          ,
    cc_closed_date_sk         integer                       ,
    cc_open_date_sk           integer                       ,
    cc_name                   varchar(50)                   ,
    cc_class                  varchar(50)                   ,
    cc_employees              integer                       ,
    cc_sq_ft                  integer                       ,
    cc_hours                  char(20)                      ,
    cc_manager                varchar(40)                   ,
    cc_mkt_id                 integer                       ,
    cc_mkt_class              char(50)                      ,
    cc_mkt_desc               varchar(100)                  ,
    cc_market_manager         varchar(40)                   ,
    cc_division               integer                       ,
    cc_division_name          varchar(50)                   ,
    cc_company                integer                       ,
    cc_company_name           char(50)                      ,
    cc_street_number          char(10)                      ,
    cc_street_name            varchar(60)                   ,
    cc_street_type            char(15)                      ,
    cc_suite_number           char(10)                      ,
    cc_city                   varchar(60)                   ,
    cc_county                 varchar(30)                   ,
    cc_state                  char(2)                       ,
    cc_zip                    char(10)                      ,
    cc_country                varchar(20)                   ,
    cc_gmt_offset             decimal(5,2)                  ,
    cc_tax_percentage         decimal(5,2)                  
) 
 with (orientation = column)
;
--
-- Name: customer; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table customer
(
    c_customer_sk             integer               not null,
    c_customer_id             char(16)              not null,
    c_current_cdemo_sk        integer                       ,
    c_current_hdemo_sk        integer                       ,
    c_current_addr_sk         integer                       ,
    c_first_shipto_date_sk    integer                       ,
    c_first_sales_date_sk     integer                       ,
    c_salutation              char(10)                      ,
    c_first_name              char(20)                      ,
    c_last_name               char(30)                      ,
    c_preferred_cust_flag     char(1)                       ,
    c_birth_day               integer                       ,
    c_birth_month             integer                       ,
    c_birth_year              integer                       ,
    c_birth_country           varchar(20)                   ,
    c_login                   char(13)                      ,
    c_email_address           char(50)                      ,
    c_last_review_date        char(10)                      
) 
 with (orientation = column)
;
--
-- Name: web_site; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table web_site
(
    web_site_sk               integer               not null,
    web_site_id               char(16)              not null,
    web_rec_start_date        date                          ,
    web_rec_end_date          date                          ,
    web_name                  varchar(50)                   ,
    web_open_date_sk          integer                       ,
    web_close_date_sk         integer                       ,
    web_class                 varchar(50)                   ,
    web_manager               varchar(40)                   ,
    web_mkt_id                integer                       ,
    web_mkt_class             varchar(50)                   ,
    web_mkt_desc              varchar(100)                  ,
    web_market_manager        varchar(40)                   ,
    web_company_id            integer                       ,
    web_company_name          char(50)                      ,
    web_street_number         char(10)                      ,
    web_street_name           varchar(60)                   ,
    web_street_type           char(15)                      ,
    web_suite_number          char(10)                      ,
    web_city                  varchar(60)                   ,
    web_county                varchar(30)                   ,
    web_state                 char(2)                       ,
    web_zip                   char(10)                      ,
    web_country               varchar(20)                   ,
    web_gmt_offset            decimal(5,2)                  ,
    web_tax_percentage        decimal(5,2)                  
) 
 with (orientation = column)
;
--
-- Name: store_returns; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table store_returns
(
    sr_returned_date_sk       integer                       ,
    sr_return_time_sk         integer                       ,
    sr_item_sk                integer               not null,
    sr_customer_sk            integer                       ,
    sr_cdemo_sk               integer                       ,
    sr_hdemo_sk               integer                       ,
    sr_addr_sk                integer                       ,
    sr_store_sk               integer                       ,
    sr_reason_sk              integer                       ,
    sr_ticket_number          bigint               not null,
    sr_return_quantity        integer                       ,
    sr_return_amt             decimal(7,2)                  ,
    sr_return_tax             decimal(7,2)                  ,
    sr_return_amt_inc_tax     decimal(7,2)                  ,
    sr_fee                    decimal(7,2)                  ,
    sr_return_ship_cost       decimal(7,2)                  ,
    sr_refunded_cash          decimal(7,2)                  ,
    sr_reversed_charge        decimal(7,2)                  ,
    sr_store_credit           decimal(7,2)                  ,
    sr_net_loss               decimal(7,2)                  
) 
 with (orientation = column)
;
--
-- Name: household_demographics; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table household_demographics
(
    hd_demo_sk                integer               not null,
    hd_income_band_sk         integer                       ,
    hd_buy_potential          char(15)                      ,
    hd_dep_count              integer                       ,
    hd_vehicle_count          integer                       
) 
 with (orientation = column)
;
--
-- Name: web_page; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table web_page
(
    wp_web_page_sk            integer               not null,
    wp_web_page_id            char(16)              not null,
    wp_rec_start_date         date                          ,
    wp_rec_end_date           date                          ,
    wp_creation_date_sk       integer                       ,
    wp_access_date_sk         integer                       ,
    wp_autogen_flag           char(1)                       ,
    wp_customer_sk            integer                       ,
    wp_url                    varchar(100)                  ,
    wp_type                   char(50)                      ,
    wp_char_count             integer                       ,
    wp_link_count             integer                       ,
    wp_image_count            integer                       ,
    wp_max_ad_count           integer                       
) 
 with (orientation = column)
;
--
-- Name: promotion; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table promotion
(
    p_promo_sk                integer               not null,
    p_promo_id                char(16)              not null,
    p_start_date_sk           integer                       ,
    p_end_date_sk             integer                       ,
    p_item_sk                 integer                       ,
    p_cost                    decimal(15,2)                 ,
    p_response_target         integer                       ,
    p_promo_name              char(50)                      ,
    p_channel_dmail           char(1)                       ,
    p_channel_email           char(1)                       ,
    p_channel_catalog         char(1)                       ,
    p_channel_tv              char(1)                       ,
    p_channel_radio           char(1)                       ,
    p_channel_press           char(1)                       ,
    p_channel_event           char(1)                       ,
    p_channel_demo            char(1)                       ,
    p_channel_details         varchar(100)                  ,
    p_purpose                 char(15)                      ,
    p_discount_active         char(1)                       
) 
 with (orientation = column)
;
--
-- Name: catalog_page; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table catalog_page
(
    cp_catalog_page_sk        integer               not null,
    cp_catalog_page_id        char(16)              not null,
    cp_start_date_sk          integer                       ,
    cp_end_date_sk            integer                       ,
    cp_department             varchar(50)                   ,
    cp_catalog_number         integer                       ,
    cp_catalog_page_number    integer                       ,
    cp_description            varchar(100)                  ,
    cp_type                   varchar(100)                 
) 
 with (orientation = column)
;
--
-- Name: inventory; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table inventory
(
    inv_date_sk               integer               not null,
    inv_item_sk               integer               not null,
    inv_warehouse_sk          integer               not null,
    inv_quantity_on_hand      integer                       
) 
 with (orientation = column)
;
--
-- Name: catalog_returns; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table catalog_returns
(
    cr_returned_date_sk       integer                       ,
    cr_returned_time_sk       integer                       ,
    cr_item_sk                integer               not null,
    cr_refunded_customer_sk   integer                       ,
    cr_refunded_cdemo_sk      integer                       ,
    cr_refunded_hdemo_sk      integer                       ,
    cr_refunded_addr_sk       integer                       ,
    cr_returning_customer_sk  integer                       ,
    cr_returning_cdemo_sk     integer                       ,
    cr_returning_hdemo_sk     integer                       ,
    cr_returning_addr_sk      integer                       ,
    cr_call_center_sk         integer                       ,
    cr_catalog_page_sk        integer                       ,
    cr_ship_mode_sk           integer                       ,
    cr_warehouse_sk           integer                       ,
    cr_reason_sk              integer                       ,
    cr_order_number           bigint               not null,
    cr_return_quantity        integer                       ,
    cr_return_amount          decimal(7,2)                  ,
    cr_return_tax             decimal(7,2)                  ,
    cr_return_amt_inc_tax     decimal(7,2)                  ,
    cr_fee                    decimal(7,2)                  ,
    cr_return_ship_cost       decimal(7,2)                  ,
    cr_refunded_cash          decimal(7,2)                  ,
    cr_reversed_charge        decimal(7,2)                  ,
    cr_store_credit           decimal(7,2)                  ,
    cr_net_loss               decimal(7,2)                 
) 
 with (orientation = column)
;
--
-- Name: web_returns; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table web_returns
(
    wr_returned_date_sk       integer                       ,
    wr_returned_time_sk       integer                       ,
    wr_item_sk                integer               not null,
    wr_refunded_customer_sk   integer                       ,
    wr_refunded_cdemo_sk      integer                       ,
    wr_refunded_hdemo_sk      integer                       ,
    wr_refunded_addr_sk       integer                       ,
    wr_returning_customer_sk  integer                       ,
    wr_returning_cdemo_sk     integer                       ,
    wr_returning_hdemo_sk     integer                       ,
    wr_returning_addr_sk      integer                       ,
    wr_web_page_sk            integer                       ,
    wr_reason_sk              integer                       ,
    wr_order_number           bigint               not null,
    wr_return_quantity        integer                       ,
    wr_return_amt             decimal(7,2)                  ,
    wr_return_tax             decimal(7,2)                  ,
    wr_return_amt_inc_tax     decimal(7,2)                  ,
    wr_fee                    decimal(7,2)                  ,
    wr_return_ship_cost       decimal(7,2)                  ,
    wr_refunded_cash          decimal(7,2)                  ,
    wr_reversed_charge        decimal(7,2)                  ,
    wr_account_credit         decimal(7,2)                  ,
    wr_net_loss               decimal(7,2)                 
) 
 with (orientation = column)
;
--
-- Name: web_sales; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table web_sales
(
    ws_sold_date_sk           integer                       ,
    ws_sold_time_sk           integer                       ,
    ws_ship_date_sk           integer                       ,
    ws_item_sk                integer               not null,
    ws_bill_customer_sk       integer                       ,
    ws_bill_cdemo_sk          integer                       ,
    ws_bill_hdemo_sk          integer                       ,
    ws_bill_addr_sk           integer                       ,
    ws_ship_customer_sk       integer                       ,
    ws_ship_cdemo_sk          integer                       ,
    ws_ship_hdemo_sk          integer                       ,
    ws_ship_addr_sk           integer                       ,
    ws_web_page_sk            integer                       ,
    ws_web_site_sk            integer                       ,
    ws_ship_mode_sk           integer                       ,
    ws_warehouse_sk           integer                       ,
    ws_promo_sk               integer                       ,
    ws_order_number           bigint               not null,
    ws_quantity               integer                       ,
    ws_wholesale_cost         decimal(7,2)                  ,
    ws_list_price             decimal(7,2)                  ,
    ws_sales_price            decimal(7,2)                  ,
    ws_ext_discount_amt       decimal(7,2)                  ,
    ws_ext_sales_price        decimal(7,2)                  ,
    ws_ext_wholesale_cost     decimal(7,2)                  ,
    ws_ext_list_price         decimal(7,2)                  ,
    ws_ext_tax                decimal(7,2)                  ,
    ws_coupon_amt             decimal(7,2)                  ,
    ws_ext_ship_cost          decimal(7,2)                  ,
    ws_net_paid               decimal(7,2)                  ,
    ws_net_paid_inc_tax       decimal(7,2)                  ,
    ws_net_paid_inc_ship      decimal(7,2)                  ,
    ws_net_paid_inc_ship_tax  decimal(7,2)                  ,
    ws_net_profit             decimal(7,2)                  
) 
 with (orientation = column)
;
--
-- Name: catalog_sales; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table catalog_sales
(
    cs_sold_date_sk           integer                       ,
    cs_sold_time_sk           integer                       ,
    cs_ship_date_sk           integer                       ,
    cs_bill_customer_sk       integer                       ,
    cs_bill_cdemo_sk          integer                       ,
    cs_bill_hdemo_sk          integer                       ,
    cs_bill_addr_sk           integer                       ,
    cs_ship_customer_sk       integer                       ,
    cs_ship_cdemo_sk          integer                       ,
    cs_ship_hdemo_sk          integer                       ,
    cs_ship_addr_sk           integer                       ,
    cs_call_center_sk         integer                       ,
    cs_catalog_page_sk        integer                       ,
    cs_ship_mode_sk           integer                       ,
    cs_warehouse_sk           integer                       ,
    cs_item_sk                integer               not null,
    cs_promo_sk               integer                       ,
    cs_order_number           bigint               not null,
    cs_quantity               integer                       ,
    cs_wholesale_cost         decimal(7,2)                  ,
    cs_list_price             decimal(7,2)                  ,
    cs_sales_price            decimal(7,2)                  ,
    cs_ext_discount_amt       decimal(7,2)                  ,
    cs_ext_sales_price        decimal(7,2)                  ,
    cs_ext_wholesale_cost     decimal(7,2)                  ,
    cs_ext_list_price         decimal(7,2)                  ,
    cs_ext_tax                decimal(7,2)                  ,
    cs_coupon_amt             decimal(7,2)                  ,
    cs_ext_ship_cost          decimal(7,2)                  ,
    cs_net_paid               decimal(7,2)                  ,
    cs_net_paid_inc_tax       decimal(7,2)                  ,
    cs_net_paid_inc_ship      decimal(7,2)                  ,
    cs_net_paid_inc_ship_tax  decimal(7,2)                  ,
    cs_net_profit             decimal(7,2)                  
) 
 with (orientation = column)
;
--
-- Name: store_sales; Type: TABLE; Schema: public; Owner: gaussdb; Tablespace:
--
create table store_sales
(
    ss_sold_date_sk           integer                       ,
    ss_sold_time_sk           integer                       ,
    ss_item_sk                integer               not null,
    ss_customer_sk            integer                       ,
    ss_cdemo_sk               integer                       ,
    ss_hdemo_sk               integer                       ,
    ss_addr_sk                integer                       ,
    ss_store_sk               integer                       ,
    ss_promo_sk               integer                       ,
    ss_ticket_number          bigint               not null,
    ss_quantity               integer                       ,
    ss_wholesale_cost         decimal(7,2)                  ,
    ss_list_price             decimal(7,2)                  ,
    ss_sales_price            decimal(7,2)                  ,
    ss_ext_discount_amt       decimal(7,2)                  ,
    ss_ext_sales_price        decimal(7,2)                  ,
    ss_ext_wholesale_cost     decimal(7,2)                  ,
    ss_ext_list_price         decimal(7,2)                  ,
    ss_ext_tax                decimal(7,2)                  ,
    ss_coupon_amt             decimal(7,2)                  ,
    ss_net_paid               decimal(7,2)                  ,
    ss_net_paid_inc_tax       decimal(7,2)                  ,
    ss_net_profit             decimal(7,2)                  
) 
 with (orientation = column)
;
set explain_perf_mode=pretty;
--q1
explain plan set statement_id='q1' for
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100;
select id,operation,options,object_name,object_type,object_owner,projection from plan_table_data where statement_id='q1' order by id;	
 id |       operation        |   options   |      object_name      | object_type | object_owner |                                                    projection                                                    
----+------------------------+-------------+-----------------------+-------------+--------------+------------------------------------------------------------------------------------------------------------------
  1 | LIMIT                  |             | date_dim              | TABLE       |              | store_returns.sr_customer_sk, store_returns.sr_store_sk, (sum(store_returns.sr_fee))
  2 | SORT                   |             |                       |             |              | customer.c_customer_id
  3 | NESTED LOOPS           | INNER       |                       |             |              | customer.c_customer_id
  4 | NESTED LOOPS           | INNER       |                       |             |              | ctr1.ctr_store_sk, ctr1.ctr_total_return, store.s_store_sk, customer.c_customer_id
  5 | ROW ADAPTER            |             |                       |             |              | store.s_store_sk
  6 | TABLE ACCESS           | CSTORE SCAN | store                 | TABLE       | tpcds_col    | store.s_store_sk
  7 | HASH JOIN              | INNER       |                       |             |              | ctr1.ctr_store_sk, ctr1.ctr_total_return, customer.c_customer_id
  8 | ROW ADAPTER            |             |                       |             |              | customer.c_customer_id, customer.c_customer_sk
  9 | TABLE ACCESS           | CSTORE SCAN | customer              | TABLE       | tpcds_col    | customer.c_customer_id, customer.c_customer_sk
 10 | HASH                   |             |                       |             |              | ctr1.ctr_store_sk, ctr1.ctr_customer_sk, ctr1.ctr_total_return
 11 | CTE SCAN               |             | customer_total_return | CTE         |              | ctr1.ctr_store_sk, ctr1.ctr_customer_sk, ctr1.ctr_total_return
 12 |                        |             |                       |             |              | 
 13 |                        |             |                       |             |              | 
 14 |                        |             |                       |             |              | 
 15 |                        |             |                       |             |              | 
 16 |                        |             |                       |             |              | 
 17 | AGGREGATE              | HASHED      |                       |             |              | (avg(ctr2.ctr_total_return) * 1.2), ctr2.ctr_store_sk
 18 | CTE SCAN               |             | customer_total_return | CTE         |              | ctr2.ctr_store_sk, ctr2.ctr_total_return
 19 | VECTOR AGGREGATE       | HASHED      |                       |             |              | store_returns.sr_customer_sk, store_returns.sr_store_sk, sum(store_returns.sr_fee)
 20 | VECTOR SONIC HASH JOIN | INNER       |                       |             |              | store_returns.sr_customer_sk, store_returns.sr_store_sk, store_returns.sr_fee
 21 | TABLE ACCESS           | CSTORE SCAN | store_returns         | TABLE       | tpcds_col    | store_returns.sr_customer_sk, store_returns.sr_store_sk, store_returns.sr_fee, store_returns.sr_returned_date_sk
 22 |                        |             |                       |             |              | 
 23 | TABLE ACCESS           | CSTORE SCAN | date_dim              | TABLE       | tpcds_col    | date_dim.d_date_sk
(23 rows)

explain(costs off)
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(SR_FEE) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100;
                                                               QUERY PLAN                                                               
----------------------------------------------------------------------------------------------------------------------------------------
 Limit
   CTE customer_total_return
     ->  Row Adapter
           ->  Vector Sonic Hash Aggregate
                 Group By Key: store_returns.sr_customer_sk, store_returns.sr_store_sk
                 ->  Vector Sonic Hash Join
                       Hash Cond: (store_returns.sr_returned_date_sk = date_dim.d_date_sk)
                       ->  CStore Scan on store_returns
                       ->  CStore Scan on date_dim
                             Filter: (d_year = 2000)
   ->  Sort
         Sort Key: customer.c_customer_id
         ->  Nested Loop
               Join Filter: ((ctr1.ctr_total_return > ((avg(ctr2.ctr_total_return) * 1.2))) AND (store.s_store_sk = ctr2.ctr_store_sk))
               ->  Nested Loop
                     Join Filter: (ctr1.ctr_store_sk = store.s_store_sk)
                     ->  Row Adapter
                           ->  CStore Scan on store
                                 Filter: (s_state = 'NM'::bpchar)
                     ->  Hash Join
                           Hash Cond: (customer.c_customer_sk = ctr1.ctr_customer_sk)
                           ->  Row Adapter
                                 ->  CStore Scan on customer
                           ->  Hash
                                 ->  CTE Scan on customer_total_return ctr1
               ->  HashAggregate
                     Group By Key: ctr2.ctr_store_sk
                     ->  CTE Scan on customer_total_return ctr2
(28 rows)

--q2
explain plan set statement_id='q2' for
with wscs as
 (select sold_date_sk
        ,sales_price
  from ( select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales 
        union all
        select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1;
select id,operation,options,object_name,object_type,object_owner,projection from plan_table_data where statement_id='q2' order by id;	
 id |   operation   |   options   |  object_name  | object_type | object_owner |                                                                                                                                                                                                                                                                                                                                                                                                                      projection                                                                                                                                                                                                                                                                                                                                                                                                                       

  1 | MERGE JOIN    | INNER       | date_dim      | TABLE       |              | tpcds_col.date_dim.d_week_seq, tpcds_col.date_dim.d_day_name, tpcds_col.date_dim.d_date_sk
  2 | SORT          |             |               |             |              | wswscs.d_week_seq, wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales, tpcds_col.date_dim.d_week_seq
  3 | HASH JOIN     | INNER       |               |             |              | wswscs.d_week_seq, wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales, tpcds_col.date_dim.d_week_seq
  4 | CTE SCAN      |             | wswscs        | CTE         |              | wswscs.d_week_seq, wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales
  5 |               |             |               |             |              | 
  6 |               |             |               |             |              | 
  7 |               |             |               |             |              | 
  8 |               |             |               |             |              | 
  9 |               |             |               |             |              | 
 10 |               |             |               |             |              | 
 11 |               |             |               |             |              | 
 12 |               |             |               |             |              | 
 13 |               |             |               |             |              | 
 14 | HASH          |             |               |             |              | tpcds_col.date_dim.d_week_seq
 15 | ROW ADAPTER   |             |               |             |              | tpcds_col.date_dim.d_week_seq
 16 | TABLE ACCESS  | CSTORE SCAN | date_dim      | TABLE       | tpcds_col    | tpcds_col.date_dim.d_week_seq
 17 | SORT          |             |               |             |              | wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales, wswscs.d_week_seq, ((wswscs.d_week_seq - 53))
 18 | HASH JOIN     | INNER       |               |             |              | wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales, wswscs.d_week_seq, (wswscs.d_week_seq - 53)
 19 | CTE SCAN      |             | wswscs        | CTE         |              | wswscs.d_week_seq, wswscs.sun_sales, wswscs.mon_sales, wswscs.tue_sales, wswscs.wed_sales, wswscs.thu_sales, wswscs.fri_sales, wswscs.sat_sales
 20 | AGGREGATE     | HASHED      |               |             |              | tpcds_col.date_dim.d_week_seq, sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Sunday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Monday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Tuesday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Wednesday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Thursday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Friday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END), sum(CASE WHEN (tpcds_col.date_dim.d_day_name = 'Saturday'::bpchar) THEN wscs.sales_price ELSE NULL::numeric END)
 21 | HASH JOIN     | INNER       |               |             |              | wscs.sales_price, tpcds_col.date_dim.d_week_seq, tpcds_col.date_dim.d_day_name
 22 | CTE SCAN      |             | wscs          | CTE         |              | wscs.sold_date_sk, wscs.sales_price
 23 | VECTOR RESULT |             |               |             |              | web_sales.ws_sold_date_sk, web_sales.ws_ext_sales_price
 24 | VECTOR APPEND |             |               |             |              | 
 25 | TABLE ACCESS  | CSTORE SCAN | web_sales     | TABLE       | tpcds_col    | web_sales.ws_sold_date_sk, web_sales.ws_ext_sales_price
 26 | TABLE ACCESS  | CSTORE SCAN | catalog_sales | TABLE       | tpcds_col    | catalog_sales.cs_sold_date_sk, catalog_sales.cs_ext_sales_price
 27 | HASH          |             |               |             |              | tpcds_col.date_dim.d_week_seq, tpcds_col.date_dim.d_day_name, tpcds_col.date_dim.d_date_sk
 28 | TABLE ACCESS  | CSTORE SCAN | date_dim      | TABLE       | tpcds_col    | tpcds_col.date_dim.d_week_seq, tpcds_col.date_dim.d_day_name, tpcds_col.date_dim.d_date_sk
 29 | HASH          |             |               |             |              | tpcds_col.date_dim.d_week_seq
 30 | ROW ADAPTER   |             |               |             |              | tpcds_col.date_dim.d_week_seq
 31 | TABLE ACCESS  | CSTORE SCAN | date_dim      | TABLE       | tpcds_col    | tpcds_col.date_dim.d_week_seq
(31 rows)

explain(costs off)
with wscs as
 (select sold_date_sk
        ,sales_price
  from ( select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales 
        union all
        select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Merge Join
   Merge Cond: (tpcds_col.date_dim.d_week_seq = ((wswscs.d_week_seq - 53)))
   CTE wscs
     ->  Row Adapter
           ->  Vector Result
                 ->  Vector Append
                       ->  CStore Scan on web_sales
                       ->  CStore Scan on catalog_sales
   CTE wswscs
     ->  HashAggregate
           Group By Key: tpcds_col.date_dim.d_week_seq
           ->  Hash Join
                 Hash Cond: (wscs.sold_date_sk = tpcds_col.date_dim.d_date_sk)
                 ->  CTE Scan on wscs
                 ->  Hash
                       ->  Row Adapter
                             ->  CStore Scan on date_dim
   ->  Sort
         Sort Key: wswscs.d_week_seq
         ->  Hash Join
               Hash Cond: (wswscs.d_week_seq = tpcds_col.date_dim.d_week_seq)
               ->  CTE Scan on wswscs
               ->  Hash
                     ->  Row Adapter
                           ->  CStore Scan on date_dim
                                 Filter: (d_year = 2001)
   ->  Sort
         Sort Key: ((wswscs.d_week_seq - 53))
         ->  Hash Join
               Hash Cond: (wswscs.d_week_seq = tpcds_col.date_dim.d_week_seq)
               ->  CTE Scan on wswscs
               ->  Hash
                     ->  Row Adapter
                           ->  CStore Scan on date_dim
                                 Filter: (d_year = 2002)
(35 rows)

--清理
delete from plan_table_data;
drop schema tpcds_col cascade;
NOTICE:  drop cascades to 24 other objects
DETAIL:  drop cascades to table customer_address
drop cascades to table customer_demographics
drop cascades to table date_dim
drop cascades to table warehouse
drop cascades to table ship_mode
drop cascades to table time_dim
drop cascades to table reason
drop cascades to table income_band
drop cascades to table item
drop cascades to table store
drop cascades to table call_center
drop cascades to table customer
drop cascades to table web_site
drop cascades to table store_returns
drop cascades to table household_demographics
drop cascades to table web_page
drop cascades to table promotion
drop cascades to table catalog_page
drop cascades to table inventory
drop cascades to table catalog_returns
drop cascades to table web_returns
drop cascades to table web_sales
drop cascades to table catalog_sales
drop cascades to table store_sales
