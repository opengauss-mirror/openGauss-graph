---
--- test creation of SERIAL column
---
CREATE TABLE serialTest (f1 text, f2 serial);
NOTICE:  CREATE TABLE will create implicit sequence "serialtest_f2_seq" for serial column "serialtest.f2"
INSERT INTO serialTest VALUES ('foo');
INSERT INTO serialTest VALUES ('bar');
INSERT INTO serialTest VALUES ('force', 100);
INSERT INTO serialTest VALUES ('wrong', NULL);
ERROR:  null value in column "f2" violates not-null constraint
DETAIL:  Failing row contains (wrong, null).
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
(3 rows)

-- test smallserial / bigserial
CREATE TABLE serialTest2 (f1 text, f2 serial, f3 smallserial, f4 serial2,
  f5 bigserial, f6 serial8);
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f2_seq" for serial column "serialtest2.f2"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f3_seq" for serial column "serialtest2.f3"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f4_seq" for serial column "serialtest2.f4"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f5_seq" for serial column "serialtest2.f5"
NOTICE:  CREATE TABLE will create implicit sequence "serialtest2_f6_seq" for serial column "serialtest2.f6"
INSERT INTO serialTest2 (f1)
  VALUES ('test_defaults');
INSERT INTO serialTest2 (f1, f2, f3, f4, f5, f6)
  VALUES ('test_max_vals', 2147483647, 32767, 32767, 9223372036854775807,
          9223372036854775807),
         ('test_min_vals', -2147483648, -32768, -32768, -9223372036854775808,
          -9223372036854775808);
-- All these INSERTs should fail:
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
CONTEXT:  referenced column: f3
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', -32769);
ERROR:  smallint out of range
CONTEXT:  referenced column: f4
INSERT INTO serialTest2 (f1, f3)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
CONTEXT:  referenced column: f3
INSERT INTO serialTest2 (f1, f4)
  VALUES ('bogus', 32768);
ERROR:  smallint out of range
CONTEXT:  referenced column: f4
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
CONTEXT:  referenced column: f5
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', -9223372036854775809);
ERROR:  bigint out of range
CONTEXT:  referenced column: f6
INSERT INTO serialTest2 (f1, f5)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
CONTEXT:  referenced column: f5
INSERT INTO serialTest2 (f1, f6)
  VALUES ('bogus', 9223372036854775808);
ERROR:  bigint out of range
CONTEXT:  referenced column: f6
SELECT * FROM serialTest2 ORDER BY f2 ASC;
      f1       |     f2      |   f3   |   f4   |          f5          |          f6          
---------------+-------------+--------+--------+----------------------+----------------------
 test_min_vals | -2147483648 | -32768 | -32768 | -9223372036854775808 | -9223372036854775808
 test_defaults |           1 |      1 |      1 |                    1 |                    1
 test_max_vals |  2147483647 |  32767 |  32767 |  9223372036854775807 |  9223372036854775807
(3 rows)

SELECT nextval('serialTest2_f2_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f3_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f4_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f5_seq');
 nextval 
---------
       2
(1 row)

SELECT nextval('serialTest2_f6_seq');
 nextval 
---------
       2
(1 row)

-- basic sequence operations using both text and oid references
CREATE SEQUENCE sequence_test;
SELECT nextval('sequence_test'::text);
 nextval 
---------
       1
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
       2
(1 row)

SELECT currval('sequence_test'::text);
 currval 
---------
       2
(1 row)

SELECT currval('sequence_test'::regclass);
 currval 
---------
       2
(1 row)

SELECT setval('sequence_test'::text, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::text, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::regclass);
 nextval 
---------
      99
(1 row)

SELECT setval('sequence_test'::regclass, 32);
 setval 
--------
     32
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      33
(1 row)

SELECT setval('sequence_test'::regclass, 99, false);
 setval 
--------
     99
(1 row)

SELECT nextval('sequence_test'::text);
 nextval 
---------
      99
(1 row)

DROP SEQUENCE sequence_test;
-- renaming sequences
CREATE SEQUENCE foo_seq;
ALTER TABLE foo_seq RENAME TO foo_seq_new;
ERROR:  RENAME SEQUENCE is not yet supported.
SELECT * FROM foo_seq_new;
ERROR:  relation "foo_seq_new" does not exist on datanode1
LINE 1: SELECT * FROM foo_seq_new;
                      ^
SELECT nextval('foo_seq_new');
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT nextval('foo_seq_new');
                       ^
CONTEXT:  referenced column: nextval
SELECT nextval('foo_seq_new');
ERROR:  relation "foo_seq_new" does not exist
LINE 1: SELECT nextval('foo_seq_new');
                       ^
CONTEXT:  referenced column: nextval
SELECT * FROM foo_seq_new;
ERROR:  relation "foo_seq_new" does not exist on datanode1
LINE 1: SELECT * FROM foo_seq_new;
                      ^
DROP SEQUENCE foo_seq_new;
ERROR:  sequence "foo_seq_new" does not exist
-- renaming serial sequences
ALTER TABLE serialtest_f2_seq RENAME TO serialtest_f2_foo;
ERROR:  RENAME SEQUENCE is not yet supported.
INSERT INTO serialTest VALUES ('more');
SELECT * FROM serialTest;
  f1   | f2  
-------+-----
 foo   |   1
 bar   |   2
 force | 100
 more  |   3
(4 rows)

--
-- Check dependencies of serial and ordinary sequences
--
CREATE TEMP SEQUENCE myseq2;
ERROR:  Temporary sequences are not supported
CREATE TEMP SEQUENCE myseq3;
ERROR:  Temporary sequences are not supported
CREATE TEMP TABLE t1 (
  f1 serial,
  f2 int DEFAULT nextval('myseq2'),
  f3 int DEFAULT nextval('myseq3'::text)
);
ERROR:  It's not supported to create serial column on temporary table
-- Both drops should fail, but with different error messages:
DROP SEQUENCE t1_f1_seq;
ERROR:  sequence "t1_f1_seq" does not exist
DROP SEQUENCE myseq2;
ERROR:  sequence "myseq2" does not exist
-- This however will work:
DROP SEQUENCE myseq3;
ERROR:  sequence "myseq3" does not exist
DROP TABLE t1;
ERROR:  table "t1" does not exist
-- Fails because no longer existent:
DROP SEQUENCE t1_f1_seq;
ERROR:  sequence "t1_f1_seq" does not exist
-- Now OK:
DROP SEQUENCE myseq2;
ERROR:  sequence "myseq2" does not exist
--
-- Alter sequence
--
ALTER SEQUENCE IF EXISTS sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
NOTICE:  relation "sequence_test2" does not exist, skipping
CREATE SEQUENCE sequence_test2 START WITH 32;
SELECT nextval('sequence_test2');
 nextval 
---------
      32
(1 row)

ALTER SEQUENCE sequence_test2 RESTART WITH 24
	 INCREMENT BY 4 MAXVALUE 36 MINVALUE 5 CYCLE;
ERROR:  ALTER SEQUENCE is not yet supported.
SELECT nextval('sequence_test2');
 nextval 
---------
      33
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      34
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      35
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      36
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      37
(1 row)

ALTER SEQUENCE sequence_test2 RESTART;
ERROR:  ALTER SEQUENCE is not yet supported.
SELECT nextval('sequence_test2');
 nextval 
---------
      38
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      39
(1 row)

SELECT nextval('sequence_test2');
 nextval 
---------
      40
(1 row)

-- Information schema
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema |   sequence_name    | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+--------------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 regression       | public          | sequence_test2     | int16     |               128 |                       2 |             0 | 32          | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f2_seq | int16     |               128 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f3_seq | int16     |               128 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f4_seq | int16     |               128 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f5_seq | int16     |               128 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
 regression       | public          | serialtest2_f6_seq | int16     |               128 |                       2 |             0 | 1           | 1             | 9223372036854775807 | 1         | NO
(6 rows)

-- Test comments
COMMENT ON SEQUENCE asdf IS 'won''t work';
ERROR:  relation "asdf" does not exist
COMMENT ON SEQUENCE sequence_test2 IS 'will work';
COMMENT ON SEQUENCE sequence_test2 IS NULL;
-- Test lastval()
CREATE SEQUENCE seq;
SELECT nextval('seq');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

SELECT setval('seq', 99);
 setval 
--------
     99
(1 row)

SELECT lastval();
 lastval 
---------
      99
(1 row)

CREATE SEQUENCE seq2;
SELECT nextval('seq2');
 nextval 
---------
       1
(1 row)

SELECT lastval();
 lastval 
---------
       1
(1 row)

DROP SEQUENCE seq2;
-- should fail
SELECT lastval();
ERROR:  lastval is not yet defined in this session
CONTEXT:  referenced column: lastval
CREATE USER seq_user PASSWORD 'gauss@123';
BEGIN;
SET LOCAL SESSION AUTHORIZATION seq_user PASSWORD 'gauss@123';
CREATE SEQUENCE seq3;
SELECT nextval('seq3');
 nextval 
---------
       1
(1 row)

REVOKE ALL ON seq3 FROM seq_user;
SELECT lastval();
ERROR:  permission denied for sequence seq3
CONTEXT:  referenced column: lastval
ROLLBACK;
-- Sequences should get wiped out as well:
DROP TABLE serialTest, serialTest2;
-- Make sure sequences are gone:
SELECT * FROM information_schema.sequences WHERE sequence_name IN
  ('sequence_test2', 'serialtest2_f2_seq', 'serialtest2_f3_seq',
   'serialtest2_f4_seq', 'serialtest2_f5_seq', 'serialtest2_f6_seq')
  ORDER BY sequence_name ASC;
 sequence_catalog | sequence_schema | sequence_name  | data_type | numeric_precision | numeric_precision_radix | numeric_scale | start_value | minimum_value |    maximum_value    | increment | cycle_option 
------------------+-----------------+----------------+-----------+-------------------+-------------------------+---------------+-------------+---------------+---------------------+-----------+--------------
 regression       | public          | sequence_test2 | int16     |               128 |                       2 |             0 | 32          | 1             | 9223372036854775807 | 1         | NO
(1 row)

DROP USER seq_user;
DROP SEQUENCE seq;
