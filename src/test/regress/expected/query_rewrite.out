------------------------------
--- test various query write
--- 1. const param eval
------------------------------
create schema query_rewrite;
set current_schema = query_rewrite;
create table t1 (a int, b int);
create table t2 (a int, b int);
create index i on t2(a);
--test const param eval: const param should be removed and convert to semi-join
explain (costs off) select * from t1 where ( '1' = '0' or ( '1' = '1' and exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
             QUERY PLAN              
-------------------------------------
 Nested Loop Semi Join
   ->  Seq Scan on t1
   ->  Index Only Scan using i on t2
         Index Cond: (a = t1.a)
(4 rows)

--test const param eval: const param should be removed and convert to seqscan
explain (costs off) select * from t1 where ( '1' = '1' or ( '1' = '1' and exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--test const param eval: const param should be removed and convert to semi-join
explain (costs off) select * from t1 where ( '1' = '1' and ( '1' = '1' and exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
             QUERY PLAN              
-------------------------------------
 Nested Loop Semi Join
   ->  Seq Scan on t1
   ->  Index Only Scan using i on t2
         Index Cond: (a = t1.a)
(4 rows)

--test const param eval: const param should be removed and convert to seqscan
explain (costs off) select * from t1 where ( '1' = '0' and ( '1' = '1' and exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
        QUERY PLAN        
--------------------------
 Result
   One-Time Filter: false
   ->  Seq Scan on t1
(3 rows)

--test const param eval: const param should be removed and convert to seqscan
explain (costs off) select * from t1 where ( '1' = '0' or ( '1' = '1' or exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--test const param eval: const param should be removed and convert to seqscan
explain (costs off) select * from t1 where ( '1' = '1' or ( '1' = '1' or exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--test const param eval: const param should be removed and convert to semi-join
explain (costs off) select * from t1 where ( '1' = '1' and ( '1' = '0' or exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
             QUERY PLAN              
-------------------------------------
 Nested Loop Semi Join
   ->  Seq Scan on t1
   ->  Index Only Scan using i on t2
         Index Cond: (a = t1.a)
(4 rows)

--test const param eval: const param should be removed and convert to seqscan
explain (costs off) select * from t1 where ( '1' = '0' and ( '1' = '1' or exists ( select /*+ rows(t2 #9999999) */ a from t2 where t1.a=t2.a)));
        QUERY PLAN        
--------------------------
 Result
   One-Time Filter: false
   ->  Seq Scan on t1
(3 rows)

-- test for optimized join rel as sub-query
set qrw_inlist2join_optmode = 'rule_base';
CREATE TABLE t3 (
slot integer NOT NULL,
cid bigint NOT NULL,
name character varying NOT NULL
)
WITH (orientation=row);
insert into t3 (slot, cid, name) values(generate_series(1, 10), generate_series(1, 10), 'records.storage.state');
analyze t3;
explain (costs off) 
select 
  * 
from 
  t3 
where 
  slot = '5' 
  and (name) in (
    select 
      name 
    from 
      t3 
    where 
      slot = '5' 
      and cid in (
        5, 1000, 1001, 1002, 1003, 1004, 1005, 
        1006, 1007, 2000, 4000, 10781986, 10880002
      ) 
    limit 
      50
  );
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Nested Loop Semi Join
   Join Filter: ((query_rewrite.t3.name)::text = (query_rewrite.t3.name)::text)
   ->  Seq Scan on t3
         Filter: (slot = 5)
   ->  Limit
         ->  Hash Right Semi Join
               Hash Cond: ("*VALUES*".column1 = query_rewrite.t3.cid)
               ->  Values Scan on "*VALUES*"
               ->  Hash
                     ->  Seq Scan on t3
                           Filter: (slot = 5)
(11 rows)

select 
  * 
from 
  t3 
where 
  slot = '5' 
  and (name) in (
    select 
      name 
    from 
      t3 
    where 
      slot = '5' 
      and cid in (
        5, 1000, 1001, 1002, 1003, 1004, 1005, 
        1006, 1007, 2000, 4000, 10781986, 10880002
      ) 
    limit 
      50
  );
 slot | cid |         name          
------+-----+-----------------------
    5 |   5 | records.storage.state
(1 row)

explain (costs off) 
select 
  * 
from 
  t3 
where 
  cid in (
    select 
      cid 
    from 
      t3 
    where 
      slot = '5' 
      and (name) in (
        select 
          name 
        from 
          t3 
        where 
          slot = '5' 
          and cid in (
            5, 1000, 1001, 1002, 1003, 1004, 1005, 
            1006, 1007, 2000, 4000, 10781986, 10880002
          ) 
        limit 
          50
      )
  );
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Semi Join
   Hash Cond: (query_rewrite.t3.cid = query_rewrite.t3.cid)
   ->  Seq Scan on t3
   ->  Hash
         ->  Nested Loop Semi Join
               Join Filter: ((query_rewrite.t3.name)::text = (query_rewrite.t3.name)::text)
               ->  Seq Scan on t3
                     Filter: (slot = 5)
               ->  Limit
                     ->  Hash Right Semi Join
                           Hash Cond: ("*VALUES*".column1 = query_rewrite.t3.cid)
                           ->  Values Scan on "*VALUES*"
                           ->  Hash
                                 ->  Seq Scan on t3
                                       Filter: (slot = 5)
(15 rows)

select 
  * 
from 
  t3 
where 
  cid in (
    select 
      cid 
    from 
      t3 
    where 
      slot = '5' 
      and (name) in (
        select 
          name 
        from 
          t3 
        where 
          slot = '5' 
          and cid in (
            5, 1000, 1001, 1002, 1003, 1004, 1005, 
            1006, 1007, 2000, 4000, 10781986, 10880002
          ) 
        limit 
          50
      )
  );
 slot | cid |         name          
------+-----+-----------------------
    5 |   5 | records.storage.state
(1 row)

drop schema query_rewrite cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table t1
drop cascades to table t2
drop cascades to table t3
reset current_schema;
