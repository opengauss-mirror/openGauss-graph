create schema distribute_setop_1;
set current_schema = distribute_setop_1;
-- case 1
create table test_union_1(a int, b int, c int) ;
create table test_union_2(a int, b int, c int) ;
explain (verbose on, costs off) select a, b from  test_union_1 union all select a, b from  test_union_2;
                       QUERY PLAN                        
---------------------------------------------------------
 Result
   Output: test_union_1.a, test_union_1.b
   ->  Append
         ->  Seq Scan on distribute_setop_1.test_union_1
               Output: test_union_1.a, test_union_1.b
         ->  Seq Scan on distribute_setop_1.test_union_2
               Output: test_union_2.a, test_union_2.b
(7 rows)

explain (verbose on, costs off) select a, b from  test_union_1 union all select b, c from  test_union_2;
                       QUERY PLAN                        
---------------------------------------------------------
 Result
   Output: test_union_1.a, test_union_1.b
   ->  Append
         ->  Seq Scan on distribute_setop_1.test_union_1
               Output: test_union_1.a, test_union_1.b
         ->  Seq Scan on distribute_setop_1.test_union_2
               Output: test_union_2.b, test_union_2.c
(7 rows)

explain (verbose on, costs off) select a, b from  test_union_1 union all select b, a from  test_union_2;
                       QUERY PLAN                        
---------------------------------------------------------
 Result
   Output: test_union_1.a, test_union_1.b
   ->  Append
         ->  Seq Scan on distribute_setop_1.test_union_1
               Output: test_union_1.a, test_union_1.b
         ->  Seq Scan on distribute_setop_1.test_union_2
               Output: test_union_2.b, test_union_2.a
(7 rows)

explain (verbose on, costs off) select b, a from  test_union_1 union all select b, a from  test_union_2;
                       QUERY PLAN                        
---------------------------------------------------------
 Result
   Output: test_union_1.b, test_union_1.a
   ->  Append
         ->  Seq Scan on distribute_setop_1.test_union_1
               Output: test_union_1.b, test_union_1.a
         ->  Seq Scan on distribute_setop_1.test_union_2
               Output: test_union_2.b, test_union_2.a
(7 rows)

explain (verbose on, costs off) select b, c from  test_union_1 union all select b, c from  test_union_2;
                       QUERY PLAN                        
---------------------------------------------------------
 Result
   Output: test_union_1.b, test_union_1.c
   ->  Append
         ->  Seq Scan on distribute_setop_1.test_union_1
               Output: test_union_1.b, test_union_1.c
         ->  Seq Scan on distribute_setop_1.test_union_2
               Output: test_union_2.b, test_union_2.c
(7 rows)

explain (verbose on, costs off) select a, b from  test_union_1 intersect select a, b from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".a, "*SELECT* 2".b, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.a, test_union_2.b
(11 rows)

explain (verbose on, costs off) select a, b from  test_union_1 intersect select b, c from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".c, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.c
(11 rows)

explain (verbose on, costs off) select a, b from  test_union_1 intersect select b, a from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".a, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.a
(11 rows)

explain (verbose on, costs off) select b, a from  test_union_1 intersect select b, a from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".b, "*SELECT* 1".a, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".a, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.b, test_union_1.a
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".a, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.a
(11 rows)

explain (verbose on, costs off) select b, c from  test_union_1 intersect select b, c from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".b, "*SELECT* 1".c, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".c, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.b, test_union_1.c
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".c, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.c
(11 rows)

explain (verbose on, costs off) select a, b from  test_union_1 minus select a, b from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".a, "*SELECT* 2".b, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.a, test_union_2.b
(11 rows)

explain (verbose on, costs off) select a, b from  test_union_1 minus select b, c from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".c, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.c
(11 rows)

explain (verbose on, costs off) select a, b from  test_union_1 minus select b, a from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".a, "*SELECT* 1".b, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".a, "*SELECT* 1".b, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.a, test_union_1.b
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".a, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.a
(11 rows)

explain (verbose on, costs off) select b, a from  test_union_1 minus select b, a from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".b, "*SELECT* 1".a, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".a, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.b, test_union_1.a
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".a, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.a
(11 rows)

explain (verbose on, costs off) select b, c from  test_union_1 minus select b, c from  test_union_2;
                          QUERY PLAN                           
---------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".b, "*SELECT* 1".c, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".c, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.b, test_union_1.c
         ->  Subquery Scan on "*SELECT* 2"
               Output: "*SELECT* 2".b, "*SELECT* 2".c, 1
               ->  Seq Scan on distribute_setop_1.test_union_2
                     Output: test_union_2.b, test_union_2.c
(11 rows)

explain (verbose on, costs off) select b, substr(c, 1, 3), c from  test_union_1 minus (select 1, t2.b::varchar(10), t1.c from (select a,b,case c when 1 then 1 else null end as c from test_union_2 where b<0) t1 right join test_union_2 t2 on t1.b=t2.c group by 1, 2, 3);
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Except
   Output: "*SELECT* 1".b, "*SELECT* 1".substr, "*SELECT* 1".c, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".substr, "*SELECT* 1".c, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: test_union_1.b, substr((test_union_1.c)::text, 1, 3), test_union_1.c
         ->  Subquery Scan on "*SELECT* 2"
               Output: 1, ("*SELECT* 2".b)::text, "*SELECT* 2".c, 1
               ->  HashAggregate
                     Output: (1), ((t2.b)::character varying(10)), (CASE test_union_2.c WHEN 1 THEN 1 ELSE NULL::integer END)
                     Group By Key: 1, (t2.b)::character varying(10), (CASE test_union_2.c WHEN 1 THEN 1 ELSE NULL::integer END)
                     ->  Hash Left Join
                           Output: 1, (t2.b)::character varying(10), (CASE test_union_2.c WHEN 1 THEN 1 ELSE NULL::integer END)
                           Hash Cond: (t2.c = test_union_2.b)
                           ->  Seq Scan on distribute_setop_1.test_union_2 t2
                                 Output: t2.a, t2.b, t2.c
                           ->  Hash
                                 Output: test_union_2.b, (CASE test_union_2.c WHEN 1 THEN 1 ELSE NULL::integer END)
                                 ->  Seq Scan on distribute_setop_1.test_union_2
                                       Output: test_union_2.b, CASE test_union_2.c WHEN 1 THEN 1 ELSE NULL::integer END
                                       Filter: (test_union_2.b < 0)
(22 rows)

explain (verbose on, costs off) SELECT b,a,c FROM test_union_1 INTERSECT (((SELECT a,b,c FROM test_union_1 UNION ALL SELECT a,b,c FROM test_union_1)));
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 HashSetOp Intersect
   Output: "*SELECT* 1".b, "*SELECT* 1".a, "*SELECT* 1".c, (0)
   ->  Append
         ->  Subquery Scan on "*SELECT* 1"
               Output: "*SELECT* 1".b, "*SELECT* 1".a, "*SELECT* 1".c, 0
               ->  Seq Scan on distribute_setop_1.test_union_1
                     Output: distribute_setop_1.test_union_1.b, distribute_setop_1.test_union_1.a, distribute_setop_1.test_union_1.c
         ->  Result
               Output: distribute_setop_1.test_union_1.a, distribute_setop_1.test_union_1.b, distribute_setop_1.test_union_1.c, 1
               ->  Append
                     ->  Seq Scan on distribute_setop_1.test_union_1
                           Output: distribute_setop_1.test_union_1.a, distribute_setop_1.test_union_1.b, distribute_setop_1.test_union_1.c
                     ->  Seq Scan on distribute_setop_1.test_union_1
                           Output: distribute_setop_1.test_union_1.a, distribute_setop_1.test_union_1.b, distribute_setop_1.test_union_1.c
(14 rows)

-- case 2
create table income_band
(
    ib_income_band_sk         integer               not null,
    ib_lower_bound            integer                       ,
    ib_upper_bound            integer
)
;
create table store
(
    s_store_sk                integer               not null,
    s_store_id                char(16)              not null,
    s_manager                 varchar(40)                   ,
	s_market_id               integer                       ,
    s_company_id              integer
)
;
create table call_center
(
    cc_call_center_sk         integer               not null,
    cc_call_center_id         char(16)              not null,
    cc_city                   varchar(60)
)
;
create table item
(
    i_item_sk                 integer               not null,
    i_item_id                 char(16)              not null,
    i_class_id                integer
)
;
explain (verbose on, costs off)
select s_market_id
          from store
         inner join item
            on i_class_id = s_company_id
         where s_manager like '%a%'
         group by 1
        union
        select 1
          from call_center
         where cc_city like '%b%'
        union all 
        select count(*) from income_band;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Append
   ->  Result
         Output: store.s_market_id
         ->  HashAggregate
               Output: store.s_market_id
               Group By Key: store.s_market_id
               ->  Append
                     ->  HashAggregate
                           Output: store.s_market_id
                           Group By Key: store.s_market_id
                           ->  Hash Join
                                 Output: store.s_market_id
                                 Hash Cond: (item.i_class_id = store.s_company_id)
                                 ->  Seq Scan on distribute_setop_1.item
                                       Output: item.i_item_sk, item.i_item_id, item.i_class_id
                                 ->  Hash
                                       Output: store.s_market_id, store.s_company_id
                                       ->  Seq Scan on distribute_setop_1.store
                                             Output: store.s_market_id, store.s_company_id
                                             Filter: ((store.s_manager)::text ~~ '%a%'::text)
                     ->  Seq Scan on distribute_setop_1.call_center
                           Output: 1
                           Filter: ((call_center.cc_city)::text ~~ '%b%'::text)
   ->  Aggregate
         Output: count(*)
         ->  Seq Scan on distribute_setop_1.income_band
               Output: income_band.ib_income_band_sk, income_band.ib_lower_bound, income_band.ib_upper_bound
(27 rows)

-- Setop targetlist doesn't match subplan's targetlist
explain (verbose on, costs off)
select '',  s_market_id,
octet_length('abc') + s_market_id%4 - (array_length(array [ '', ' ', 'fgsg' ], 1) - 32.09)   from store
inner join item
on i_class_id = s_company_id
and (array_length(array [ '', ' ', 'fgsg' ], 1) - 32.09 < 0)
and octet_length('abc') %8 > 0
where s_manager like '%a%'
group by 1, i_class_id, s_market_id
union select 'dalf', bit_length(''), 12.009
from call_center
where cc_city like '%b%'
union all select '123', count(*), lengthb(749275)
from income_band order by 1, 2, 3;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (NULL::text), (("*SELECT* 1".s_market_id)::bigint), "*SELECT* 1"."?column?"
   Sort Key: (NULL::text), (("*SELECT* 1".s_market_id)::bigint), "*SELECT* 1"."?column?"
   ->  Append
         ->  Result
               Output: (NULL::text), "*SELECT* 1".s_market_id, "*SELECT* 1"."?column?"
               ->  HashAggregate
                     Output: (NULL::text), "*SELECT* 1".s_market_id, "*SELECT* 1"."?column?"
                     Group By Key: (NULL::text), "*SELECT* 1".s_market_id, "*SELECT* 1"."?column?"
                     ->  Append
                           ->  Subquery Scan on "*SELECT* 1"
                                 Output: NULL::text, "*SELECT* 1".s_market_id, "*SELECT* 1"."?column?"
                                 ->  HashAggregate
                                       Output: (NULL::text), store.s_market_id, (((3 + (store.s_market_id % 4)))::numeric - (-29.09)), item.i_class_id
                                       Group By Key: NULL::text, item.i_class_id, store.s_market_id
                                       ->  Hash Join
                                             Output: NULL::text, store.s_market_id, item.i_class_id
                                             Hash Cond: (item.i_class_id = store.s_company_id)
                                             ->  Seq Scan on distribute_setop_1.item
                                                   Output: item.i_item_sk, item.i_item_id, item.i_class_id
                                             ->  Hash
                                                   Output: store.s_market_id, store.s_company_id
                                                   ->  Seq Scan on distribute_setop_1.store
                                                         Output: store.s_market_id, store.s_company_id
                                                         Filter: ((store.s_manager)::text ~~ '%a%'::text)
                           ->  Seq Scan on distribute_setop_1.call_center
                                 Output: 'dalf'::text, NULL::integer, 12.009
                                 Filter: ((call_center.cc_city)::text ~~ '%b%'::text)
         ->  Subquery Scan on "*SELECT* 3"
               Output: '123'::text, "*SELECT* 3".count, 6
               ->  Aggregate
                     Output: '123'::text, count(*), 6
                     ->  Seq Scan on distribute_setop_1.income_band
                           Output: income_band.ib_income_band_sk, income_band.ib_lower_bound, income_band.ib_upper_bound
(34 rows)

reset current_schema;
drop schema distribute_setop_1;
ERROR:  cannot drop schema distribute_setop_1 because other objects depend on it
DETAIL:  table distribute_setop_1.test_union_1 depends on schema distribute_setop_1
table distribute_setop_1.test_union_2 depends on schema distribute_setop_1
table distribute_setop_1.income_band depends on schema distribute_setop_1
table distribute_setop_1.store depends on schema distribute_setop_1
table distribute_setop_1.call_center depends on schema distribute_setop_1
table distribute_setop_1.item depends on schema distribute_setop_1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
