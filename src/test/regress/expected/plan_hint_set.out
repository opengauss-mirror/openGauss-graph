-- setups
create schema schema_plan_hint;
set current_schema = schema_plan_hint;
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
drop table if exists t2;
NOTICE:  table "t2" does not exist, skipping
drop table if exists t3;
NOTICE:  table "t3" does not exist, skipping
create table t1 (a int primary key, b int, c int);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t1_pkey" for table "t1"
create table t2 (a int primary key, b int, c int);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t2_pkey" for table "t2"
create table t3 (a int primary key, b int, c int);
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "t3_pkey" for table "t3"
-- insert some data to suppress no statistics warning
insert into t1 values(1,1,1);
insert into t2 values(1,1,1);
insert into t3 values(1,1,1);
analyze t1;
analyze t2;
analyze t3;
set sql_beta_feature = no_unique_index_first;
\set EXP 'EXPLAIN  (verbose off, costs off)'
\set EXPC 'EXPLAIN  (verbose off, costs on)'
-- exception
--- gucs not in whitelist
:EXP select /*+ set(plan_cache_mode force_generic_plan) */ * from t1;
WARNING:  SetHint is invalid. Parameter [plan_cache_mode] is not in whitelist.
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--- invalid value
:EXP select /*+ set(enable_seqscan ok) */ * from t1;
WARNING:  parameter "enable_seqscan" requires a Boolean value
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--- false grammar
:EXP select /*+ set(enable_seqscan=on) */ * from t1;
WARNING:  LINE 1: syntax error at '='
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

--- set hint in subquery won't work
:EXP select (select /*+ set(enable_seqscan off) */ count(*) from t1 where t2.b = t1.b), b ,c from t2 where t2.a = (select /*+ set(enable_seqscan off) */ t3.b from t3 where t3.b = t2.c and t3.b < 10 order by 1 limit 1) and t2.c < 50 order by 1,2,3;
WARNING:  unused hint: Set(enable_seqscan off)
WARNING:  unused hint: Set(enable_seqscan off)
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: ((SubPlan 1)), schema_plan_hint.t2.b, schema_plan_hint.t2.c
   ->  Nested Loop
         Join Filter: ((schema_plan_hint.t2.c = subquery."?column?") AND (schema_plan_hint.t2.a = subquery.b))
         ->  Seq Scan on t2
               Filter: (c < 50)
         ->  Subquery Scan on subquery
               Filter: (subquery."?column?" OPERATOR(pg_catalog.=) 1::bigint)
               ->  WindowAgg
                     ->  Sort
                           Sort Key: t3.b
                           ->  Nested Loop Semi Join
                                 Join Filter: (t3.b = schema_plan_hint.t2.c)
                                 ->  Seq Scan on t3
                                       Filter: ((b < 10) AND (b < 50))
                                 ->  Seq Scan on t2
                                       Filter: ((c < 50) AND (c < 10))
         SubPlan 1
           ->  Aggregate
                 ->  Seq Scan on t1
                       Filter: (schema_plan_hint.t2.b = b)
(21 rows)

--- set hint in pull-up subquery won't work
:EXP select * from t1 where t1.a in (select /*+ set(enable_seqscan off) */ t2.a from t2 where t2.a = 1);
       QUERY PLAN        
-------------------------
 Nested Loop Semi Join
   ->  Seq Scan on t1
         Filter: (a = 1)
   ->  Seq Scan on t2
         Filter: (a = 1)
(5 rows)

--- duplicate hint. only last one is effective
:EXP select /*+ set(enable_seqscan off) set(enable_seqscan on)  */ * from t1 where t1.a = 1;
    QUERY PLAN     
-------------------
 Seq Scan on t1
   Filter: (a = 1)
(2 rows)

-- booleans
--- turn off all supported toggles
set enable_bitmapscan           = off;
set enable_hashagg              = off;
set enable_hashjoin             = off;
set enable_index_nestloop       = off;
set enable_indexonlyscan        = off;
set enable_indexscan            = off;
set enable_material             = off;
set enable_mergejoin            = off;
set enable_nestloop             = off;
set enable_seqscan              = off;
set enable_sort                 = off;
set enable_tidscan              = off;
--- scans
:EXP select /*+ set(enable_seqscan on) */ a from t1 where t1.a = 1;
    QUERY PLAN     
-------------------
 Seq Scan on t1
   Filter: (a = 1)
(2 rows)

:EXP select /*+ set(enable_indexscan on) */ a from t1 where t1.a = 1;
           QUERY PLAN           
--------------------------------
 [Bypass]
 Index Scan using t1_pkey on t1
   Index Cond: (a = 1)
(3 rows)

:EXP select /*+ set(enable_bitmapscan on) */ a from t1 where t1.a = 1;
             QUERY PLAN             
------------------------------------
 Bitmap Heap Scan on t1
   Recheck Cond: (a = 1)
   ->  Bitmap Index Scan on t1_pkey
         Index Cond: (a = 1)
(4 rows)

:EXP select /*+ set(enable_indexscan on) set(enable_indexonlyscan on) */ a from t1 where t1.a = 1;
             QUERY PLAN              
-------------------------------------
 [Bypass]
 Index Only Scan using t1_pkey on t1
   Index Cond: (a = 1)
(3 rows)

:EXP select /*+ set(enable_tidscan on) */ a from t1 where t1.ctid = '(0,1)';
            QUERY PLAN             
-----------------------------------
 Tid Scan on t1
   TID Cond: (ctid = '(0,1)'::tid)
(2 rows)

set enable_seqscan              = on;
set enable_indexscan            = on;
set enable_bitmapscan           = on;
set enable_indexonlyscan        = on;
set enable_tidscan              = on;
--- joins
:EXP select /*+ set(enable_nestloop on) */ * from t1, t2 where t1.a = t2.a;
          QUERY PLAN          
------------------------------
 Nested Loop
   Join Filter: (t1.a = t2.a)
   ->  Seq Scan on t1
   ->  Seq Scan on t2
(4 rows)

:EXP select /*+ set(enable_mergejoin on) */ * from t1, t2 where t1.a = t2.a;
              QUERY PLAN              
--------------------------------------
 Merge Join
   Merge Cond: (t1.a = t2.a)
   ->  Index Scan using t1_pkey on t1
   ->  Index Scan using t2_pkey on t2
(4 rows)

:EXP select /*+ set(enable_hashjoin on) */ * from t1, t2 where t1.a = t2.a;
         QUERY PLAN         
----------------------------
 Hash Join
   Hash Cond: (t1.a = t2.a)
   ->  Seq Scan on t1
   ->  Hash
         ->  Seq Scan on t2
(5 rows)

:EXP select /*+ set(enable_index_nestloop on)  rows(t2 #100000) */ * from t1, t2 where t1.a = t2.a;
              QUERY PLAN              
--------------------------------------
 Nested Loop
   ->  Seq Scan on t1
   ->  Index Scan using t2_pkey on t2
         Index Cond: (a = t1.a)
(4 rows)

set enable_mergejoin            = on;
set enable_nestloop             = on;
set enable_index_nestloop       = on;
--- materials (material is not prefered by cost model when centralized)
:EXP select /*+ set(enable_material on) rows(t1 #10000000) rows(t2 #10000000) */ * from t1, t2 where t1.b = t2.b;
          QUERY PLAN          
------------------------------
 Nested Loop
   Join Filter: (t1.b = t2.b)
   ->  Seq Scan on t1
   ->  Seq Scan on t2
(4 rows)

:EXP select /*+ set(enable_sort on) rows(t1 #10000000) rows(t2 #10000000) */ * from t1, t2 where t1.b = t2.b;
         QUERY PLAN          
-----------------------------
 Merge Join
   Merge Cond: (t1.b = t2.b)
   ->  Sort
         Sort Key: t1.b
         ->  Seq Scan on t1
   ->  Sort
         Sort Key: t2.b
         ->  Seq Scan on t2
(8 rows)

set enable_material             = on;
set enable_sort                 = on;
set enable_hashjoin             = on;
--- aggregates
:EXP select /*+ set(enable_hashagg on) */ count(b), a from t1 group by a;
      QUERY PLAN      
----------------------
 HashAggregate
   Group By Key: a
   ->  Seq Scan on t1
(3 rows)

set enable_hashagg              = on;
-- numeric
--- integer
:EXP select /*+ set(query_dop 1064) */ * from t1;
               QUERY PLAN                
-----------------------------------------
 Streaming(type: LOCAL GATHER dop: 1/64)
   ->  Seq Scan on t1
(2 rows)

--- float
:EXP select /*+ set(cost_weight_index 100) */ a from t1 where t1.a = 1;
    QUERY PLAN     
-------------------
 Seq Scan on t1
   Filter: (a = 1)
(2 rows)

:EXP select /*+ set(cost_weight_index 1e-5) */ a from t1 where t1.a = 1;
             QUERY PLAN              
-------------------------------------
 [Bypass]
 Index Only Scan using t1_pkey on t1
   Index Cond: (a = 1)
(3 rows)

:EXP select /*+ set(cost_weight_index 0.0001) */ a from t1 where t1.a = 1;
             QUERY PLAN              
-------------------------------------
 [Bypass]
 Index Only Scan using t1_pkey on t1
   Index Cond: (a = 1)
(3 rows)

prepare p1 as select /*+ set(default_limit_rows 100) rows(t1 #1000) */ * from t1 limit $1;
set plan_cache_mode = force_generic_plan;
:EXPC execute p1(100);
                         QUERY PLAN                         
------------------------------------------------------------
 Limit  (cost=0.00..0.10 rows=100 width=12)
   ->  Seq Scan on t1  (cost=0.00..1.01 rows=1000 width=12)
(2 rows)

-- cplan/gplan
set plan_cache_mode = force_custom_plan;
prepare p2 as select /*+ use_cplan */ * from t1 where a = $1;
:EXPC execute p2(100);
                    QUERY PLAN                     
---------------------------------------------------
 Seq Scan on t1  (cost=0.00..1.01 rows=1 width=12)
   Filter: (a = 100)
(2 rows)

set plan_cache_mode = force_generic_plan;
prepare p3 as select /*+ use_gplan */ * from t1 where a = $1;
:EXPC execute p3(100);
                    QUERY PLAN                     
---------------------------------------------------
 Seq Scan on t1  (cost=0.00..1.01 rows=1 width=12)
   Filter: (a = $1)
(2 rows)

-- set hint in view is not effective
create view hint_view as select /*+ set(query_dop 1064) */ * from t1;
:EXP select * from hint_view;
   QUERY PLAN   
----------------
 Seq Scan on t1
(1 row)

-- set hint in create table as
--- no hint
begin;
explain (verbose on, analyze on) create table t4 as select * from t1 where t1.a = 1;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
--? Insert on schema_plan_hint.t4  (cost=0.00..1.01 rows=1 width=12) (actual time=.* rows=1 loops=1)
--?   ->  Seq Scan on schema_plan_hint.t1  (cost=0.00..1.01 rows=1 width=12) (actual time=.* rows=1 loops=1)
         Output: t1.a, t1.b, t1.c
         Filter: (t1.a = 1)
--?.*
(5 rows)

rollback;
--- with hint
begin;
explain (verbose on, analyze on) create table t4 as select /*+ set(enable_seqscan off) */* from t1 where t1.a = 1;
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
--? Insert on schema_plan_hint.t4  (cost=0.00..8.27 rows=1 width=12) (actual time=.* rows=1 loops=1)
--?   ->  Index Scan using t1_pkey on schema_plan_hint.t1  (cost=0.00..8.27 rows=1 width=12) (actual time=.* rows=1 loops=1)
         Output: t1.a, t1.b, t1.c
         Index Cond: (t1.a = 1)
--?.*
(5 rows)

rollback;
-- set hint in function execution (centralized does not support auto_explain for now)
-- cleanup
drop schema schema_plan_hint cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table t1
drop cascades to table t2
drop cascades to table t3
drop cascades to view hint_view
