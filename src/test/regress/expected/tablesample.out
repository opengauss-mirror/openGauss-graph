set enable_nestloop=off;
set enable_mergejoin=off;
create schema tablesample_schema;
set current_schema = tablesample_schema;
create table test_tablesample_row(id int, name text, salary numeric);
create table test_tablesample_row_rep(id int, name text, salary numeric) ;
create table test_tablesample_row_part(id int, name text, salary numeric)
partition by range(id) 
(
partition p1 values less than (100), 
partition p2 values less than (200), 
partition p3 values less than (300), 
partition p4 values less than (400),
partition p5 values less than (500),
partition p6 values less than (600),
partition p7 values less than (700),
partition p8 values less than (800),
partition p9 values less than (900),
partition p10 values less than (maxvalue)
);
insert into test_tablesample_row select generate_series(1, 1000), 'row'|| generate_series(1,1000), generate_series(1, 1000);
insert into test_tablesample_row_rep select * from test_tablesample_row;
insert into test_tablesample_row_part select * from test_tablesample_row;
analyze test_tablesample_row;
analyze test_tablesample_row_rep;
analyze test_tablesample_row_part;
select count(*) from test_tablesample_row tablesample system (0);
 count 
-------
     0
(1 row)

select count(*) from test_tablesample_row tablesample system (50) repeatable (500);
 count 
-------
   445
(1 row)

select count(*) from test_tablesample_row tablesample system (50) repeatable (0);
 count 
-------
   445
(1 row)

-- repeatable is random
select count(*) from test_tablesample_row tablesample system (50) repeatable (-200);
 count 
-------
   370
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row tablesample system (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample system (100) repeatable (3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample system (100) repeatable (0.4);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample bernoulli (50) repeatable (200);
 count 
-------
   529
(1 row)

select count(*) from test_tablesample_row where random() < 0.5;
 count 
-------
   463
(1 row)

select count(*) from test_tablesample_row tablesample bernoulli (5.5) repeatable (0);
 count 
-------
    48
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row tablesample bernoulli (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample bernoulli (100) repeatable (0);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample bernoulli (100) repeatable (2.3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row tablesample hybrid (50, 50) repeatable (5);
 count 
-------
   487
(1 row)

explain (verbose on, costs off) 
  select id from test_tablesample_row tablesample system (50) repeatable (2);
                           QUERY PLAN                           
----------------------------------------------------------------
 Sample Scan on tablesample_schema.test_tablesample_row
   Output: id
   Sampling: system (50::real) REPEATABLE (2::double precision)
(3 rows)

select count(*) from test_tablesample_row_rep tablesample system (50) repeatable (500);
 count 
-------
   445
(1 row)

select count(*) from test_tablesample_row_rep tablesample system (50) repeatable (0);
 count 
-------
   445
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row_rep tablesample system (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample system (100) repeatable (3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample system (100) repeatable (0.4);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample bernoulli (50) repeatable (200);
 count 
-------
   529
(1 row)

select count(*) from test_tablesample_row_rep tablesample bernoulli (5.5) repeatable (0);
 count 
-------
    51
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row_rep tablesample bernoulli (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample bernoulli (100) repeatable (0);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample bernoulli (100) repeatable (2.3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_rep tablesample hybrid (100, 50) repeatable (5);
 count 
-------
   531
(1 row)

explain (verbose on, costs off) 
  select id from test_tablesample_row_rep tablesample bernoulli (50) repeatable (2);
                            QUERY PLAN                             
-------------------------------------------------------------------
 Sample Scan on tablesample_schema.test_tablesample_row_rep
   Output: id
   Sampling: bernoulli (50::real) REPEATABLE (2::double precision)
(3 rows)

select count(*) from test_tablesample_row_part tablesample system (50) repeatable (500);
 count 
-------
   500
(1 row)

select count(*) from test_tablesample_row_part tablesample system (50) repeatable (0);
 count 
-------
   601
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row_part tablesample system (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample system (100) repeatable (3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample system (100) repeatable (0.4);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample bernoulli (50) repeatable (200);
 count 
-------
   529
(1 row)

select count(*) from test_tablesample_row_part tablesample bernoulli (5.5) repeatable (0);
 count 
-------
    51
(1 row)

-- 100% should give repeatable count results (ie, all rows) in any case
select count(*) from test_tablesample_row_part tablesample bernoulli (100);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample bernoulli (100) repeatable (0);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample bernoulli (100) repeatable (2.3);
 count 
-------
  1000
(1 row)

select count(*) from test_tablesample_row_part tablesample hybrid (100, 100) repeatable (5);
 count 
-------
  1000
(1 row)

explain (verbose on, costs off) 
  select id from test_tablesample_row_part tablesample hybrid (100, 100) repeatable (5) where id > 300;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Partition Iterator
   Output: id
   Iterations: 7
   ->  Partitioned Sample Scan on tablesample_schema.test_tablesample_row_part
         Output: id
         Sampling: hybrid (100::real, 100::real) REPEATABLE (5::double precision)
         Filter: (test_tablesample_row_part.id > 300)
         Selected Partitions:  4..10
(8 rows)

-- create view for tablesample
create view test_tablesample_v1 as
  select * from test_tablesample_row tablesample system (60) repeatable (500);
create view test_tablesample_v2 as
  select * from test_tablesample_row tablesample system (99);
\d+ test_tablesample_v1
     View "tablesample_schema.test_tablesample_v1"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 id     | integer |           | plain    | 
 name   | text    |           | extended | 
 salary | numeric |           | main     | 
View definition:
 SELECT  *
   FROM test_tablesample_row TABLESAMPLE SYSTEM (60) REPEATABLE (500);

\d+ test_tablesample_v2
     View "tablesample_schema.test_tablesample_v2"
 Column |  Type   | Modifiers | Storage  | Description 
--------+---------+-----------+----------+-------------
 id     | integer |           | plain    | 
 name   | text    |           | extended | 
 salary | numeric |           | main     | 
View definition:
 SELECT  *
   FROM test_tablesample_row TABLESAMPLE SYSTEM (99);

-- check that collations get assigned within the tablesample arguments
select count(*) from test_tablesample_row tablesample bernoulli (('1'::text < '0'::text)::int);
 count 
-------
     0
(1 row)

-- errors
select id from test_tablesample_row tablesample foobar (1);
ERROR:  Invalid tablesample method foobar
LINE 1: select id from test_tablesample_row tablesample foobar (1);
                                                        ^
select id from test_tablesample_row tablesample system (null);
ERROR:  TABLESAMPLE parameter cannot be null
select id from test_tablesample_row tablesample system (50) repeatable (null);
ERROR:  TABLESAMPLE REPEATABLE parameter cannot be null
select id from test_tablesample_row tablesample bernoulli (-1);
ERROR:  sample percentage must be between 0 and 100
select id from test_tablesample_row tablesample bernoulli (200);
ERROR:  sample percentage must be between 0 and 100
select id from test_tablesample_row tablesample system (-1);
ERROR:  sample percentage must be between 0 and 100
select id from test_tablesample_row tablesample system (200);
ERROR:  sample percentage must be between 0 and 100
select id from test_tablesample_row tablesample hybrid (200, -1);
ERROR:  sample percentage must be between 0 and 100
select id from test_tablesample_row tablesample hybrid (100);
ERROR:  tablesample method hybrid requires 2 argument, not 1
LINE 1: select id from test_tablesample_row tablesample hybrid (100)...
                                                        ^
with query_select as (select * from test_tablesample_row)
select * from query_select tablesample bernoulli (5.5) repeatable (1);
ERROR:  TABLESAMPLE clause can only be applied to tables.
LINE 2: select * from query_select tablesample bernoulli (5.5) repea...
                      ^
select q.* from (select * from test_tablesample_row) as q tablesample bernoulli (5);
ERROR:  syntax error at or near "tablesample"
LINE 1: ....* from (select * from test_tablesample_row) as q tablesampl...
                                                             ^
select a.*  from test_tablesample_row_part partition(p1) a tablesample bernoulli (5);
ERROR:  syntax error at or near "tablesample"
LINE 1: ...*  from test_tablesample_row_part partition(p1) a tablesampl...
                                                             ^
explain verbose select * from test_tablesample_row tablesample system (50) repeatable (500);
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Sample Scan on tablesample_schema.test_tablesample_row  (cost=0.00..17.00 rows=500 width=15)
   Output: id, name, salary
   Sampling: system (50::real) REPEATABLE (500::double precision)
(3 rows)

-- hdfs table and foreign table unsupport tablesample
reset search_path;
drop schema  tablesample_schema cascade;
NOTICE:  drop cascades to 5 other objects
DETAIL:  drop cascades to table tablesample_schema.test_tablesample_row
drop cascades to table tablesample_schema.test_tablesample_row_rep
drop cascades to table tablesample_schema.test_tablesample_row_part
drop cascades to view tablesample_schema.test_tablesample_v1
drop cascades to view tablesample_schema.test_tablesample_v2
