\! gs_ktool -d all
DELETE ALL

\! gs_ktool -g
GENERATE
1
DROP CLIENT MASTER KEY IF EXISTS MyCMK1 CASCADE;
NOTICE:  client master key "mycmk1" does not exist
-- create another user
DROP ROLE IF EXISTS newuser;
NOTICE:  role "newuser" does not exist, skipping
CREATE USER newuser PASSWORD 'gauss@123';
-- create schema
DROP SCHEMA IF EXISTS testns CASCADE;
NOTICE:  schema "testns" does not exist, skipping
CREATE SCHEMA testns;
SET search_path to testns;
-- grant privileges on schema (ALL = USAGE, CREATE)
GRANT ALL ON SCHEMA testns TO newuser;
-- CREATE CMK
CREATE CLIENT MASTER KEY MyCMK1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
-- CREATE CEK
CREATE COLUMN ENCRYPTION KEY MyCEK1 WITH VALUES (CLIENT_MASTER_KEY = MyCMK1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
-------------------------
-- change to new user
-------------------------
SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
-- add permission to the keys to  newuser 
RESET SESSION AUTHORIZATION;
GRANT USAGE ON COLUMN_ENCRYPTION_KEY MyCEK1 to newuser;
GRANT USAGE ON CLIENT_MASTER_KEY MyCMK1 to newuser;
SET SESSION AUTHORIZATION newuser PASSWORD 'gauss@123';
SET search_path to testns;
-- create TABLE 
CREATE TABLE acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = MyCEK1, ENCRYPTION_TYPE = DETERMINISTIC));
SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'USAGE');
 has_cmk_privilege 
-------------------
 t
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'USAGE');
 has_cek_privilege 
-------------------
 t
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'USAGE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'CREATE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_table_privilege('newuser', 'acltest1', 'INSERT, SELECT, UPDATE, DELETE, TRUNCATE, TRIGGER');
 has_table_privilege 
---------------------
 t
(1 row)

RESET SESSION AUTHORIZATION;
DROP TABLE acltest1;
REVOKE USAGE ON COLUMN_ENCRYPTION_KEY MyCEK1 FROM newuser;
REVOKE USAGE ON CLIENT_MASTER_KEY MyCMK1 FROM newuser;
SELECT has_cmk_privilege('newuser', 'testns.MyCMK1', 'USAGE');
 has_cmk_privilege 
-------------------
 f
(1 row)

SELECT has_cek_privilege('newuser', 'testns.MyCEK1', 'USAGE');
 has_cek_privilege 
-------------------
 f
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'USAGE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_schema_privilege('newuser', 'testns', 'CREATE');
 has_schema_privilege 
----------------------
 t
(1 row)

SELECT has_table_privilege('newuser', 'acltest1', 'INSERT, SELECT, UPDATE, DELETE, TRUNCATE, TRIGGER');
ERROR:  relation "acltest1" does not exist
CONTEXT:  referenced column: has_table_privilege
--DROP COLUMN ENCRYPTION KEY MyCEK1;
--DROP CLIENT MASTER KEY MyCMK1;
DROP SCHEMA IF EXISTS testns CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to client master key: mycmk1
drop cascades to column encryption key: mycek1
select * from gs_client_global_keys;
 global_key_name | key_namespace | key_owner | key_acl | create_date 
-----------------+---------------+-----------+---------+-------------
(0 rows)

select * from gs_column_keys;
 column_key_name | column_key_distributed_id | global_key_id | key_namespace | key_owner | create_date | key_acl 
-----------------+---------------------------+---------------+---------------+-----------+-------------+---------
(0 rows)

DROP SCHEMA IF EXISTS newuser CASCADE;
DROP ROLE IF EXISTS newuser;
\! gs_ktool -d all
DELETE ALL
 1
