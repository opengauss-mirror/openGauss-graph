create schema vector_distribute_distinct;
set current_schema = vector_distribute_distinct;
create table row_table_01 (c1 int, c2 bigint, c3 numeric) ;
insert into  row_table_01 values (11, 21, 31);
insert into  row_table_01 values (12, 22, 32);
insert into  row_table_01 values (12, NULL, 32);
insert into  row_table_01 values (13, 23, 33);
insert into  row_table_01 values (13, 23, NULL);
insert into  row_table_01 values (14, 24, 34);
insert into  row_table_01 values (NULL, 24, 34);
insert into  row_table_01 values (15, 25, 35);
insert into  row_table_01 values (16, 26, 36);
insert into  row_table_01 values (17, 27, 36);
insert into  row_table_01 values (18, 27, 36);
insert into  row_table_01 values (12, 22, 32);
insert into  row_table_01 values (17, 27, 36);
insert into  row_table_01 values (18, 27, 38);
insert into  row_table_01 values (17, 27, 37);
create table row_table_02 (c1 int, c2 bigint, c3 numeric) ;
insert into  row_table_02 values (11, 13, 31);
insert into  row_table_02 values (12, 14, 32);
insert into  row_table_02 values (12, NULL, 32);
insert into  row_table_02 values (13, 14, 33);
insert into  row_table_02 values (NULL, 14, 33);
insert into  row_table_02 values (14, 15, 34);
insert into  row_table_02 values (15, 15, 34);
analyze row_table_01;
analyze row_table_02;
create table distribute_table_01 (c1 int, c2 int, c3 int) with (orientation = column) ;
create table distribute_table_02 (c1 int, c2 int, c3 int)  with (orientation = column) ;
insert into distribute_table_01 select * from row_table_01;
insert into distribute_table_02 select * from row_table_02;
analyze distribute_table_01;
analyze distribute_table_02;
set enable_mergejoin=off; 
set enable_nestloop=off; 
--Test settings:
--1. Distinct within top query;
--2. Without Group;
--3. Without Agg;
explain (verbose, costs off) select distinct c2, c3 from distribute_table_01 order by c2, c3 asc;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Row Adapter
   Output: c2, c3
   ->  Vector Unique
         Output: c2, c3
         ->  Vector Sort
               Output: c2, c3
               Sort Key: distribute_table_01.c2, distribute_table_01.c3
               ->  CStore Scan on vector_distribute_distinct.distribute_table_01
                     Output: c2, c3
(9 rows)

explain (verbose, costs off) select distinct c1, c2, c3 from distribute_table_01 order by c1, c2, c3 asc;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Row Adapter
   Output: c1, c2, c3
   ->  Vector Unique
         Output: c1, c2, c3
         ->  Vector Sort
               Output: c1, c2, c3
               Sort Key: distribute_table_01.c1, distribute_table_01.c2, distribute_table_01.c3
               ->  CStore Scan on vector_distribute_distinct.distribute_table_01
                     Output: c1, c2, c3
(9 rows)

-- distribute key is hashkey
select distinct c1 from distribute_table_01 order by c1;
 c1 
----
 11
 12
 13
 14
 15
 16
 17
 18
   
(9 rows)

select distinct c1, c2, c3 from distribute_table_01 order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
    | 24 | 34
(13 rows)

-- distribute key is not hashkey
select distinct c2 from distribute_table_01 order by c2;
 c2 
----
 21
 22
 23
 24
 25
 26
 27
   
(8 rows)

select distinct c2, c3 from (select distribute_table_01.c2, distribute_table_02.c3 from distribute_table_01, distribute_table_02 where distribute_table_01.c1=distribute_table_02.c1) a order by c2, c3 asc;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 24 | 34
 25 | 34
    | 32
(6 rows)

--Test settings:
-- Distribute with agg
select c2, count(c3) from (select distinct c1, c2, c3 from distribute_table_01 order by c1) a group by a.c2 order by a.c2, count(c3);
 c2 | count 
----+-------
 21 |     1
 22 |     1
 23 |     1
 24 |     2
 25 |     1
 26 |     1
 27 |     4
    |     1
(8 rows)

-- Distribute key is not hashkey with semi join
select c1, c2, c3 from distribute_table_01 where c1 in (select distinct c2 from distribute_table_02 where c2 >= 12 order by c2) order by distribute_table_01.c1, distribute_table_01.c2, distribute_table_01.c3;
 c1 | c2 | c3 
----+----+----
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
(4 rows)

-- Distinct within sub query
select c2, c3 from (select distinct c2, c3 from distribute_table_01 order by c2, c3 asc) as a order by c2, c3 asc;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
    | 32
(11 rows)

select distinct c31 from (select distinct c2, count(c3) c31 from distribute_table_01 group by c2 order by c2) as a order by c31 asc;
 c31 
-----
   1
   2
   5
(3 rows)

--Test cased summarizd from user requirements
--1. With union;
--2. With or without distributed columns;
--3. Using agg or unique node;
explain (verbose, costs off) 
(select distinct c1, c2, c3 from distribute_table_01 where c1<13) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13);
                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
   ->  Vector Sonic Hash Aggregate
         Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
         Group By Key: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
         ->  Vector Append
               ->  Vector Sonic Hash Aggregate
                     Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                     Group By Key: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                     ->  CStore Scan on vector_distribute_distinct.distribute_table_01
                           Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                           Filter: (vector_distribute_distinct.distribute_table_01.c1 < 13)
               ->  Vector Sonic Hash Aggregate
                     Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                     Group By Key: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                     ->  CStore Scan on vector_distribute_distinct.distribute_table_01
                           Output: vector_distribute_distinct.distribute_table_01.c1, vector_distribute_distinct.distribute_table_01.c2, vector_distribute_distinct.distribute_table_01.c3
                           Filter: (vector_distribute_distinct.distribute_table_01.c1 >= 13)
(18 rows)

--distribute by a hash key with union
((select distinct c1, c2, c3 from distribute_table_01 where c1<13) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13)) order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
(12 rows)

--distribute by not a key with union
((select distinct c2, c3 from distribute_table_01 where c2<23) 
union
(select distinct c2, c3 from distribute_table_01 where c2>=23)) order by c2, c3;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
(10 rows)

--unique is in DN,and append is on CN
((select distinct c1, c2, c3 from distribute_table_01 where c1<13 order by c1) 
union
(select distinct c1, c2, c3 from distribute_table_01 where c1>=13)) order by c1, c2, c3;
 c1 | c2 | c3 
----+----+----
 11 | 21 | 31
 12 | 22 | 32
 12 |    | 32
 13 | 23 | 33
 13 | 23 |   
 14 | 24 | 34
 15 | 25 | 35
 16 | 26 | 36
 17 | 27 | 36
 17 | 27 | 37
 18 | 27 | 36
 18 | 27 | 38
(12 rows)

--Test cased summarizd from user requirements
--1. Distinct appears in top query and sub query simultaneously;
--2. Using agg and unique node;
select distinct a.c1, a.c2, b.cn from 
	(select c1, c2 from distribute_table_01 where c3 > 31) a,
	(select c1, count(*) cn from (select distinct c1, c2, c3 from distribute_table_01 where c3>32) group by c1 having count(*)>1) b
where a.c1=b.c1
order by cn desc, a.c1;
 c1 | c2 | cn 
----+----+----
 17 | 27 |  2
 18 | 27 |  2
(2 rows)

--Test settings:
--1. Distinct appears in top query;
--2. With Group;
select distinct c1, c2 from distribute_table_01 group by c1, c2 order by c1, c2;
 c1 | c2 
----+----
 11 | 21
 12 | 22
 12 |   
 13 | 23
 14 | 24
 15 | 25
 16 | 26
 17 | 27
 18 | 27
    | 24
(10 rows)

select distinct c2, c3 from distribute_table_01 group by c2, c3 order by c2, c3;
 c2 | c3 
----+----
 21 | 31
 22 | 32
 23 | 33
 23 |   
 24 | 34
 25 | 35
 26 | 36
 27 | 36
 27 | 37
 27 | 38
    | 32
(11 rows)

reset current_schema;
drop schema vector_distribute_distinct cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table vector_distribute_distinct.row_table_01
drop cascades to table vector_distribute_distinct.row_table_02
drop cascades to table vector_distribute_distinct.distribute_table_01
drop cascades to table vector_distribute_distinct.distribute_table_02
