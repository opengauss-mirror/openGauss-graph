/*
 * This file is used to test the function of ExecVecHashJoin()---(3)
 */
----
--- Create Table and Insert Data
----
create schema vector_hashjoin_engine_third;
set  current_schema =  vector_hashjoin_engine_third;
\parallel on  8
CREATE TABLE vector_hashjoin_engine_third.MF1_PTHNFSUB(
	STATUS DECIMAL(1,0),
	VALUEDAY DATE)with(orientation=column) distribute by hash(status);
CREATE TABLE vector_hashjoin_engine_third.MF1_NTHPARAT(  
	CURRTYPE DECIMAL(3,0),
	RATECODE DECIMAL(1,0),
	Etl_Tx_Dt DATE) with(orientation=column) distribute by hash(currtype);
 
CREATE TABLE t1_hashConst_col(col_1 int, col_2 int) with(orientation=column) distribute by hash(col_1);
CREATE TABLE t2_hashConst_col(col_1 int, col_2 int) with(orientation=column) distribute by hash(col_1);
create table ROW_HASHJOIN_TABLE_11
(
   c1 int
  ,c2 int
  ,c3 char(64)
)distribute by hash(c1);
create table ROW_HASHJOIN_TABLE_12
(
   c1 int
  ,c2 int
  ,c3 char(64)
)distribute by hash(c2);
create table VECTOR_HASHJOIN_TABLE_11
(
   c1 int
  ,c2 int
  ,c3 char(64)
)with (orientation = column) distribute by hash(c1);
create table VECTOR_HASHJOIN_TABLE_12
(
   c1 int
  ,c2 int
  ,c3 char(64)
)with (orientation = column) distribute by hash(c2);
\parallel off
\parallel on  11
insert into vector_hashjoin_engine_third.MF1_PTHNFSUB values(4, '2014-12-19');
insert into vector_hashjoin_engine_third.MF1_PTHNFSUB values(1, '2014-10-19');
insert into vector_hashjoin_engine_third.MF1_PTHNFSUB values(2, '2014-08-19');
insert into vector_hashjoin_engine_third.MF1_PTHNFSUB values(3, '2014-02-09');
insert into vector_hashjoin_engine_third.MF1_NTHPARAT values (5, 4, '2014-12-19');
insert into t1_hashConst_col values(1, 2);
insert into t2_hashConst_col values(1, 3);
insert into ROW_HASHJOIN_TABLE_11 values (1, 101, 'aec101');
insert into ROW_HASHJOIN_TABLE_11 values (generate_series(2,200), 102, 'aec102');
insert into ROW_HASHJOIN_TABLE_12 values (102, 1, 'bec102');
insert into ROW_HASHJOIN_TABLE_12 values (101, generate_series(2,200), 'bec101');
\parallel off
begin
	for i in 1..6 loop
		insert into VECTOR_HASHJOIN_TABLE_11 select * from ROW_HASHJOIN_TABLE_11;
		insert into VECTOR_HASHJOIN_TABLE_12 select * from ROW_HASHJOIN_TABLE_12;
	end loop;
end;
/
----
--- ICBC Case: HashJoin with case--when expression 
----
explain (verbose on, costs off) select 
	count(*) 
FROM 	
	vector_hashjoin_engine_third.MF1_PTHNFSUB T1  
LEFT JOIN 	
	vector_hashjoin_engine_third.MF1_NTHPARAT T2  
ON 	
	T2.CURRTYPE=1 
AND 	
	CASE WHEN CAST('20141231' AS DATE)-T1.VALUEDAY<=90 THEN substring('abcd', 1)                        	    
	     WHEN CAST('20141231' AS DATE)-T1.VALUEDAY>90 AND CAST('20141231' AS DATE)-T1.VALUEDAY<=180 THEN '0200300'                          	
	     WHEN CAST('20141231' AS DATE)-T1.VALUEDAY>180 AND CAST('20141231' AS DATE)-T1.VALUEDAY<=360 THEN trim('jjhh',4)                          	
	     ELSE '0201200'	
	END=lpad(T2.RATECODE, 7, '0');
WARNING:  Statistics in some tables or columns(vector_hashjoin_engine_third.mf1_pthnfsub.status, vector_hashjoin_engine_third.mf1_pthnfsub.valueday, vector_hashjoin_engine_third.mf1_nthparat.currtype, vector_hashjoin_engine_third.mf1_nthparat.ratecode) are not collected.
HINT:  Do analyze for them in order to generate optimized plan.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: (pg_catalog.count(*))
   ->  Vector Aggregate
         Output: pg_catalog.count(*)
         ->  Vector Streaming (type: GATHER)
               Output: (count(*))
               Node/s: All datanodes
               ->  Vector Aggregate
                     Output: count(*)
                     ->  Vector Hash Right Join
                           Output: 'Dummy'
                           Hash Cond: (lpad((t2.ratecode)::text, 7, '0'::text) = CASE WHEN (('Wed Dec 31 00:00:00 2014'::timestamp(0) without time zone - t1.valueday) <= '@ 90 days'::interval) THEN 'abcd'::text WHEN ((('Wed Dec 31 00:00:00 2014'::timestamp(0) without time zone - t1.valueday) > '@ 90 days'::interval) AND (('Wed Dec 31 00:00:00 2014'::timestamp(0) without time zone - t1.valueday) <= '@ 180 days'::interval)) THEN '0200300'::text WHEN ((('Wed Dec 31 00:00:00 2014'::timestamp(0) without time zone - t1.valueday) > '@ 180 days'::interval) AND (('Wed Dec 31 00:00:00 2014'::timestamp(0) without time zone - t1.valueday) <= '@ 360 days'::interval)) THEN 'jjhh'::text ELSE '0201200'::text END)
                           ->  Vector Streaming(type: BROADCAST)
                                 Output: t2.ratecode
                                 Spawn on: datanode6
                                 Consumer Nodes: All datanodes
                                 ->  CStore Scan on vector_hashjoin_engine_third.mf1_nthparat t2
                                       Output: t2.ratecode
                                       Distribute Key: t2.currtype
                                       Filter: (t2.currtype = 1::numeric)
                           ->  CStore Scan on vector_hashjoin_engine_third.mf1_pthnfsub t1
                                 Output: t1.valueday
                                 Distribute Key: t1.status
(23 rows)

select 
	count(*) 
FROM 	
	vector_hashjoin_engine_third.MF1_PTHNFSUB T1  
LEFT JOIN 	
	vector_hashjoin_engine_third.MF1_NTHPARAT T2  
ON 	
	T2.CURRTYPE=1 
AND 	
	CASE WHEN CAST('20141231' AS DATE)-T1.VALUEDAY<=90 THEN substring('abcd', 1)                        	    
	     WHEN CAST('20141231' AS DATE)-T1.VALUEDAY>90 AND CAST('20141231' AS DATE)-T1.VALUEDAY<=180 THEN '0200300'                          	
	     WHEN CAST('20141231' AS DATE)-T1.VALUEDAY>180 AND CAST('20141231' AS DATE)-T1.VALUEDAY<=360 THEN trim('jjhh',4)                          	
	     ELSE '0201200'	
	END=lpad(T2.RATECODE, 7, '0');
 count 
-------
     4
(1 row)

	
--test for semi join 
explain (verbose on, costs off)  
SELECT    'COL' AS ETL_SERVER,
    D.ETL_SYSTEM,
    D.ETL_JOB
FROM ETL_JOB_DEPENDENCY D,ETL_JOB_PRIORITY P
WHERE D.ETL_JOB=P.ETL_JOB
AND D.ENABLE='1'
AND D.ETL_JOB IN (
SELECT NEXT_JOB FROM (SELECT NEXT_JOB
FROM (SELECT N2.*, D.DEPENDENCY_JOB AS NEXT_JOB_DEPENDENCY_JOB
FROM (SELECT N.DEPENDENCY_JOB  AS FINISHED_JOB,
    N.ETL_JOB         AS NEXT_JOB
FROM ETL_JOB_DEPENDENCY N
WHERE N.DEPENDENCY_JOB = 'MF1_PTHGKSUB_A'
AND N.ENABLE='1') N2
 left JOIN ETL_JOB_DEPENDENCY D ON (N2.NEXT_JOB = D.ETL_JOB AND D.ENABLE='1')) N3
 left JOIN ETL_JOB J2 ON (J2.ETL_JOB = N3.NEXT_JOB_DEPENDENCY_JOB AND J2.LAST_TXDATE = TO_DATE('2015-05-28 13:49:47','yyyy-mm-dd hh24:mi:ss'))
GROUP BY NEXT_JOB)
) order by 1,2,3;
ERROR:  relation "etl_job_dependency" does not exist
LINE 5: FROM ETL_JOB_DEPENDENCY D,ETL_JOB_PRIORITY P
             ^
SELECT    'COL' AS ETL_SERVER,
    D.ETL_SYSTEM,
    D.ETL_JOB
FROM ETL_JOB_DEPENDENCY D,ETL_JOB_PRIORITY P
WHERE D.ETL_JOB=P.ETL_JOB
AND D.ENABLE='1'
AND D.ETL_JOB IN (
SELECT NEXT_JOB FROM (SELECT NEXT_JOB
FROM (SELECT N2.*, D.DEPENDENCY_JOB AS NEXT_JOB_DEPENDENCY_JOB
FROM (SELECT N.DEPENDENCY_JOB  AS FINISHED_JOB,
    N.ETL_JOB         AS NEXT_JOB
FROM ETL_JOB_DEPENDENCY N
WHERE N.DEPENDENCY_JOB = 'MF1_PTHGKSUB_A'
AND N.ENABLE='1') N2
 left JOIN ETL_JOB_DEPENDENCY D ON (N2.NEXT_JOB = D.ETL_JOB AND D.ENABLE='1')) N3
 left JOIN ETL_JOB J2 ON (J2.ETL_JOB = N3.NEXT_JOB_DEPENDENCY_JOB AND J2.LAST_TXDATE = TO_DATE('2015-05-28 13:49:47','yyyy-mm-dd hh24:mi:ss'))
GROUP BY NEXT_JOB)
) order by 1,2,3;
ERROR:  relation "etl_job_dependency" does not exist
LINE 4: FROM ETL_JOB_DEPENDENCY D,ETL_JOB_PRIORITY P
             ^
   
explain (verbose on, costs off)select count(*) from t1_hashConst_col left join t2_hashConst_col on(t1_hashConst_col.col_1 = t2_hashConst_col.col_1 and t1_hashConst_col.col_2 > t2_hashConst_col.col_2);
WARNING:  Statistics in some tables or columns(vector_hashjoin_engine_third.t1_hashconst_col.col_1, vector_hashjoin_engine_third.t2_hashconst_col.col_1) are not collected.
HINT:  Do analyze for them in order to generate optimized plan.
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Row Adapter
   Output: (pg_catalog.count(*))
   ->  Vector Aggregate
         Output: pg_catalog.count(*)
         ->  Vector Streaming (type: GATHER)
               Output: (count(*))
               Node/s: All datanodes
               ->  Vector Aggregate
                     Output: count(*)
                     ->  Vector Hash Left Join
                           Output: 'Dummy'
                           Hash Cond: (t1_hashconst_col.col_1 = t2_hashconst_col.col_1)
                           Join Filter: (t1_hashconst_col.col_2 > t2_hashconst_col.col_2)
                           ->  CStore Scan on vector_hashjoin_engine_third.t1_hashconst_col
                                 Output: t1_hashconst_col.col_1, t1_hashconst_col.col_2
                                 Distribute Key: t1_hashconst_col.col_1
                           ->  CStore Scan on vector_hashjoin_engine_third.t2_hashconst_col
                                 Output: t2_hashconst_col.col_1, t2_hashconst_col.col_2
                                 Distribute Key: t2_hashconst_col.col_1
(19 rows)

select count(*) from t1_hashConst_col left join t2_hashConst_col on(t1_hashConst_col.col_1 = t2_hashConst_col.col_1 and t1_hashConst_col.col_2 > t2_hashConst_col.col_2);
 count 
-------
     1
(1 row)

---
-- test repartition process in hash join
---
analyze VECTOR_HASHJOIN_TABLE_11;
analyze VECTOR_HASHJOIN_TABLE_12;
set work_mem=64;
set enable_nestloop=off;
set enable_mergejoin=off;
set enable_compress_spill=on;
explain (verbose on, costs off) select A.c2, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner join VECTOR_HASHJOIN_TABLE_12 B on A.c2=B.c1 group by A.c2 order by A.c2
select A.c2, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner join VECTOR_HASHJOIN_TABLE_12 B on A.c2=B.c1 group by A.c2 order by A.c2;
ERROR:  syntax error at or near "select"
LINE 2: select A.c2, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner ...
        ^
select B.c1, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on A.c2=B.c1 group by B.c1 order by B.c1;
 c1  | count 
-----+-------
 101 |  7164
 102 |  7164
(2 rows)

select A.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) group by A.c3 order by A.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 aec101                                                           |  7164
 aec102                                                           |  7164
(2 rows)

select B.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) group by B.c3 order by B.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 bec101                                                           |  7164
 bec102                                                           |  7164
(2 rows)

select B.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) and A.c1+1=B.c2+2 group by B.c3 order by B.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 bec101                                                           |  1194
 bec102                                                           |    36
(2 rows)

set enable_compress_spill=off;
explain (verbose on, costs off) select B.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) group by B.c3 order by B.c3;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: b.c3, (pg_catalog.count(*))
   ->  Vector Sort
         Output: b.c3, (pg_catalog.count(*))
         Sort Key: b.c3
         ->  Vector Sonic Hash Aggregate
               Output: b.c3, pg_catalog.count(*)
               Group By Key: b.c3
               ->  Vector Streaming (type: GATHER)
                     Output: b.c3, (count(*))
                     Node/s: All datanodes
                     ->  Vector Sonic Hash Aggregate
                           Output: b.c3, count(*)
                           Group By Key: b.c3
                           ->  Vector Hash Left Join
                                 Output: b.c3
                                 Hash Cond: (("substring"((b.c3)::text, 2)) = "substring"((a.c3)::text, 2))
                                 ->  Vector Streaming(type: REDISTRIBUTE)
                                       Output: b.c3, ("substring"((b.c3)::text, 2))
                                       Distribute Key: ("substring"((b.c3)::text, 2))
                                       Spawn on: All datanodes
                                       Consumer Nodes: All datanodes
                                       ->  CStore Scan on vector_hashjoin_engine_third.vector_hashjoin_table_12 b
                                             Output: b.c3, "substring"((b.c3)::text, 2)
                                             Distribute Key: b.c2
                                 ->  Vector Streaming(type: REDISTRIBUTE)
                                       Output: a.c3, ("substring"((a.c3)::text, 2))
                                       Distribute Key: ("substring"((a.c3)::text, 2))
                                       Spawn on: All datanodes
                                       Consumer Nodes: All datanodes
                                       ->  CStore Scan on vector_hashjoin_engine_third.vector_hashjoin_table_11 a
                                             Output: a.c3, "substring"((a.c3)::text, 2)
                                             Distribute Key: a.c1
(33 rows)

select A.c2, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner join VECTOR_HASHJOIN_TABLE_12 B on A.c2=B.c1 group by A.c2 order by A.c2;
 c2  | count 
-----+-------
 101 |  7164
 102 |  7164
(2 rows)

select B.c1, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on A.c2=B.c1 group by B.c1 order by B.c1;
 c1  | count 
-----+-------
 101 |  7164
 102 |  7164
(2 rows)

select A.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A inner join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) group by A.c3 order by A.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 aec101                                                           |  7164
 aec102                                                           |  7164
(2 rows)

select B.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) group by B.c3 order by B.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 bec101                                                           |  7164
 bec102                                                           |  7164
(2 rows)

select B.c3, count(*) from VECTOR_HASHJOIN_TABLE_11 A right join VECTOR_HASHJOIN_TABLE_12 B on substring(A.c3, 2) = substring(B.c3, 2) and A.c1+1=B.c2+2 group by B.c3 order by B.c3;
                                c3                                | count 
------------------------------------------------------------------+-------
 bec101                                                           |  1194
 bec102                                                           |    36
(2 rows)

reset work_mem;
set query_dop = 2002;
----
--- Clean table and resource
----
drop schema vector_hashjoin_engine_third cascade;
NOTICE:  drop cascades to 8 other objects
--?DETAIL:  drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
--?drop cascades to table .*
