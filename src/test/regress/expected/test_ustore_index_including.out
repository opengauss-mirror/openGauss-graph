/*
 * 1.test CREATE INDEX
 */
-- Regular index with included columns
set enable_default_ustore_table = on;
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
CREATE INDEX tbl_idx ON tbl using ubtree (c1, c2) INCLUDE (c3,c4);
-- must fail because of intersection of key and included columns
CREATE INDEX tbl_idx ON tbl using ubtree (c1, c2) INCLUDE (c1,c3);
ERROR:  included columns must not intersect with key columns
SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl'::regclass ORDER BY c.relname;
                                          pg_get_indexdef                                           
----------------------------------------------------------------------------------------------------
 CREATE INDEX tbl_idx ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

DROP TABLE tbl;
-- Unique index and unique constraint
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
CREATE UNIQUE INDEX tbl_idx_unique ON tbl using ubtree (c1, c2) INCLUDE (c3, c4);
ALTER TABLE tbl add UNIQUE USING INDEX tbl_idx_unique;
ALTER TABLE tbl add UNIQUE (c1, c2) INCLUDE (c3, c4);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl'::regclass ORDER BY c.relname;
                                                    pg_get_indexdef                                                    
-----------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
 CREATE UNIQUE INDEX tbl_idx_unique ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(2 rows)

DROP TABLE tbl;
-- Unique index and unique constraint. Both must fail.
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
CREATE UNIQUE INDEX tbl_idx_unique ON tbl using ubtree (c1, c2) INCLUDE (c3, c4);
ERROR:  could not create unique index "tbl_idx_unique"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.
ALTER TABLE tbl add UNIQUE (c1, c2) INCLUDE (c3, c4);
NOTICE:  ALTER TABLE / ADD UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
ERROR:  could not create unique index "tbl_c1_c2_c3_c4_key"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.
DROP TABLE tbl;
-- PK constraint
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT 1, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ALTER TABLE tbl add PRIMARY KEY (c1, c2) INCLUDE (c3, c4);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "tbl_pkey" for table "tbl"
SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl'::regclass ORDER BY c.relname;
                                              pg_get_indexdef                                               
------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_pkey ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

DROP TABLE tbl;
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT 1, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
CREATE UNIQUE INDEX tbl_idx_unique ON tbl using ubtree (c1, c2) INCLUDE (c3, c4);
ALTER TABLE tbl add PRIMARY KEY USING INDEX tbl_idx_unique;
SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl'::regclass ORDER BY c.relname;
                                                 pg_get_indexdef                                                  
------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_idx_unique ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

DROP TABLE tbl;
-- PK constraint. Must fail.
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ALTER TABLE tbl add PRIMARY KEY (c1, c2) INCLUDE (c3, c4);
NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "tbl_pkey" for table "tbl"
ERROR:  could not create unique index "tbl_pkey"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.
DROP TABLE tbl;
/*
 * 2. Test CREATE TABLE with constraint
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				CONSTRAINT covering UNIQUE(c1,c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "covering" for table "tbl"
SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
 indexrelid | indnatts | indnkeyatts | indisunique | indisprimary | indkey  |  indclass   
------------+----------+-------------+-------------+--------------+---------+-------------
 covering   |        4 |           2 | t           | f            | 1 2 3 4 | 10179 10179
(1 row)

SELECT pg_get_constraintdef(oid), conname, conkey, conincluding FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
       pg_get_constraintdef       | conname  | conkey | conincluding 
----------------------------------+----------+--------+--------------
 UNIQUE (c1, c2) INCLUDE (c3, c4) | covering | {1,2}  | {3,4}
(1 row)

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  duplicate key value violates unique constraint "covering"
DETAIL:  Key (c1, c2)=(1, 2) already exists.
DROP TABLE tbl;
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				CONSTRAINT covering PRIMARY KEY(c1,c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "covering" for table "tbl"
SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
 indexrelid | indnatts | indnkeyatts | indisunique | indisprimary | indkey  |  indclass   
------------+----------+-------------+-------------+--------------+---------+-------------
 covering   |        4 |           2 | t           | t            | 1 2 3 4 | 10179 10179
(1 row)

SELECT pg_get_constraintdef(oid), conname, conkey, conincluding FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
         pg_get_constraintdef          | conname  | conkey | conincluding 
---------------------------------------+----------+--------+--------------
 PRIMARY KEY (c1, c2) INCLUDE (c3, c4) | covering | {1,2}  | {3,4}
(1 row)

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  duplicate key value violates unique constraint "covering"
DETAIL:  Key (c1, c2)=(1, 2) already exists.
INSERT INTO tbl SELECT 1, NULL, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  null value in column "c2" violates not-null constraint
DETAIL:  Failing row contains (1, null, 3, (4,4),(4,4)).
INSERT INTO tbl SELECT x, 2*x, NULL, NULL FROM generate_series(1,10) AS x;
DROP TABLE tbl;
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				UNIQUE(c1,c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
     indexrelid      | indnatts | indnkeyatts | indisunique | indisprimary | indkey  |  indclass   
---------------------+----------+-------------+-------------+--------------+---------+-------------
 tbl_c1_c2_c3_c4_key |        4 |           2 | t           | f            | 1 2 3 4 | 10179 10179
(1 row)

SELECT pg_get_constraintdef(oid), conname, conkey, conincluding FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
       pg_get_constraintdef       |       conname       | conkey | conincluding 
----------------------------------+---------------------+--------+--------------
 UNIQUE (c1, c2) INCLUDE (c3, c4) | tbl_c1_c2_c3_c4_key | {1,2}  | {3,4}
(1 row)

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  duplicate key value violates unique constraint "tbl_c1_c2_c3_c4_key"
DETAIL:  Key (c1, c2)=(1, 2) already exists.
DROP TABLE tbl;
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				PRIMARY KEY(c1,c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "tbl_pkey" for table "tbl"
SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
 indexrelid | indnatts | indnkeyatts | indisunique | indisprimary | indkey  |  indclass   
------------+----------+-------------+-------------+--------------+---------+-------------
 tbl_pkey   |        4 |           2 | t           | t            | 1 2 3 4 | 10179 10179
(1 row)

SELECT pg_get_constraintdef(oid), conname, conkey, conincluding FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
         pg_get_constraintdef          | conname  | conkey | conincluding 
---------------------------------------+----------+--------+--------------
 PRIMARY KEY (c1, c2) INCLUDE (c3, c4) | tbl_pkey | {1,2}  | {3,4}
(1 row)

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  duplicate key value violates unique constraint "tbl_pkey"
DETAIL:  Key (c1, c2)=(1, 2) already exists.
INSERT INTO tbl SELECT 1, NULL, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ERROR:  null value in column "c2" violates not-null constraint
DETAIL:  Failing row contains (1, null, 3, (4,4),(4,4)).
INSERT INTO tbl SELECT x, 2*x, NULL, NULL FROM generate_series(1,10) AS x;
DROP TABLE tbl;
/*
 * 3.0 Test ALTER TABLE DROP COLUMN.
 * Any column deletion leads to index deletion.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 int);
CREATE UNIQUE INDEX tbl_idx ON tbl using ubtree(c1, c2, c3, c4);
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
                                                     indexdef                                                      
-------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_idx ON tbl USING ubtree (c1, c2, c3, c4) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

ALTER TABLE tbl DROP COLUMN c3;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

DROP TABLE tbl;
/*
 * 3.1 Test ALTER TABLE DROP COLUMN.
 * Included column deletion leads to the index deletion,
 * AS well AS key columns deletion. It's explained in documentation.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box);
CREATE UNIQUE INDEX tbl_idx ON tbl using ubtree(c1, c2) INCLUDE(c3,c4);
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
                                                 indexdef                                                  
-----------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_idx ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

ALTER TABLE tbl DROP COLUMN c3;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

DROP TABLE tbl;
/*
 * 3.2 Test ALTER TABLE DROP COLUMN.
 * Included column deletion leads to the index deletion.
 * AS well AS key columns deletion. It's explained in documentation.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
                                                       indexdef                                                        
-----------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

ALTER TABLE tbl DROP COLUMN c3;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

ALTER TABLE tbl DROP COLUMN c1;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

DROP TABLE tbl;
/*
 * 4. CREATE INDEX
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,1000) AS x;
CREATE UNIQUE INDEX on tbl (c1, c2) INCLUDE (c3, c4);
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
                                                       indexdef                                                        
-----------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_idx ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
 CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(2 rows)

DROP TABLE tbl;
/*
 * 5. REINDEX
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
                                                       indexdef                                                        
-----------------------------------------------------------------------------------------------------------------------
 CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON tbl USING ubtree (c1, c2) WITH (storage_type=USTORE) TABLESPACE pg_default
(1 row)

ALTER TABLE tbl DROP COLUMN c3;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

REINDEX INDEX tbl_c1_c2_c3_c4_key;
ERROR:  relation "tbl_c1_c2_c3_c4_key" does not exist
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

ALTER TABLE tbl DROP COLUMN c1;
SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
 indexdef 
----------
(0 rows)

DROP TABLE tbl;
/*
 * 7. Check various AMs. All but ubtree must fail.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 box, c4 box);
CREATE INDEX on tbl USING brin(c1, c2) INCLUDE (c3, c4);
ERROR:  access method "brin" does not support row store
CREATE INDEX on tbl USING gist(c3) INCLUDE (c4);
ERROR:  gist index is not supported for ustore
CREATE INDEX on tbl USING spgist(c3) INCLUDE (c4);
ERROR:  access method "spgist" does not support row store
CREATE INDEX on tbl USING gin(c1, c2) INCLUDE (c3, c4);
ERROR:  gin index is not supported for ustore
CREATE INDEX on tbl USING hash(c1, c2) INCLUDE (c3, c4);
ERROR:  access method "hash" does not support row store
CREATE INDEX on tbl USING rtree(c1, c2) INCLUDE (c3, c4);
ERROR:  access method "rtree" does not support row store
CREATE INDEX on tbl USING ubtree(c1, c2) INCLUDE (c3, c4);
DROP TABLE tbl;
/*
 * 8. Update, delete values in indexed table.
 */
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
CREATE UNIQUE INDEX tbl_idx_unique ON tbl using ubtree(c1, c2) INCLUDE (c3,c4);
UPDATE tbl SET c1 = 100 WHERE c1 = 2;
UPDATE tbl SET c1 = 1 WHERE c1 = 3;
-- should fail
UPDATE tbl SET c2 = 2 WHERE c1 = 1;
ERROR:  duplicate key value violates unique constraint "tbl_idx_unique"
DETAIL:  Key (c1, c2)=(1, 2) already exists.
UPDATE tbl SET c3 = 1;
DELETE FROM tbl WHERE c1 = 5 OR c3 = 12;
DROP TABLE tbl;
/*
 * 9. Alter column type.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "tbl_c1_c2_c3_c4_key" for table "tbl"
INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
ALTER TABLE tbl ALTER c1 TYPE bigint;
ALTER TABLE tbl ALTER c3 TYPE bigint;
\d tbl
      Table "public.tbl"
 Column |  Type   | Modifiers 
--------+---------+-----------
 c1     | bigint  | 
 c2     | integer | 
 c3     | bigint  | 
 c4     | box     | 
Indexes:
    "tbl_c1_c2_c3_c4_key" UNIQUE CONSTRAINT, ubtree (c1, c2) WITH (storage_type=ustore) TABLESPACE pg_default

DROP TABLE tbl;
set enable_default_ustore_table = off;
