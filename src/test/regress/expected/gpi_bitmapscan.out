DROP TABLE if exists gpi_bitmap_table1;
NOTICE:  table "gpi_bitmap_table1" does not exist, skipping
DROP TABLE if exists gpi_bitmap_table2;
NOTICE:  table "gpi_bitmap_table2" does not exist, skipping
SET enable_seqscan=off;
SET enable_indexscan=off;
SET force_bitmapand=on;
CREATE TABLE gpi_bitmap_table1
(
    c1 int,
    c2 int,
    c3 int
)
partition by range (c1)
(
    partition p0_gpi_bitmap_table1 VALUES less than (10000),
    partition p1_gpi_bitmap_table1 VALUES less than (20000),
    partition p2_gpi_bitmap_table1 VALUES less than (30000),
    partition p3_gpi_bitmap_table1 VALUES less than (maxvalue)
);
INSERT INTO gpi_bitmap_table1
  SELECT (r%53), (r%59), (r%56)
  FROM generate_series(1,70000) r;
--ok
CREATE INDEX idx1_gpi_bitmap_table1 ON gpi_bitmap_table1 (c1) GLOBAL;
--ok
CREATE INDEX idx2_gpi_bitmap_table1 ON gpi_bitmap_table1 (c2) GLOBAL;
--ok
-- test bitmap-and
SELECT count(*) FROM gpi_bitmap_table1 WHERE c1 = 1 AND c2 = 1;
 count 
-------
    23
(1 row)

SELECT * FROM gpi_bitmap_table1 WHERE c1 = 1 AND c2 = 1;
 c1 | c2 | c3 
----+----+----
  1 |  1 |  1
  1 |  1 | 48
  1 |  1 | 39
  1 |  1 | 30
  1 |  1 | 21
  1 |  1 | 12
  1 |  1 |  3
  1 |  1 | 50
  1 |  1 | 41
  1 |  1 | 32
  1 |  1 | 23
  1 |  1 | 14
  1 |  1 |  5
  1 |  1 | 52
  1 |  1 | 43
  1 |  1 | 34
  1 |  1 | 25
  1 |  1 | 16
  1 |  1 |  7
  1 |  1 | 54
  1 |  1 | 45
  1 |  1 | 36
  1 |  1 | 27
(23 rows)

SELECT * FROM gpi_bitmap_table1 WHERE c1 = 1 AND c2 = 1 ORDER BY c3;
 c1 | c2 | c3 
----+----+----
  1 |  1 |  1
  1 |  1 |  3
  1 |  1 |  5
  1 |  1 |  7
  1 |  1 | 12
  1 |  1 | 14
  1 |  1 | 16
  1 |  1 | 21
  1 |  1 | 23
  1 |  1 | 25
  1 |  1 | 27
  1 |  1 | 30
  1 |  1 | 32
  1 |  1 | 34
  1 |  1 | 36
  1 |  1 | 39
  1 |  1 | 41
  1 |  1 | 43
  1 |  1 | 45
  1 |  1 | 48
  1 |  1 | 50
  1 |  1 | 52
  1 |  1 | 54
(23 rows)

-- test bitmap-or
SELECT count(*) FROM gpi_bitmap_table1 WHERE c1 = 1 OR c2 = 1;
 count 
-------
  2485
(1 row)

CREATE TABLE gpi_bitmap_table2
(
    c1 int,
    c2 int,
    c3 int
)
partition by range (c1)
(
    partition p0_gpi_bitmap_table2 VALUES less than (10000),
    partition p1_gpi_bitmap_table2 VALUES less than (20000),
    partition p2_gpi_bitmap_table2 VALUES less than (30000),
    partition p3_gpi_bitmap_table2 VALUES less than (maxvalue)
);
--ok
INSERT INTO gpi_bitmap_table2
  SELECT r, (r+1), 500
  FROM generate_series(1,70000) r;
--ok
CREATE INDEX idx1_gpi_bitmap_table2 ON gpi_bitmap_table2 (c1) GLOBAL;
--ok
CREATE INDEX idx2_gpi_bitmap_table2 ON gpi_bitmap_table2 (c2) GLOBAL;
--ok
EXPLAIN (COSTS OFF) SELECT count(*) FROM gpi_bitmap_table2 WHERE c1 > 9990 AND c1 < 10010;
                        QUERY PLAN                        
----------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on gpi_bitmap_table2
         Recheck Cond: ((c1 > 9990) AND (c1 < 10010))
         ->  Bitmap Index Scan on idx1_gpi_bitmap_table2
               Index Cond: ((c1 > 9990) AND (c1 < 10010))
(5 rows)

SELECT count(*) FROM gpi_bitmap_table2 WHERE c1 > 9990 AND c1 < 10010;
 count 
-------
    19
(1 row)

SELECT * FROM gpi_bitmap_table2 WHERE c1 > 9990 AND c1 < 10010;
  c1   |  c2   | c3  
-------+-------+-----
  9991 |  9992 | 500
  9992 |  9993 | 500
  9993 |  9994 | 500
  9994 |  9995 | 500
  9995 |  9996 | 500
  9996 |  9997 | 500
  9997 |  9998 | 500
  9998 |  9999 | 500
  9999 | 10000 | 500
 10000 | 10001 | 500
 10001 | 10002 | 500
 10002 | 10003 | 500
 10003 | 10004 | 500
 10004 | 10005 | 500
 10005 | 10006 | 500
 10006 | 10007 | 500
 10007 | 10008 | 500
 10008 | 10009 | 500
 10009 | 10010 | 500
(19 rows)

EXPLAIN (COSTS OFF) SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 AND c2 = 10000;
                       QUERY PLAN                        
---------------------------------------------------------
 Bitmap Heap Scan on gpi_bitmap_table2
   Recheck Cond: ((c2 = 10000) AND (c1 = 10000))
   ->  BitmapAnd
         ->  Bitmap Index Scan on idx2_gpi_bitmap_table2
               Index Cond: (c2 = 10000)
         ->  Bitmap Index Scan on idx1_gpi_bitmap_table2
               Index Cond: (c1 = 10000)
(7 rows)

SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 AND c2 = 10000;
 c1 | c2 | c3 
----+----+----
(0 rows)

EXPLAIN (COSTS OFF) SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 OR c2 = 10000;
                       QUERY PLAN                        
---------------------------------------------------------
 Bitmap Heap Scan on gpi_bitmap_table2
   Recheck Cond: ((c1 = 10000) OR (c2 = 10000))
   ->  BitmapOr
         ->  Bitmap Index Scan on idx1_gpi_bitmap_table2
               Index Cond: (c1 = 10000)
         ->  Bitmap Index Scan on idx2_gpi_bitmap_table2
               Index Cond: (c2 = 10000)
(7 rows)

SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 OR c2 = 10000;
  c1   |  c2   | c3  
-------+-------+-----
  9999 | 10000 | 500
 10000 | 10001 | 500
(2 rows)

SELECT * FROM gpi_bitmap_table2 WHERE c1 = 9999 OR c2 = 10001;
  c1   |  c2   | c3  
-------+-------+-----
  9999 | 10000 | 500
 10000 | 10001 | 500
(2 rows)

EXPLAIN (COSTS OFF) SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 OR c2 = 30000;
                       QUERY PLAN                        
---------------------------------------------------------
 Bitmap Heap Scan on gpi_bitmap_table2
   Recheck Cond: ((c1 = 10000) OR (c2 = 30000))
   ->  BitmapOr
         ->  Bitmap Index Scan on idx1_gpi_bitmap_table2
               Index Cond: (c1 = 10000)
         ->  Bitmap Index Scan on idx2_gpi_bitmap_table2
               Index Cond: (c2 = 30000)
(7 rows)

SELECT * FROM gpi_bitmap_table2 WHERE c1 = 10000 OR c2 = 30000;
  c1   |  c2   | c3  
-------+-------+-----
 10000 | 10001 | 500
 29999 | 30000 | 500
(2 rows)

DROP TABLE idx1_gpi_bitmap_table1;
ERROR:  "idx1_gpi_bitmap_table1" is not a table
HINT:  Use DROP INDEX to remove an global partition index.
DROP TABLE idx1_gpi_bitmap_table2;
ERROR:  "idx1_gpi_bitmap_table2" is not a table
HINT:  Use DROP INDEX to remove an global partition index.
SET enable_seqscan=on;
SET enable_indexscan=on;
SET force_bitmapand=off;
drop table if exists test_part_bitmapand_ginst_btree;
NOTICE:  table "test_part_bitmapand_ginst_btree" does not exist, skipping
CREATE TABLE test_part_bitmapand_ginst_btree (a int, txtkeyword TEXT, txtsample TEXT) partition by range(a) (partition p1 values less than (1001), partition p2 values  less than (2001), partition p3 values less than (3001));
insert into test_part_bitmapand_ginst_btree values (10, $$'New York'$$, 'new & york | big & apple | nyc');
insert into test_part_bitmapand_ginst_btree values (1010, 'Moscow',	'moskva | moscow');
insert into test_part_bitmapand_ginst_btree values (1020, $$'Sanct Peter'$$,	$$Peterburg | peter | 'Sanct Peterburg'$$);
insert into test_part_bitmapand_ginst_btree values (1030, $$'foo bar qq'$$,	'foo & (bar | qq) & city');
ALTER TABLE test_part_bitmapand_ginst_btree ADD COLUMN keyword tsquery;
UPDATE test_part_bitmapand_ginst_btree SET keyword = to_tsquery('english', txtkeyword);
ALTER TABLE test_part_bitmapand_ginst_btree ADD COLUMN sample tsquery;
UPDATE test_part_bitmapand_ginst_btree SET sample = to_tsquery('english', txtsample::text);
CREATE UNIQUE INDEX ON test_part_bitmapand_ginst_btree (a) local;
-- failed
CREATE INDEX qq ON test_part_bitmapand_ginst_btree USING gist (keyword tsquery_ops);
ERROR:  Global partition index only support btree.
CREATE INDEX qq ON test_part_bitmapand_ginst_btree USING gist (keyword tsquery_ops) local;
CREATE INDEX ON test_part_bitmapand_ginst_btree USING gist (keyword tsquery_ops);
ERROR:  Global partition index only support btree.
explain (costs off) SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Index Scan using qq on test_part_bitmapand_ginst_btree
         Index Cond: (keyword @> '''new'''::tsquery)
         Filter: (a = 10)
         Selected Partitions:  1
(6 rows)

SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
    keyword     
----------------
 'new' & 'york'
(1 row)

set force_bitmapand = on;
set enable_seqscan = off;
set enable_indexscan = off;
--bitmapand scan
explain (costs off) SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Bitmap Heap Scan on test_part_bitmapand_ginst_btree
         Recheck Cond: ((keyword @> '''new'''::tsquery) AND (a = 10))
         Selected Partitions:  1
         ->  BitmapAnd
               ->  Partitioned Bitmap Index Scan on qq
                     Index Cond: (keyword @> '''new'''::tsquery)
                     Selected Partitions:  1
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_ginst_btree_a_idx
                     Index Cond: (a = 10)
                     Selected Partitions:  1
(12 rows)

SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
    keyword     
----------------
 'new' & 'york'
(1 row)

drop index test_part_bitmapand_ginst_btree_a_idx;
CREATE UNIQUE INDEX ON test_part_bitmapand_ginst_btree (a);
--bitmapand scan
explain (costs off) SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Bitmap Heap Scan on test_part_bitmapand_ginst_btree
         Recheck Cond: ((a = 10) AND (keyword @> '''new'''::tsquery))
         Selected Partitions:  1
         ->  BitmapAnd
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_ginst_btree_a_idx
                     Index Cond: (a = 10)
                     Selected Partitions:  1
               ->  Partitioned Bitmap Index Scan on qq
                     Index Cond: (keyword @> '''new'''::tsquery)
                     Selected Partitions:  1
(12 rows)

SELECT keyword FROM test_part_bitmapand_ginst_btree WHERE keyword @> 'new' and a = 10;
    keyword     
----------------
 'new' & 'york'
(1 row)

drop table if exists test_part_bitmapand_gin_btree;
NOTICE:  table "test_part_bitmapand_gin_btree" does not exist, skipping
create table test_part_bitmapand_gin_btree (a int, ts tsvector) partition by range(a) (partition p1 values less than (1001), partition p2 values  less than (2001), partition p3 values less than (3001));
insert into test_part_bitmapand_gin_btree values (10, to_tsvector('Lore ipsam'));
insert into test_part_bitmapand_gin_btree values (1010, to_tsvector('Lore ipsum'));
create index test_part_bitmapand_gin_btree_idx on test_part_bitmapand_gin_btree using gin(ts) local;
create index test_part_bitmapand_gin_btree_idx_a on test_part_bitmapand_gin_btree using btree(a) local;
set force_bitmapand = on;
set enable_seqscan = off;
set enable_indexscan = off;
explain (costs off) select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 10;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Bitmap Heap Scan on test_part_bitmapand_gin_btree
         Recheck Cond: ((a = 10) AND ('''ipsu'':*'::tsquery @@ ts))
         Selected Partitions:  1
         ->  BitmapAnd
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_gin_btree_idx_a
                     Index Cond: (a = 10)
                     Selected Partitions:  1
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_gin_btree_idx
                     Index Cond: ('''ipsu'':*'::tsquery @@ ts)
                     Selected Partitions:  1
(12 rows)

select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 10;
 a | ts 
---+----
(0 rows)

explain (costs off) select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 1010;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Bitmap Heap Scan on test_part_bitmapand_gin_btree
         Recheck Cond: ((a = 1010) AND ('''ipsu'':*'::tsquery @@ ts))
         Selected Partitions:  2
         ->  BitmapAnd
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_gin_btree_idx_a
                     Index Cond: (a = 1010)
                     Selected Partitions:  2
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_gin_btree_idx
                     Index Cond: ('''ipsu'':*'::tsquery @@ ts)
                     Selected Partitions:  2
(12 rows)

select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 1010;
  a   |         ts         
------+--------------------
 1010 | 'ipsum':2 'lore':1
(1 row)

drop index test_part_bitmapand_gin_btree_idx_a;
create index test_part_bitmapand_gin_btree_idx_a on test_part_bitmapand_gin_btree using btree(a) global;
explain (costs off) select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 1010;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Partition Iterator
   Iterations: 1
   ->  Partitioned Bitmap Heap Scan on test_part_bitmapand_gin_btree
         Recheck Cond: ((a = 1010) AND ('''ipsu'':*'::tsquery @@ ts))
         Selected Partitions:  2
         ->  BitmapAnd
               ->  Bitmap Index Scan on test_part_bitmapand_gin_btree_idx_a
                     Index Cond: (a = 1010)
               ->  Partitioned Bitmap Index Scan on test_part_bitmapand_gin_btree_idx
                     Index Cond: ('''ipsu'':*'::tsquery @@ ts)
                     Selected Partitions:  2
(11 rows)

select * from test_part_bitmapand_gin_btree where 'ipsu:*'::tsquery @@ ts and a = 1010;
  a   |         ts         
------+--------------------
 1010 | 'ipsum':2 'lore':1
(1 row)

reset force_bitmapand;
reset enable_seqscan;
reset enable_indexscan;
drop table test_part_bitmapand_gin_btree;
drop table test_part_bitmapand_ginst_btree;
