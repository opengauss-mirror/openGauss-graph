create database pl_test_pkg_single DBCOMPATIBILITY 'pg';
\c pl_test_pkg_single;
--test dbe_utility
CREATE OR REPLACE PROCEDURE p0()
AS
declare
    a  integer;
    c  integer;
    b  integer;
BEGIN
    a:=1;
    c:=0;
    b := a / c;
    dbe_output.print_line('result is: '||to_char(b));
END;
/
CREATE OR REPLACE PROCEDURE p1() 
AS
BEGIN
    p0();
END;
/
CREATE OR REPLACE PROCEDURE p2() 
AS
BEGIN
    p1();
END;
/
--test dbe_utility.format_error_backtrack
CREATE OR REPLACE PROCEDURE p3_error() 
AS
BEGIN
    p2();
EXCEPTION
    WHEN OTHERS THEN
        dbe_output.print_line(dbe_utility.format_error_backtrace());
END;
/
call p3_error();
33816706: PL/pgSQL function p0() line 9 at assignment
33816706: PL/pgSQL function p1() line 3 at PERFORM
33816706: PL/pgSQL function p2() line 3 at PERFORM
33816706: PL/pgSQL function p3_error() line 3 at PERFORM

 p3_error 
----------
 
(1 row)

--test dbe_utility.format_error_stack
CREATE OR REPLACE PROCEDURE p3_error_stack() 
AS
BEGIN
    p2();
EXCEPTION
    WHEN OTHERS THEN
        dbe_output.print_line(dbe_utility.format_error_stack());
END;
/
call p3_error_stack();
33816706: division by zero
 p3_error_stack 
----------------
 
(1 row)

CREATE OR REPLACE PROCEDURE p0()
AS
declare
    a  integer;
    c  integer;
    b  integer;
BEGIN
    a:=1;
    c:=1;
    b := a / c;
    dbe_output.print_line('result is: '||to_char(b));
END;
/
--test dbe_utility.format_error_backtrace
CREATE OR REPLACE PROCEDURE p3_noError() 
AS
BEGIN
    p2();
EXCEPTION
    WHEN OTHERS THEN
        dbe_output.print_line(utility.format_error_backtrace());
END;
/
call p3_noError();
result is: 1
 p3_noerror 
------------
 
(1 row)

--test dbe_utility.format_error_stack
CREATE OR REPLACE PROCEDURE p3_noError_stack() 
AS
BEGIN
    p2();
EXCEPTION
    WHEN OTHERS THEN
        dbe_output.print_line(utility.format_error_stack());
END;
/
call p3_noError_stack();
result is: 1
 p3_noerror_stack 
------------------
 
(1 row)

--test dbe_utility.format_call_stack
CREATE OR REPLACE PROCEDURE p0()
AS
declare
    a  integer;
    c  integer;
    b  integer;
BEGIN
    a:=1;
    c:=1;
    b := a / c;
    dbe_output.print_line('result is: '||to_char(b));
    dbe_output.print_line(dbe_utility.format_call_stack());
END;
/
CREATE OR REPLACE PROCEDURE p3_call_stack() 
AS
BEGIN
	p2();	
END;
/
call p3_call_stack();
result is: 1
      3  dbe_utility.format_call_stack()
     11  p0()
      3  p1()
      3  p2()
      3  p3_call_stack()

 p3_call_stack 
---------------
 
(1 row)

--test dbe_utility.get_time
CREATE OR REPLACE PROCEDURE test_get_time1() 
AS
declare
    start_time  bigint;
    end_time  bigint;
BEGIN
    start_time:= dbe_utility.get_time ();
    pg_sleep(1);
    end_time:=dbe_utility.get_time ();
    dbe_output.print_line(end_time - start_time);	
END;
/
call test_get_time1();
100
 test_get_time1 
----------------
 
(1 row)

CREATE OR REPLACE PROCEDURE test_get_time5() 
AS
declare
    start_time  bigint;
    end_time  bigint;
BEGIN
    start_time:= dbe_utility.get_time ();
    pg_sleep(5);
    end_time:=dbe_utility.get_time ();
    dbe_output.print_line(end_time - start_time);	
END;
/
call test_get_time5();
500
 test_get_time5 
----------------
 
(1 row)

--test dbe_match.edit_distance_similarity
select dbe_match.edit_distance_similarity('abcd', 'abcd');
 edit_distance_similarity 
--------------------------
                      100
(1 row)

select dbe_match.edit_distance_similarity('aaaa', 'a');
 edit_distance_similarity 
--------------------------
                       25
(1 row)

select dbe_match.edit_distance_similarity('aaaa', 'aaa');
 edit_distance_similarity 
--------------------------
                       75
(1 row)

--test dbe_raw
select dbe_raw.bit_or('a1234', '12');
 bit_or 
--------
 1A1234
(1 row)

select dbe_raw.bit_or('0000', '1111');
 bit_or 
--------
 1111
(1 row)

select dbe_raw.bit_or('0000', '11');
 bit_or 
--------
 1100
(1 row)

select dbe_raw.bit_or('baf234', '11');
 bit_or 
--------
 BBF234
(1 row)

select dbe_raw.bit_or('baf234', '00');
 bit_or 
--------
 BAF234
(1 row)

CREATE OR REPLACE PROCEDURE test_bitor() 
AS
declare
    a  raw;
	b  raw;
BEGIN
    a:= 'abc123';
    b:= '12';
    dbe_output.print_line(dbe_raw.bit_or(a, b));	
END;
/
call test_bitor();
BBC123
 test_bitor 
------------
 
(1 row)

select DBE_RAW.cast_from_varchar2_to_raw('aaa');
 cast_from_varchar2_to_raw 
---------------------------
 616161
(1 row)

select dbe_raw.cast_to_varchar2('616161');
 cast_to_varchar2 
------------------
 aaa
(1 row)

select DBE_RAW.cast_from_varchar2_to_raw('cf12');
 cast_from_varchar2_to_raw 
---------------------------
 63663132
(1 row)

select dbe_raw.cast_to_varchar2('63663132');
 cast_to_varchar2 
------------------
 cf12
(1 row)

select DBE_RAW.cast_from_varchar2_to_raw('341');
 cast_from_varchar2_to_raw 
---------------------------
 333431
(1 row)

select dbe_raw.cast_to_varchar2('333431');
 cast_to_varchar2 
------------------
 341
(1 row)

select dbe_raw.substr('aba', 1, 2);
 substr 
--------
 ab
(1 row)

CREATE OR REPLACE PROCEDURE test_substr() 
AS
declare
    a  raw;
BEGIN
    a:= 'abc123';
    dbe_output.print_line(dbe_raw.substr(a, 3, 2));	
END;
/
call test_substr();
23
 test_substr 
-------------
 
(1 row)

--test dbe_session
select DBE_SESSION.set_context('test', 'gaussdb', 'one');
 set_context 
-------------
 
(1 row)

select DBE_SESSION.search_context('test', 'gaussdb');
 search_context 
----------------
 one
(1 row)

select DBE_SESSION.set_context('test', 'gaussdb', 'two');
 set_context 
-------------
 
(1 row)

select DBE_SESSION.search_context('test', 'gaussdb');
 search_context 
----------------
 two
(1 row)

select DBE_SESSION.set_context('test', 'gaussdb', 'two');
 set_context 
-------------
 
(1 row)

select DBE_SESSION.search_context('test', 'gaussdb');
 search_context 
----------------
 two
(1 row)

select DBE_SESSION.clear_context('test', 'test','gaussdb');
 clear_context 
---------------
 
(1 row)

select DBE_SESSION.search_context('test', 'gaussdb');
ERROR:  could not find attribute gaussdb in current namespace
DETAIL:  N/A
CONTEXT:  PL/pgSQL function dbe_session.search_context(text,text) line 3 at RETURN
referenced column: search_context
create or replace function test_set_context (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.set_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_set_context('test', 'name', 'tony');
 test_set_context 
------------------
 
(1 row)

create or replace function test_sys_context (
    namespace text,
    attribute text
)
returns text AS $$
BEGIN
    return DBE_SESSION.search_context(namespace, attribute);
END;
$$ LANGUAGE plpgsql;
call test_sys_context('test', 'name'); 
 test_sys_context 
------------------
 tony
(1 row)

create or replace function test_clear_context2 (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.clear_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_clear_context('test', 'text', 'name');
ERROR:  function "test_clear_context" doesn't exist 
call test_sys_context('test', 'name');
 test_sys_context 
------------------
 tony
(1 row)

create or replace function test_set_context2 (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.set_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_set_context2('CTX_P_GCMS_BIND_PKG', 'type', 'AAA');
 test_set_context2 
-------------------
 
(1 row)

create or replace function test_sys_context2 (
    namespace text,
    attribute text
)
returns text AS $$
BEGIN
    return DBE_SESSION.search_context(namespace, attribute);
END;
$$ LANGUAGE plpgsql;
call test_sys_context2('CTX_P_GCMS_BIND_PKG ', 'type',); 
ERROR:  syntax error at or near ")"
LINE 1: call test_sys_context2('CTX_P_GCMS_BIND_PKG ', 'type',);
                                                              ^
create or replace function test_clear_context2 (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.clear_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_clear_context2('test', 'text', 'name');
ERROR:  There is no context named test
DETAIL:  N/A
CONTEXT:  SQL statement "CALL pkg_util.session_clear_context(namespace,client_identifier,attribute)"
PL/pgSQL function dbe_session.clear_context(text,text,text) line 3 at PERFORM
SQL statement "CALL dbe_session.clear_context(namespace,attribute,value)"
PL/pgSQL function test_clear_context2(text,text,text) line 3 at PERFORM
call test_sys_context2('test', 'name');
ERROR:  There is no context named test
DETAIL:  N/A
CONTEXT:  PL/pgSQL function dbe_session.search_context(text,text) line 3 at RETURN
PL/pgSQL function test_sys_context2(text,text) line 3 at RETURN
create or replace function test_set_context3 (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.set_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_set_context('test1', 'name1', 'tony1');
 test_set_context 
------------------
 
(1 row)

create or replace function test_sys_context3 (
    namespace text,
    attribute text
)
returns text AS $$
BEGIN
    return DBE_SESSION.search_context(namespace, attribute);
END;
$$ LANGUAGE plpgsql;
call test_sys_context('test1', 'name1'); 
 test_sys_context 
------------------
 tony1
(1 row)

create or replace function test_clear_context3 (
    namespace text,
    attribute text,
    value text
)
returns void AS $$
BEGIN
    DBE_SESSION.clear_context(namespace, attribute, value);
END;
$$ LANGUAGE plpgsql;
call test_clear_context('test1', 'text1', 'name1');
ERROR:  function "test_clear_context" doesn't exist 
call test_sys_context('test', 'name');
ERROR:  There is no context named test
DETAIL:  N/A
CONTEXT:  PL/pgSQL function dbe_session.search_context(text,text) line 3 at RETURN
PL/pgSQL function test_sys_context(text,text) line 3 at RETURN
create or replace procedure proc_test1(i_col1 in varchar2, o_ret out varchar2) as
begin
null;
end;
/
create or replace procedure proc_test1(i_col1 in varchar2, o_ret out varchar2) as
v_cursor_id number;
o_ret1 varchar2;
v_execute number;
v_sql text;
begin
o_ret:='1';
o_ret1 := '0';
v_sql:='begin proc_test(i_col1,o_ret1); end;';
v_cursor_id := dbe_sql.register_context();
dbe_sql.sql_set_sql(v_cursor_id,v_sql,1);
perform dbe_sql.sql_bind_variable(v_cursor_id,'i_col1',i_col1,10);
perform dbe_sql.sql_bind_variable(v_cursor_id,'o_col1',o_ret1,10);
v_execute:=dbe_sql.sql_run(v_cursor_id);
exception
when others then
if dbe_sql.is_active(v_cursor_id) then
dbe_sql.sql_unregister_context(v_cursor_id);
end if;
end;
/
select proc_test1('1','');
ERROR:  function proc_test1(unknown, unknown) does not exist
LINE 1: select proc_test1('1','');
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
CONTEXT:  referenced column: proc_test1
drop procedure proc_test1;
--test write+update
create table test_clob(a int, b clob);
create table test_blob(a int, b blob);
insert into test_clob values(1, 'abc');
insert into test_clob values(2, 'zzz');
insert into test_blob values(1, 'abc');
insert into test_blob values(2, 'fffffff');
create or replace procedure test_clob_write
as
    dest_clob clob;
	PSV_SQL varchar(100);
begin
    PSV_SQL := 'select b from test_clob where a = 1';
    EXECUTE IMMEDIATE PSV_SQL into dest_clob;
    dbe_lob.write(dest_clob, 1, 1, 'ddd');
    return;
end;
/
call test_clob_write();
 test_clob_write 
-----------------
 
(1 row)

select * from test_clob;
 a |  b  
---+-----
 2 | zzz
 1 | dbc
(2 rows)

create or replace procedure test_lob_write_nodyna
as
declare
    dest_clob clob;
begin
    select b from test_clob where a = 2 into dest_clob;
    dbe_lob.write(dest_clob, 1, 1, 'eeee'); 
    DBE_OUTPUT.print_line(dest_clob);
    return;
end;
/
call test_lob_write_nodyna();
ezz
 test_lob_write_nodyna 
-----------------------
 
(1 row)

select * from test_clob;
 a |  b  
---+-----
 2 | zzz
 1 | dbc
(2 rows)

create or replace procedure test_blob_write
as
    dest_blob blob;
	PSV_SQL varchar(100);
begin
    PSV_SQL := 'select b from test_blob where a = 1';
    EXECUTE IMMEDIATE PSV_SQL into dest_blob;
    dbe_lob.write(dest_blob, 1, 1, 'ddd');
    return;
end;
/
call test_blob_write();
 test_blob_write 
-----------------
 
(1 row)

select * from test_blob;
 a |    b     
---+----------
 2 | 0FFFFFFF
 1 | 0DBC
(2 rows)

--test append+update
create or replace procedure test_clob_append
as
    dest_clob clob;
	PSV_SQL varchar(100);
begin
    PSV_SQL := 'select b from test_clob where a = 1';
    EXECUTE IMMEDIATE PSV_SQL into dest_clob;
    dbe_lob.append(dest_clob, 'ddd');
    return;
end;
/
call test_clob_append();
 test_clob_append 
------------------
 
(1 row)

select * from test_clob;
 a |   b    
---+--------
 2 | zzz
 1 | dbcddd
(2 rows)

create or replace procedure test_blob_append
as
    dest_blob blob;
	PSV_SQL varchar(100);
begin
    PSV_SQL := 'select b from test_blob where a = 1';
    EXECUTE IMMEDIATE PSV_SQL into dest_blob;
    dbe_lob.append(dest_blob, 'ddd');
    return;
end;
/
call test_blob_append();
 test_blob_append 
------------------
 
(1 row)

select * from test_blob;
 a |    b     
---+----------
 2 | 0FFFFFFF
 1 | 0DBC0DDD
(2 rows)

--test read
create or replace procedure test_clob_read
as
    dest_clob clob;
	buf clob;
	PSV_SQL varchar(100);
begin
    PSV_SQL := 'select b from test_clob where a = 1';
	EXECUTE IMMEDIATE PSV_SQL into dest_clob;
	dbe_lob.read(dest_clob, 1, 1, buf);
    DBE_OUTPUT.print_line(buf);
	return;
end;
/
call test_clob_read();
d
 test_clob_read 
----------------
 
(1 row)

drop table if exists test_clob;
\c regression;
drop database IF EXISTS pl_test_pkg_single;
