/*
 * This file is used to test three possible paths of hash agg stream paths
 */
-- Part-2
drop schema if exists distribute_aggregates_part2 cascade;
NOTICE:  schema "distribute_aggregates_part2" does not exist, skipping
create schema distribute_aggregates_part2;
set current_schema = distribute_aggregates_part2;
-- prepare a temp table for import data
create table tmp_t1(c1 int);
insert into tmp_t1 values (1);
-- Create Table and Insert Data
create table t_agg1(a int, b int, c int, d int, e int, f int, g regproc);
create table t_agg2(a int, b int, c int);
insert into t_agg1 select generate_series(1, 10000), generate_series(1, 10000)%5000, generate_series(1, 10000)%500, generate_series(1, 10000)%5, 500, 3, 'sin' from tmp_t1;
insert into t_agg2 select generate_series(1, 10), generate_series(11, 2, -1), generate_series(3, 12);
/*select * from table_skewness('t_agg1', 'b,c') order by 1, 2, 3;*/
analyze t_agg1;
analyze t_agg2;
-- (2) distinct clause
explain (costs off) select avg(x) from (select distinct(b) x from t_agg1);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.b
         ->  Seq Scan on t_agg1
(4 rows)

select avg(x) from (select distinct(b) x from t_agg1);
          avg          
-----------------------
 2499.5000000000000000
(1 row)

explain (costs off) select avg(x) from (select distinct(b+c) x from t_agg1);
                 QUERY PLAN                  
---------------------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: (t_agg1.b + t_agg1.c)
         ->  Seq Scan on t_agg1
(4 rows)

select avg(x) from (select distinct(b+c) x from t_agg1);
          avg          
-----------------------
 2749.0000000000000000
(1 row)

explain (costs off) select sum(x) from (select distinct(1) x from t_agg1);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  Unique
         ->  Seq Scan on t_agg1
(3 rows)

select sum(x) from (select distinct(1) x from t_agg1);
 sum 
-----
   1
(1 row)

-- (3) windowagg
explain (costs off) select b, sum(x) from (select b, row_number() over (partition by b, d, e order by d, e) x from t_agg1) group by b;
                      QUERY PLAN                      
------------------------------------------------------
 GroupAggregate
   Group By Key: t_agg1.b
   ->  WindowAgg
         ->  Sort
               Sort Key: t_agg1.b, t_agg1.d, t_agg1.e
               ->  Seq Scan on t_agg1
(6 rows)

select b, sum(x) from (select b, row_number() over (partition by b, d, e order by d, e) x from t_agg1) group by b order by b limit 10;
 b | sum 
---+-----
 0 |   3
 1 |   3
 2 |   3
 3 |   3
 4 |   3
 5 |   3
 6 |   3
 7 |   3
 8 |   3
 9 |   3
(10 rows)

explain (costs off) select x, sum(a+b+c) from (select a, b, c, row_number() over (partition by c order by a, b) x from t_agg1) group by x;
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group By Key: __unnamed_subquery__.x
   ->  Subquery Scan on __unnamed_subquery__
         ->  WindowAgg
               ->  Sort
                     Sort Key: t_agg1.c, t_agg1.a, t_agg1.b
                     ->  Seq Scan on t_agg1
(7 rows)

select x, sum(a+b+c) from (select a, b, c, row_number() over (partition by c order by a, b) x from t_agg1) group by x order by x limit 10;
 x  |   sum   
----+---------
  1 |  375250
  2 |  875250
  3 | 1375250
  4 | 1875250
  5 | 2375250
  6 | 2875250
  7 | 3375250
  8 | 3875250
  9 | 4375250
 10 | 4870250
(10 rows)

-- join
explain (costs off) select t_agg1.b, sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.b;
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.b
   ->  Hash Join
         Hash Cond: (t_agg1.c = t_agg2.b)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select t_agg1.b, sum(t_agg1.a) from t_agg1 join t_agg2 on t_agg1.c=t_agg2.b group by t_agg1.b order by t_agg1.b limit 10;
 b  | sum  
----+------
  2 | 5004
  3 | 5006
  4 | 5008
  5 | 5010
  6 | 5012
  7 | 5014
  8 | 5016
  9 | 5018
 10 | 5020
 11 | 5022
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, t_agg2.a-t_agg2.b c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a, b; 
                QUERY PLAN                
------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.b
   ->  Hash Join
         Hash Cond: (t_agg1.b = t_agg2.c)
         ->  Seq Scan on t_agg1
         ->  Hash
               ->  Seq Scan on t_agg2
(7 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, t_agg2.a-t_agg2.b c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c) group by a, b order by a, b limit 10; 
 a  | b  | count 
----+----+-------
  3 |  3 |     2
  4 |  4 |     2
  5 |  5 |     2
  6 |  6 |     2
  7 |  7 |     2
  8 |  8 |     2
  9 |  9 |     2
 10 | 10 |     2
 11 | 11 |     2
 12 | 12 |     2
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.b, t_agg1.c) group by a, b; 
                   QUERY PLAN                   
------------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.b
   ->  HashAggregate
         Group By Key: t_agg1.b, t_agg1.c
         ->  Hash Join
               Hash Cond: (t_agg1.b = t_agg2.c)
               ->  Seq Scan on t_agg1
               ->  Hash
                     ->  Seq Scan on t_agg2
(9 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.b, t_agg1.c) group by a, b order by a, b limit 10; 
 a  | b  | count 
----+----+-------
  3 |  3 |     1
  4 |  4 |     1
  5 |  5 |     1
  6 |  6 |     1
  7 |  7 |     1
  8 |  8 |     1
  9 |  9 |     1
 10 | 10 |     1
 11 | 11 |     1
 12 | 12 |     1
(10 rows)

explain (costs off) select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.b, t_agg1.c having avg(t_agg2.a-t_agg2.b)>=0) group by a, b having count(c)=1; 
                         QUERY PLAN                         
------------------------------------------------------------
 HashAggregate
   Group By Key: t_agg1.c, t_agg1.b
   Filter: (count((sum((t_agg2.a - t_agg2.b)))) = 1)
   ->  HashAggregate
         Group By Key: t_agg1.b, t_agg1.c
         Filter: (avg((t_agg2.a - t_agg2.b)) >= 0::numeric)
         ->  Hash Join
               Hash Cond: (t_agg1.b = t_agg2.c)
               ->  Seq Scan on t_agg1
               ->  Hash
                     ->  Seq Scan on t_agg2
(11 rows)

select a, b, count(c) from (select t_agg1.c a, t_agg1.b b, sum(t_agg2.a-t_agg2.b) c from t_agg1 join t_agg2 on t_agg1.b=t_agg2.c group by t_agg1.b, t_agg1.c having avg(t_agg2.a-t_agg2.b)>=0) group by a, b having count(c)=1 order by a, b limit 10; 
 a  | b  | count 
----+----+-------
  8 |  8 |     1
  9 |  9 |     1
 10 | 10 |     1
 11 | 11 |     1
 12 | 12 |     1
(5 rows)

-- Case 3: hashagg + redistribute + hashagg + gather, applicable to relatively small aggregate set, with much rows
-- eliminated by hash agg 
-- group by clause
explain (costs off) select c, sum(e) from t_agg1 group by c;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: c
   ->  Seq Scan on t_agg1
(3 rows)

select c, sum(e) from t_agg1 group by c order by c limit 10;
 c |  sum  
---+-------
 0 | 10000
 1 | 10000
 2 | 10000
 3 | 10000
 4 | 10000
 5 | 10000
 6 | 10000
 7 | 10000
 8 | 10000
 9 | 10000
(10 rows)

explain (costs off) select c, sum(a+b), avg(d) from t_agg1 group by c;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: c
   ->  Seq Scan on t_agg1
(3 rows)

select c, sum(a+b), avg(d) from t_agg1 group by c order by c limit 10;
 c |  sum   |          avg           
---+--------+------------------------
 0 | 150000 | 0.00000000000000000000
 1 | 140040 | 1.00000000000000000000
 2 | 140080 |     2.0000000000000000
 3 | 140120 |     3.0000000000000000
 4 | 140160 |     4.0000000000000000
 5 | 140200 | 0.00000000000000000000
 6 | 140240 | 1.00000000000000000000
 7 | 140280 |     2.0000000000000000
 8 | 140320 |     3.0000000000000000
 9 | 140360 |     4.0000000000000000
(10 rows)

explain (costs off) select c, d, max(a), min(b) from t_agg1 group by c, d;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: c, d
   ->  Seq Scan on t_agg1
(3 rows)

select c, d, max(a), min(b) from t_agg1 group by c, d order by c, d limit 10;
 c | d |  max  | min 
---+---+-------+-----
 0 | 0 | 10000 |   0
 1 | 1 |  9501 |   1
 2 | 2 |  9502 |   2
 3 | 3 |  9503 |   3
 4 | 4 |  9504 |   4
 5 | 0 |  9505 |   5
 6 | 1 |  9506 |   6
 7 | 2 |  9507 |   7
 8 | 3 |  9508 |   8
 9 | 4 |  9509 |   9
(10 rows)

explain (costs off) select c, min(b), rank() over (partition by d order by d) from t_agg1 group by c, d;
              QUERY PLAN              
--------------------------------------
 WindowAgg
   ->  Sort
         Sort Key: d
         ->  HashAggregate
               Group By Key: c, d
               ->  Seq Scan on t_agg1
(6 rows)

select c, min(b), rank() over (partition by d order by d) from t_agg1 group by c, d order by c, d limit 10;
 c | min | rank 
---+-----+------
 0 |   0 |    1
 1 |   1 |    1
 2 |   2 |    1
 3 |   3 |    1
 4 |   4 |    1
 5 |   5 |    1
 6 |   6 |    1
 7 |   7 |    1
 8 |   8 |    1
 9 |   9 |    1
(10 rows)

-- distinct clause
explain (costs off) select distinct(c) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: c
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(c) from t_agg1 order by 1 limit 10;
 c 
---
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)

explain (costs off) select distinct(c*d) from t_agg1;
        QUERY PLAN        
--------------------------
 HashAggregate
   Group By Key: (c * d)
   ->  Seq Scan on t_agg1
(3 rows)

select distinct(c*d) from t_agg1 order by 1 limit 10;
 ?column? 
----------
        0
        1
        4
        6
        9
       11
       14
       16
       21
       24
(10 rows)

-- subquery
-- (1) group by clause
explain (costs off) select sum(x) from (select sum(b) x from t_agg1 group by c);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.c
         ->  Seq Scan on t_agg1
(4 rows)

select sum(x) from (select sum(b) x from t_agg1 group by c);
   sum    
----------
 24995000
(1 row)

explain (costs off) select sum(x) from (select sum(a) x from t_agg1 group by b, c);
                QUERY PLAN                
------------------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.b, t_agg1.c
         ->  Seq Scan on t_agg1
(4 rows)

select sum(x) from (select sum(a) x from t_agg1 group by b, c);
   sum    
----------
 50005000
(1 row)

explain (costs off) select count(*) from (select 2*d x, c+d y, a/10 z from t_agg1) group by x, y, z;
                               QUERY PLAN                               
------------------------------------------------------------------------
 HashAggregate
   Group By Key: (2 * t_agg1.d), (t_agg1.c + t_agg1.d), (t_agg1.a / 10)
   ->  Seq Scan on t_agg1
(3 rows)

select count(*) from (select 2*d x, c+d y, a/10 z from t_agg1) group by x, y, z order by x, y, z limit 10;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
(10 rows)

-- (2) distinct clause
explain (costs off) select count(*) from (select distinct(c) from t_agg1);
           QUERY PLAN           
--------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: t_agg1.c
         ->  Seq Scan on t_agg1
(4 rows)

select count(*) from (select distinct(c) from t_agg1);
 count 
-------
   500
(1 row)

explain (costs off) select count(*) from (select distinct(c*d) from t_agg1);
                 QUERY PLAN                  
---------------------------------------------
 Aggregate
   ->  HashAggregate
         Group By Key: (t_agg1.c * t_agg1.d)
         ->  Seq Scan on t_agg1
(4 rows)

select count(*) from (select distinct(c*d) from t_agg1);
 count 
-------
   343
(1 row)

reset current_schema;
drop schema if exists distribute_aggregates_part2 cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to table distribute_aggregates_part2.tmp_t1
drop cascades to table distribute_aggregates_part2.t_agg1
drop cascades to table distribute_aggregates_part2.t_agg2
