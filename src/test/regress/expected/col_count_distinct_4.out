/*
 * This file is used to test pull down of count(distinct) expression
 */
create schema col_distribute_count_distinct_4;
set current_schema = col_distribute_count_distinct_4;
-- Create Table and Insert Data
create table src(c1 int);
insert into src values(0);
create table t_distinct(a int, b int, c int, d int) with (orientation=column);
INSERT INTO t_distinct select generate_series(1, 1000)%501, generate_series(1, 1000)%75, generate_series(1, 1000)%25, generate_series(1, 1000)%7 from src;
analyze t_distinct;
-- Case 5 multi-level count(distinct)
-- Case 5.1 normal case
explain (costs off) select count(distinct(a)), count(distinct(b)) from t_distinct;
              QUERY PLAN               
---------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on t_distinct
(3 rows)

select count(distinct(a)), count(distinct(b)) from t_distinct;
 count | count 
-------+-------
   501 |    75
(1 row)

explain (costs off) select count(distinct(a)) from t_distinct having count(distinct(a))>5000;
                 QUERY PLAN                 
--------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         Filter: (count(DISTINCT a) > 5000)
         ->  CStore Scan on t_distinct
(4 rows)

select count(distinct(a)) from t_distinct having count(distinct(a))>5000;
 count 
-------
(0 rows)

explain (costs off) select count(distinct(b)) from t_distinct order by count(distinct(d)); 
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: (count(DISTINCT d))
         ->  Vector Aggregate
               ->  CStore Scan on t_distinct
(5 rows)

select count(distinct(b)) from t_distinct order by count(distinct(d)); 
 count 
-------
    75
(1 row)

explain (costs off) select count(distinct(a)) col1, max(b) col2, count(distinct(b)) col3, c, count(distinct(c)) col4, d from t_distinct group by d,c;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d, c
         ->  Vector Sort
               Sort Key: d, c
               ->  CStore Scan on t_distinct
(6 rows)

select count(distinct(a)) col1, max(b) col2, count(distinct(b)) col3, c, count(distinct(c)) col4, d from t_distinct group by d,c order by d,c limit 10;
 col1 | col2 | col3 | c | col4 | d 
------+------+------+---+------+---
    5 |   50 |    3 | 0 |    1 | 0
    5 |   51 |    3 | 1 |    1 | 0
    6 |   52 |    3 | 2 |    1 | 0
    6 |   53 |    3 | 3 |    1 | 0
    5 |   54 |    3 | 4 |    1 | 0
    6 |   55 |    3 | 5 |    1 | 0
    6 |   56 |    3 | 6 |    1 | 0
    6 |   57 |    3 | 7 |    1 | 0
    5 |   58 |    3 | 8 |    1 | 0
    6 |   59 |    3 | 9 |    1 | 0
(10 rows)

explain (costs off) select count(distinct(a)) col1, max(b) col2, count(distinct(b)) col3, min(c) col4, count(distinct(c)) guo, avg(a) qiang from t_distinct;
              QUERY PLAN               
---------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  CStore Scan on t_distinct
(3 rows)

select count(distinct(a)) col1, max(b) col2, count(distinct(b)) col3, min(c) col4, count(distinct(c)) guo, avg(a) qiang from t_distinct;
 col1 | col2 | col3 | col4 | guo |        qiang         
------+------+------+------+-----+----------------------
  501 |   74 |   75 |    0 |  25 | 250.0000000000000000
(1 row)

explain (costs off) select count(distinct(a))+avg(b) col2, count(c) col3, d from t_distinct group by d having count(distinct(c))>5;
                 QUERY PLAN                  
---------------------------------------------
 Row Adapter
   ->  Vector Sort Aggregate
         Group By Key: d
         Filter: (count(DISTINCT c) > 5)
         ->  Vector Sort
               Sort Key: d
               ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a))+avg(b) col2, count(c) col3, d from t_distinct group by d having count(distinct(c))>5 order by d;
         col2         | col3 | d 
----------------------+------+---
 178.7676056338028169 |  142 | 0
 179.4615384615384615 |  143 | 1
 179.4125874125874126 |  143 | 2
 179.3636363636363636 |  143 | 3
 179.3146853146853147 |  143 | 4
 179.2657342657342657 |  143 | 5
 179.2167832167832168 |  143 | 6
(7 rows)

explain (costs off) select count(distinct(a)) col1, avg(b) col2, count(c) col3, d from t_distinct group by d order by d, avg(distinct(c));
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: d, (avg(DISTINCT c))
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(8 rows)

select count(distinct(a)) col1, avg(b) col2, count(c) col3, d from t_distinct group by d order by d, avg(distinct(c));
 col1 |        col2         | col3 | d 
------+---------------------+------+---
  142 | 36.7676056338028169 |  142 | 0
  143 | 36.4615384615384615 |  143 | 1
  143 | 36.4125874125874126 |  143 | 2
  143 | 36.3636363636363636 |  143 | 3
  143 | 36.3146853146853147 |  143 | 4
  143 | 36.2657342657342657 |  143 | 5
  143 | 36.2167832167832168 |  143 | 6
(7 rows)

explain (costs off) select count(distinct(a)) col1, d, avg(b) col2, sum(distinct(a)) col3, avg(distinct(c)) col4 from t_distinct group by d order by d, avg(distinct(c));
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: d, (avg(DISTINCT c))
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(8 rows)

select count(distinct(a)) col1, d, avg(b) col2, sum(distinct(a)) col3, avg(distinct(c)) col4 from t_distinct group by d order by d, avg(distinct(c));
 col1 | d |        col2         | col3  |        col4         
------+---+---------------------+-------+---------------------
  142 | 0 | 36.7676056338028169 | 35500 | 12.0000000000000000
  143 | 1 | 36.4615384615384615 | 35643 | 12.0000000000000000
  143 | 2 | 36.4125874125874126 | 35786 | 12.0000000000000000
  143 | 3 | 36.3636363636363636 | 35929 | 12.0000000000000000
  143 | 4 | 36.3146853146853147 | 35571 | 12.0000000000000000
  143 | 5 | 36.2657342657342657 | 35714 | 12.0000000000000000
  143 | 6 | 36.2167832167832168 | 35857 | 12.0000000000000000
(7 rows)

explain (costs off) select distinct case when min(distinct c)>60 then min(distinct c) else null end as min, count(distinct(b)) from t_distinct group by b;
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Hash Aggregate
         Group By Key: CASE WHEN (min(DISTINCT c) > 60) THEN min(DISTINCT c) ELSE NULL::integer END, count(DISTINCT b)
         ->  Vector Sort Aggregate
               Group By Key: b
               ->  Vector Sort
                     Sort Key: b
                     ->  CStore Scan on t_distinct
(8 rows)

select distinct case when min(distinct c)>60 then min(distinct c) else null end as min, count(distinct(b)) from t_distinct group by b order by 1 nulls first limit 5;
 min | count 
-----+-------
     |     1
(1 row)

explain (costs off) select count(distinct(a)) col1, d, avg(b) col2, sum(distinct(a)) col3, avg(distinct(c)) col4 from t_distinct group by d having col1=1428 or d+col4>125 order by d, avg(distinct(c));
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Sort
         Sort Key: d, (avg(DISTINCT c))
         ->  Vector Sort Aggregate
               Group By Key: d
               Filter: ((count(DISTINCT a) = 1428) OR (((d)::numeric + avg(DISTINCT c)) > 125::numeric))
               ->  Vector Sort
                     Sort Key: d
                     ->  CStore Scan on t_distinct
(9 rows)

select count(distinct(a)) col1, d, avg(b) col2, sum(distinct(a)) col3, avg(distinct(c)) col4 from t_distinct group by d having col1=1428 or d+col4>125 order by d, avg(distinct(c));
 col1 | d | col2 | col3 | col4 
------+---+------+------+------
(0 rows)

-- Case 5.2 set operation
explain (costs off) select count(distinct a),max(distinct b),c from t_distinct group by c union (select count(distinct a),max(distinct b),d from t_distinct group by d) order by 3,2,1 limit 10;
                                                                                                  QUERY PLAN                                                                                                  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort
               Sort Key: col_distribute_count_distinct_4.t_distinct.c, (max(DISTINCT col_distribute_count_distinct_4.t_distinct.b)), (count(DISTINCT col_distribute_count_distinct_4.t_distinct.a))
               ->  Vector Sonic Hash Aggregate
                     Group By Key: (count(DISTINCT col_distribute_count_distinct_4.t_distinct.a)), (max(DISTINCT col_distribute_count_distinct_4.t_distinct.b)), col_distribute_count_distinct_4.t_distinct.c
                     ->  Vector Append
                           ->  Vector Sort Aggregate
                                 Group By Key: col_distribute_count_distinct_4.t_distinct.c
                                 ->  Vector Sort
                                       Sort Key: col_distribute_count_distinct_4.t_distinct.c
                                       ->  CStore Scan on t_distinct
                           ->  Vector Sort Aggregate
                                 Group By Key: col_distribute_count_distinct_4.t_distinct.d
                                 ->  Vector Sort
                                       Sort Key: col_distribute_count_distinct_4.t_distinct.d
                                       ->  CStore Scan on t_distinct
(17 rows)

select count(distinct a),max(distinct b),c from t_distinct group by c union (select count(distinct a),max(distinct b),d from t_distinct group by d) order by 3,2,1 limit 10;
 count | max | c 
-------+-----+---
    40 |  50 | 0
   142 |  74 | 0
    40 |  51 | 1
   143 |  74 | 1
    40 |  52 | 2
   143 |  74 | 2
    40 |  53 | 3
   143 |  74 | 3
    40 |  54 | 4
   143 |  74 | 4
(10 rows)

-- Case 5.3 null case
insert into t_distinct values(1, null, null, null), (2, null, 3, null), (2, 3, null, null), (2, null, null, 3), (1, null, 5, 6), (1, 3, null, 5), (1, 3, 5, null), (1, null, null, null), (2, null, 3, null), (2, 3, null, null), (2, null, null, 3), (1, null, 5, 6), (1, 3, null, 5), (1, 3, 5, null);
set enable_mergejoin=off;
set enable_hashjoin=off;
explain (costs off) select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: b, c, d
               ->  Vector Sort
                     Sort Key: b DESC, c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
 count | count | b  | c  | d 
-------+-------+----+----+---
     1 |     1 |    |    |  
     1 |     1 |    |    | 3
     1 |     1 |    |  5 | 6
     1 |     1 |    |  3 |  
     1 |     1 | 74 | 24 | 6
     2 |     1 | 74 | 24 | 5
     2 |     1 | 74 | 24 | 4
     2 |     1 | 74 | 24 | 3
     2 |     1 | 74 | 24 | 2
     2 |     1 | 74 | 24 | 1
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: c, d
               ->  Vector Sort
                     Sort Key: c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
 count | count | c  | d 
-------+-------+----+---
     2 |     1 |    |  
     1 |     1 |    | 5
     1 |     0 |    | 3
     5 |     3 | 24 | 6
     6 |     3 | 24 | 5
     6 |     3 | 24 | 4
     6 |     3 | 24 | 3
     5 |     3 | 24 | 2
     6 |     3 | 24 | 1
     6 |     3 | 24 | 0
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
 count | count | count | d 
-------+-------+-------+---
     2 |     1 |     2 |  
   144 |    75 |    25 | 6
   143 |    75 |    25 | 5
   143 |    75 |    25 | 4
   144 |    75 |    25 | 3
   143 |    75 |    25 | 2
   143 |    75 |    25 | 1
   142 |    75 |    25 | 0
(8 rows)

set enable_nestloop=off;
set enable_hashjoin=on;
explain (costs off) select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: b, c, d
               ->  Vector Sort
                     Sort Key: b DESC, c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
 count | count | b  | c  | d 
-------+-------+----+----+---
     1 |     1 |    |    |  
     1 |     1 |    |    | 3
     1 |     1 |    |  5 | 6
     1 |     1 |    |  3 |  
     1 |     1 | 74 | 24 | 6
     2 |     1 | 74 | 24 | 5
     2 |     1 | 74 | 24 | 4
     2 |     1 | 74 | 24 | 3
     2 |     1 | 74 | 24 | 2
     2 |     1 | 74 | 24 | 1
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: c, d
               ->  Vector Sort
                     Sort Key: c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
 count | count | c  | d 
-------+-------+----+---
     2 |     1 |    |  
     1 |     1 |    | 5
     1 |     0 |    | 3
     5 |     3 | 24 | 6
     6 |     3 | 24 | 5
     6 |     3 | 24 | 4
     6 |     3 | 24 | 3
     5 |     3 | 24 | 2
     6 |     3 | 24 | 1
     6 |     3 | 24 | 0
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
 count | count | count | d 
-------+-------+-------+---
     2 |     1 |     2 |  
   144 |    75 |    25 | 6
   143 |    75 |    25 | 5
   143 |    75 |    25 | 4
   144 |    75 |    25 | 3
   143 |    75 |    25 | 2
   143 |    75 |    25 | 1
   142 |    75 |    25 | 0
(8 rows)

set enable_hashjoin=off;
set enable_mergejoin=on;
explain (costs off) select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: b, c, d
               ->  Vector Sort
                     Sort Key: b DESC, c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(a*0)), b, c, d from t_distinct group by b, c, d order by 3 desc, 4 desc, 5 desc limit 10;
 count | count | b  | c  | d 
-------+-------+----+----+---
     1 |     1 |    |    |  
     1 |     1 |    |    | 3
     1 |     1 |    |  5 | 6
     1 |     1 |    |  3 |  
     1 |     1 | 74 | 24 | 6
     2 |     1 | 74 | 24 | 5
     2 |     1 | 74 | 24 | 4
     2 |     1 | 74 | 24 | 3
     2 |     1 | 74 | 24 | 2
     2 |     1 | 74 | 24 | 1
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: c, d
               ->  Vector Sort
                     Sort Key: c DESC, d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), c, d from t_distinct group by c, d order by 3 desc, 4 desc limit 10;
 count | count | c  | d 
-------+-------+----+---
     2 |     1 |    |  
     1 |     1 |    | 5
     1 |     0 |    | 3
     5 |     3 | 24 | 6
     6 |     3 | 24 | 5
     6 |     3 | 24 | 4
     6 |     3 | 24 | 3
     5 |     3 | 24 | 2
     6 |     3 | 24 | 1
     6 |     3 | 24 | 0
(10 rows)

explain (costs off) select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
                    QUERY PLAN                     
---------------------------------------------------
 Row Adapter
   ->  Vector Limit
         ->  Vector Sort Aggregate
               Group By Key: d
               ->  Vector Sort
                     Sort Key: d DESC
                     ->  CStore Scan on t_distinct
(7 rows)

select count(distinct(a)), count(distinct(b)), count(distinct(c)), d from t_distinct group by d order by 4 desc limit 10;
 count | count | count | d 
-------+-------+-------+---
     2 |     1 |     2 |  
   144 |    75 |    25 | 6
   143 |    75 |    25 | 5
   143 |    75 |    25 | 4
   144 |    75 |    25 | 3
   143 |    75 |    25 | 2
   143 |    75 |    25 | 1
   142 |    75 |    25 | 0
(8 rows)

reset enable_hashjoin;
reset enable_nestloop;
-- dummy column redistribute
explain (costs off) select count(distinct(c)) from (select a, ''::text as c from (select t1.a from t_distinct t1 join t_distinct t2 on t1.a=t2.a join t_distinct t3 on t2.a=t3.a) where a>5);
                      QUERY PLAN                      
------------------------------------------------------
 Row Adapter
   ->  Vector Aggregate
         ->  Vector Sonic Hash Join
               Hash Cond: (t1.a = t3.a)
               ->  Vector Sonic Hash Join
                     Hash Cond: (t1.a = t2.a)
                     ->  CStore Scan on t_distinct t1
                           Filter: (a > 5)
                     ->  CStore Scan on t_distinct t2
                           Filter: (a > 5)
               ->  CStore Scan on t_distinct t3
                     Filter: (a > 5)
(12 rows)

select count(distinct(c)) from (select a, ''::text as c from (select t1.a from t_distinct t1 join t_distinct t2 on t1.a=t2.a join t_distinct t3 on t2.a=t3.a) where a>5);
 count 
-------
     0
(1 row)

-- Clean Table
drop table t_distinct;
reset current_schema;
drop schema col_distribute_count_distinct_4 cascade;
NOTICE:  drop cascades to table col_distribute_count_distinct_4.src
