set current_schema='shipping_schema';
--convert
--convert_to
--convert_from
--age(timestamptz)
--age(timestamp)
--overlaps(timestamptz,interval,timestamptz,interval)
--overlaps(timestamptz, timestamptz,timestamptz,interval)
--overlaps(timestamptz,interval,timestamptz, timestamptz)
--to_char(float4,text)
--to_char(float8,text)
--to_char(interval,text)
--to_number(text,text)
--to_timestamp(text)
--timezone(text,timetz)
--generate_series(timestamptz, timestamptz, interval)
--regexp_like
--regex_like_m
--pg_encoding_to_char
--pg_char_to_encoding
---------------convert/convert_to/convert_from-----------------
---case1 shipping---
explain (costs off) select t4.a,convert_from(convert(convert_to(t5.c, 'GBK'),'GBK','LATIN1'),'LATIN1') from t4, t5 where t4.b = t5.a order by 1 limit 3; 
                         QUERY PLAN                          
-------------------------------------------------------------
 Limit
   ->  Streaming (type: GATHER)
         Merge Sort Key: t4.a
         Node/s: All datanodes
         ->  Limit
               ->  Sort
                     Sort Key: t4.a
                     ->  Hash Join
                           Hash Cond: (t4.b = t5.a)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t4
                           ->  Hash
                                 ->  Seq Scan on t5
(14 rows)

select t4.a,convert_from(convert(convert_to(t5.c, 'GBK'),'GBK','LATIN1'),'LATIN1') from t4, t5 where t4.b = t5.a order by 1,2 limit 3;
 a | convert_from 
---+--------------
 0 | 0
 0 | 0
 0 | 1
(3 rows)

---case2 shipping---
explain (costs off) select t4.a from t4, t5 where t4.b = t5.a and t4.c = convert_from(convert(convert_to(t5.c, 'GBK'),'GBK','LATIN1'),'LATIN1') order by 1 limit 3;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Streaming (type: GATHER)
         Merge Sort Key: t4.a
         Node/s: All datanodes
         ->  Limit
               ->  Sort
                     Sort Key: t4.a
                     ->  Hash Join
                           Hash Cond: ((t4.b = t5.a) AND (t4.c = convert_from(convert(convert_to(t5.c, 'GBK'::name), 'GBK'::name, 'LATIN1'::name), 'LATIN1'::name)))
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t4
                           ->  Hash
                                 ->  Seq Scan on t5
(14 rows)

select t4.a from t4, t5 where t4.b = t5.a and t4.c = convert_from(convert(convert_to(t5.c, 'GBK'),'GBK','LATIN1'),'LATIN1') order by 1 limit 3;
 a 
---
 0
 1
 1
(3 rows)

---------------age(timestamptz)/age(timestamp)-----------------
---case1 shipping---
explain (costs off) 
select t4.a, age(timestamptz'1757-06-13+08') > interval '1 year', age(timestamp'9999-06-13') > interval '1 year' from t4, t5 where t4.b = t5.a order by 1,2,3 limit 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Limit
   ->  Streaming (type: GATHER)
         Merge Sort Key: t4.a
         Node/s: All datanodes
         ->  Limit
               ->  Sort
                     Sort Key: t4.a
                     ->  Hash Join
                           Hash Cond: (t4.b = t5.a)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t4
                           ->  Hash
                                 ->  Seq Scan on t5
(14 rows)

select t4.a, age(timestamptz'1757-06-13+08') > interval '1 year', age(timestamp'9999-06-13') > interval '1 year' from t4, t5 where t4.b = t5.a order by 1,2,3 limit 1;
 a | ?column? | ?column? 
---+----------+----------
 0 | t        | f
(1 row)

---case2 shipping---
explain (costs off) 
select t4.a from t4, t5 where t4.b = t5.a and age(timestamptz'1757-06-13+08') > interval '1 year' and age(timestamp'9999-06-13') < interval '1 year' order by 1 limit 1;
--?.*
--?.*
 Limit
   ->  Streaming (type: GATHER)
         Merge Sort Key: t4.a
         Node/s: All datanodes
         ->  Limit
               ->  Sort
                     Sort Key: t4.a
                     ->  Result
--?.*
                           ->  Hash Join
                                 Hash Cond: (t4.b = t5.a)
                                 ->  Streaming(type: REDISTRIBUTE)
                                       Spawn on: All datanodes
                                       ->  Seq Scan on t4
                                 ->  Hash
                                       ->  Seq Scan on t5
(16 rows)

select t4.a from t4, t5 where t4.b = t5.a and age(timestamptz'1757-06-13+08') > interval '1 year' and age(timestamp'9999-06-13') < interval '1 year' order by 1 limit 1;
 a 
---
 0
(1 row)

----1305 overlaps(timestamptz,interval,timestamptz,interval)/1306 overlaps(timestamptz, timestamptz,timestamptz,interval)/1307 overlaps(timestamptz,interval,timestamptz, timestamptz)---
---case1 shipping---
explain (costs off)
select overlaps(t6.b,t6.c,t7.b,t7.c), overlaps(t6.b,t7.b,t7.b,t7.c),overlaps(t6.b,t6.c,t7.b,t6.b) from t6, t7 where t6.d = t7.d;
                   QUERY PLAN                    
-------------------------------------------------
 Streaming (type: GATHER)
   Node/s: All datanodes
   ->  Hash Join
         Hash Cond: (t6.d = t7.d)
         ->  Streaming(type: REDISTRIBUTE)
               Spawn on: All datanodes
               ->  Seq Scan on t6
         ->  Hash
               ->  Streaming(type: REDISTRIBUTE)
                     Spawn on: All datanodes
                     ->  Seq Scan on t7
(11 rows)

select overlaps(t6.b,t6.c,t7.b,t7.c), overlaps(t6.b,t7.b,t7.b,t7.c),overlaps(t6.b,t6.c,t7.b,t6.b) from t6, t7 where t6.d = t7.d;
 overlaps | overlaps | overlaps 
----------+----------+----------
 t        | t        | t
 t        | t        | t
 t        | t        | t
(3 rows)

---case2 shipping---
explain (costs off)
select t6.e, t7.e from t6,t7 where overlaps(t6.b,t7.b,t7.b,t7.c) and overlaps(t6.b,t6.c,t7.b,t7.c) and overlaps(t6.b,t6.c,t7.b,t6.b) order by 1,2;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: t6.e, t7.e
   Node/s: All datanodes
   ->  Sort
         Sort Key: t6.e, t7.e
         ->  Nested Loop
               Join Filter: ("overlaps"(t6.b, t7.b, t7.b, (t7.b + t7.c)) AND "overlaps"(t6.b, (t6.b + t6.c), t7.b, t6.b) AND "overlaps"(t6.b, (t6.b + t6.c), t7.b, (t7.b + t7.c)))
               ->  Streaming(type: BROADCAST)
                     Spawn on: All datanodes
                     ->  Seq Scan on t6
               ->  Materialize
                     ->  Seq Scan on t7
(12 rows)

select t6.e, t7.e from t6,t7 where overlaps(t6.b,t7.b,t7.b,t7.c) and overlaps(t6.b,t6.c,t7.b,t7.c) and overlaps(t6.b,t6.c,t7.b,t6.b) order by 1,2;
 e | e 
---+---
 a | a
 b | b
 c | c
(3 rows)

------to_char(float4,text)/to_char(float8,text)/to_char(interval,text)------
---case1 shipping---
explain (costs off)
select to_char(t8.a,'00999.00')from t8 ;
        QUERY PLAN        
--------------------------
 Streaming (type: GATHER)
   Node/s: All datanodes
   ->  Seq Scan on t8
(3 rows)

select to_char(t8.a,'00999.00')from t8 order by 1;
  to_char  
-----------
  00666.82
  00777.10
(2 rows)

---case2 shipping---
explain (costs off)
select t8.a,t8.b from t8 ,t9 where t8.c=t9.c and to_char(t8.a,'00999.9900') = to_char(t9.b,'00999.9900');
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Node/s: All datanodes
   ->  Hash Join
         Hash Cond: ((t8.c = t9.c) AND (to_char(t8.a, '00999.9900'::text) = to_char(t9.b, '00999.9900'::text)))
         ->  Seq Scan on t8
         ->  Hash
               ->  Seq Scan on t9
(7 rows)

select t8.a,t8.b from t8 ,t9 where t8.c=t9.c and to_char(t8.a,'00999.9900') = to_char(t9.b,'00999.9900');
 a | b 
---+---
(0 rows)

--------------to_number(text,text)/to_timestamp(text)/timezone(text,timetz)------------
---case1 shipping---
explain (costs off)
select to_number(t8.a::text,'9999.00') from t8 ,t9 where t8.c=t9.c;
            QUERY PLAN            
----------------------------------
 Streaming (type: GATHER)
   Node/s: All datanodes
   ->  Hash Join
         Hash Cond: (t8.c = t9.c)
         ->  Seq Scan on t8
         ->  Hash
               ->  Seq Scan on t9
(7 rows)

select to_number(t8.a::text,'9999.00') from t8 ,t9 where t8.c=t9.c order by 1;
 to_number 
-----------
    666.82
     777.1
(2 rows)

---case2 shipping---
explain (costs off)
select t8.a,t8.b from t8 ,t9 where t8.c=t9.c and to_number(t8.a::text,'00999999.999900') = to_number(t9.b,'00999999.9999900');
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Node/s: All datanodes
   ->  Hash Join
         Hash Cond: ((t8.c = t9.c) AND (to_number((t8.a)::text, '00999999.999900'::text) = to_number((t9.b)::text, '00999999.9999900'::text)))
         ->  Seq Scan on t8
         ->  Hash
               ->  Seq Scan on t9
(7 rows)

select t8.a,t8.b from t8 ,t9 where t8.c=t9.c and to_number(t8.a::text,'00999999.999900') = to_number(t9.b,'00999999.9999900');
 a | b 
---+---
(0 rows)

---case3 shipping---
explain (costs off)
select timezone('hkt',current_time),count(*) from t4, t9 where t4.b = t9.c order by 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Sort Key: (timezone('hkt'::text, ('now'::cstring)::time with time zone))
   ->  Aggregate
         ->  Streaming (type: GATHER)
               Node/s: All datanodes
               ->  Aggregate
                     ->  Hash Join
                           Hash Cond: (t4.b = t9.c)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t4
                           ->  Hash
                                 ->  Seq Scan on t9
(13 rows)

--------------pg_char_to_encoding/pg_encoding_to_char/regexp_like/regex_like_m------------
---case1 shipping---
explain (costs off)
select pg_char_to_encoding('UTF-8'),count(*) from t4, t9 where t4.b = t9.c order by 1;
                      QUERY PLAN                       
-------------------------------------------------------
 Aggregate
   ->  Streaming (type: GATHER)
         Node/s: All datanodes
         ->  Aggregate
               ->  Hash Join
                     Hash Cond: (t4.b = t9.c)
                     ->  Streaming(type: REDISTRIBUTE)
                           Spawn on: All datanodes
                           ->  Seq Scan on t4
                     ->  Hash
                           ->  Seq Scan on t9
(11 rows)

---case2 shipping---
explain (costs off)
select pg_encoding_to_char(7),count(*) from t4, t9 where t4.b = t9.c order by 1;
                      QUERY PLAN                       
-------------------------------------------------------
 Aggregate
   ->  Streaming (type: GATHER)
         Node/s: All datanodes
         ->  Aggregate
               ->  Hash Join
                     Hash Cond: (t4.b = t9.c)
                     ->  Streaming(type: REDISTRIBUTE)
                           Spawn on: All datanodes
                           ->  Seq Scan on t4
                     ->  Hash
                           ->  Seq Scan on t9
(11 rows)

---case3 shipping---
explain (costs off)
select regexp_like(t10.a, t10.a, 'i'),count(*) from t10, t9 where t10.b = t9.c group by t10.a order by 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: (regexp_like(t10.a, t10.a, 'i'::text))
   Node/s: All datanodes
   ->  Sort
         Sort Key: (regexp_like(t10.a, t10.a, 'i'::text))
         ->  HashAggregate
               Group By Key: t10.a
               ->  Streaming(type: REDISTRIBUTE)
                     Spawn on: All datanodes
                     ->  Hash Join
                           Hash Cond: (t10.b = t9.c)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t10
                           ->  Hash
                                 ->  Seq Scan on t9
(16 rows)

---case4 shipping---
explain (costs off)
select regexp_like(t10.a, t10.a, 'm'),count(*) from t10, t9 where t10.b = t9.c group by t10.a order by 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: (regexp_like(t10.a, t10.a, 'm'::text))
   Node/s: All datanodes
   ->  Sort
         Sort Key: (regexp_like(t10.a, t10.a, 'm'::text))
         ->  HashAggregate
               Group By Key: t10.a
               ->  Streaming(type: REDISTRIBUTE)
                     Spawn on: All datanodes
                     ->  Hash Join
                           Hash Cond: (t10.b = t9.c)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t10
                           ->  Hash
                                 ->  Seq Scan on t9
(16 rows)

---case4 shipping---
explain (costs off)
select regexp_like(t10.a, t10.a, 'c'),count(*) from t10, t9 where t10.b = t9.c group by t10.a order by 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: (regexp_like(t10.a, t10.a, 'c'::text))
   Node/s: All datanodes
   ->  Sort
         Sort Key: (regexp_like(t10.a, t10.a, 'c'::text))
         ->  HashAggregate
               Group By Key: t10.a
               ->  Streaming(type: REDISTRIBUTE)
                     Spawn on: All datanodes
                     ->  Hash Join
                           Hash Cond: (t10.b = t9.c)
                           ->  Streaming(type: REDISTRIBUTE)
                                 Spawn on: All datanodes
                                 ->  Seq Scan on t10
                           ->  Hash
                                 ->  Seq Scan on t9
(16 rows)

---case5 shipping---
explain select count(*) from t10, 
(select *  from generate_series('2018-10-25 00:00:00+08'::timestamptz,'2018-10-26 00:00:00+08'::timestamptz,'1 hour'))tmp  
where t10.a = tmp.generate_series order by 1;
                                                    QUERY PLAN                                                    
------------------------------------------------------------------------------------------------------------------
 Sort  (cost=92.31..92.31 rows=1 width=8)
   Sort Key: (pg_catalog.count(*))
   ->  Aggregate  (cost=91.94..92.30 rows=1 width=8)
         ->  Streaming (type: GATHER)  (cost=91.94..92.30 rows=12 width=8)
               Node/s: All datanodes
               ->  Aggregate  (cost=91.88..91.89 rows=12 width=8)
                     ->  Merge Join  (cost=83.58..91.75 rows=600 width=0)
                           Merge Cond: (((t10.a)::timestamp without time zone) = generate_series.generate_series)
                           ->  Sort  (cost=23.75..23.81 rows=121 width=32)
                                 Sort Key: ((t10.a)::timestamp without time zone)
                                 ->  Seq Scan on t10  (cost=0.00..23.23 rows=120 width=32)
                           ->  Sort  (cost=59.83..62.33 rows=1000 width=8)
                                 Sort Key: generate_series.generate_series
                                 ->  Function Scan on generate_series  (cost=0.00..10.00 rows=1000 width=8)
(14 rows)

