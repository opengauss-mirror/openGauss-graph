\! gs_ktool -d all
DELETE ALL

\! gs_ktool -g
GENERATE
1
DROP ROLE IF EXISTS newuser;
NOTICE:  role "newuser" does not exist, skipping
CREATE USER newuser PASSWORD 'gauss@123';
-- CREATE Cmk
CREATE CLIENT MASTER KEY cmk1 WITH ( KEY_STORE = gs_ktool , KEY_PATH = "gs_ktool/1" , ALGORITHM = AES_256_CBC);
-- CREATE Cek
CREATE COLUMN ENCRYPTION KEY cek1 WITH VALUES (CLIENT_MASTER_KEY = cmk1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
CREATE COLUMN ENCRYPTION KEY cek2 WITH VALUES (CLIENT_MASTER_KEY = cmk1, ALGORITHM = AEAD_AES_256_CBC_HMAC_SHA256);
CREATE SCHEMA testsp;
-- grant privileges on schema (ALL = USAGE, CREATE)
GRANT ALL ON SCHEMA testsp TO newuser;
GRANT ALL ON SCHEMA public TO newuser;
GRANT USAGE ON CLIENT_MASTER_KEY cmk1 TO newuser;
GRANT USAGE ON COLUMN_ENCRYPTION_KEY cek1 TO newuser;
GRANT USAGE ON COLUMN_ENCRYPTION_KEY cek2 TO newuser;
CREATE TABLE testsp.acltest1 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = public.cek1, ENCRYPTION_TYPE = DETERMINISTIC));
CREATE SCHEMA testsp1;
-- create TABLE 
CREATE TABLE testsp1.acltest2 (x int, x2 varchar(50) ENCRYPTED WITH (COLUMN_ENCRYPTION_KEY = public.cek2, ENCRYPTION_TYPE = DETERMINISTIC));
select column_name from gs_encrypted_columns;
 column_name 
-------------
 x2
 x2
(2 rows)

RESET SESSION AUTHORIZATION;
DROP TABLE testsp.acltest1;
DROP TABLE testsp1.acltest2;
REVOKE USAGE ON COLUMN_ENCRYPTION_KEY cek1 FROM newuser;
REVOKE USAGE ON COLUMN_ENCRYPTION_KEY cek2 FROM newuser;
REVOKE USAGE ON CLIENT_MASTER_KEY cmk1 FROM newuser;
DROP COLUMN ENCRYPTION KEY cek2 CASCADE;
DROP COLUMN ENCRYPTION KEY cek1 CASCADE;
DROP CLIENT MASTER KEY cmk1 CASCADE;
DROP SCHEMA IF EXISTS testsp CASCADE;
DROP SCHEMA IF EXISTS testsp1 CASCADE;
DROP SCHEMA IF EXISTS newuser CASCADE;
REVOKE ALL ON SCHEMA public FROM newuser;
DROP ROLE newuser; 
\! gs_ktool -d all
DELETE ALL
 1
