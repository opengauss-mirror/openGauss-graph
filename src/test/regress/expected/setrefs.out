create table associate_benefit_expense
(
period_end_dt           date          ,
associate_expns_type_cd text
)with(orientation=column);
CREATE  TABLE offers_20050701 (
promo_id text,
party_firstname character varying(50),
party_lastname character varying(50)
)WITH (orientation=column);
WITH WITH_001 AS (
    SELECT CAST(associate_expns_type_cd AS varchar) c1
    FROM associate_benefit_expense
    GROUP BY CUBE(c1))
SELECT PARTY_FIRSTNAME
FROM WITH_001,offers_20050701
WHERE WITH_001.c1 LIKE '%c_'
GROUP BY ROLLUP(PARTY_FIRSTNAME);
 party_firstname 
-----------------
 
(1 row)

explain  (costs off, verbose on)
WITH WITH_001 AS materialized (
    SELECT CAST(associate_expns_type_cd AS varchar) c1
    FROM associate_benefit_expense
    GROUP BY CUBE(c1))
SELECT PARTY_FIRSTNAME
FROM WITH_001,offers_20050701
WHERE WITH_001.c1 LIKE '%c_'
GROUP BY ROLLUP(PARTY_FIRSTNAME);
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: offers_20050701.party_firstname
   Group By Key: offers_20050701.party_firstname
   Group By Key: ()
   CTE with_001
     ->  Row Adapter
           Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
           ->  Vector Sort Aggregate
                 Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                 Group By Key: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                 Group By Key: ()
                 ->  Vector Sort
                       Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                       Sort Key: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                       ->  CStore Scan on public.associate_benefit_expense
                             Output: (associate_benefit_expense.associate_expns_type_cd)::character varying
   ->  Sort
         Output: offers_20050701.party_firstname
         Sort Key: offers_20050701.party_firstname
         ->  Nested Loop
               Output: offers_20050701.party_firstname
               ->  CTE Scan on with_001
                     Output: with_001.c1
                     Filter: ((with_001.c1)::text ~~ '%c_'::text)
               ->  Materialize
                     Output: offers_20050701.party_firstname
                     ->  Row Adapter
                           Output: offers_20050701.party_firstname
                           ->  CStore Scan on public.offers_20050701
                                 Output: offers_20050701.party_firstname
(30 rows)

explain  (costs off, verbose on)
WITH WITH_001 AS (
    SELECT CAST(associate_expns_type_cd AS varchar) c1
    FROM associate_benefit_expense
    GROUP BY CUBE(c1))
SELECT PARTY_FIRSTNAME
FROM WITH_001,offers_20050701
WHERE WITH_001.c1 LIKE '%c_'
GROUP BY ROLLUP(PARTY_FIRSTNAME);
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Row Adapter
   Output: offers_20050701.party_firstname
   ->  Vector Sort Aggregate
         Output: offers_20050701.party_firstname
         Group By Key: offers_20050701.party_firstname
         Group By Key: ()
         ->  Vector Sort
               Output: offers_20050701.party_firstname
               Sort Key: offers_20050701.party_firstname
               ->  Vector Nest Loop
                     Output: offers_20050701.party_firstname
                     ->  CStore Scan on public.offers_20050701
                           Output: offers_20050701.party_firstname
                     ->  Vector Materialize
                           Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                           ->  Vector Sort Aggregate
                                 Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                                 Group By Key: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                                 Group By Key: ()
                                 Filter: ((associate_benefit_expense.associate_expns_type_cd)::text ~~ '%c_'::text)
                                 ->  Vector Sort
                                       Output: ((associate_benefit_expense.associate_expns_type_cd)::character varying), associate_benefit_expense.associate_expns_type_cd
                                       Sort Key: ((associate_benefit_expense.associate_expns_type_cd)::character varying)
                                       ->  CStore Scan on public.associate_benefit_expense
                                             Output: (associate_benefit_expense.associate_expns_type_cd)::character varying, associate_benefit_expense.associate_expns_type_cd
(25 rows)

drop table if exists associate_benefit_expense,offers_20050701;
create table position_grade(
position_grade_cd varchar(50) ,
position_grade_desc   text
);
;
create table sales_transaction_line(
sales_tran_id int ,
item_id varchar(40)
);
;
explain (verbose on, costs off)
MERGE INTO position_grade t1
USING (
SELECT ITEM_ID c2
FROM sales_transaction_line ) t2
ON ( t2.c2 = t1.position_grade_cd )
WHEN NOT MATCHED THEN INSERT VALUES ( t2.c2,t2.c2 );
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Merge on public.position_grade t1
   ->  Hash Left Join
         Output: sales_transaction_line.item_id, t1.position_grade_cd, t1.position_grade_desc, t1.ctid, sales_transaction_line.ctid
         Hash Cond: ((sales_transaction_line.item_id)::text = (t1.position_grade_cd)::text)
         ->  Seq Scan on public.sales_transaction_line
               Output: sales_transaction_line.item_id, sales_transaction_line.ctid
         ->  Hash
               Output: t1.position_grade_cd, t1.position_grade_desc, t1.ctid
               ->  Seq Scan on public.position_grade t1
                     Output: t1.position_grade_cd, t1.position_grade_desc, t1.ctid
(10 rows)

MERGE INTO position_grade t1
USING (
SELECT ITEM_ID c2
FROM sales_transaction_line ) t2
ON ( t2.c2 = t1.position_grade_cd )
WHEN NOT MATCHED THEN INSERT VALUES ( t2.c2,t2.c2 );
explain (verbose on, costs off)
insert into position_grade select t2.c2,t2.c2 from position_grade t1 left join (SELECT ITEM_ID c2
FROM sales_transaction_line ) t2 ON ( t2.c2 = t1.position_grade_cd );
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Insert on public.position_grade
   ->  Hash Right Join
         Output: (sales_transaction_line.item_id)::character varying(50), sales_transaction_line.item_id
         Hash Cond: ((sales_transaction_line.item_id)::text = (t1.position_grade_cd)::text)
         ->  Seq Scan on public.sales_transaction_line
               Output: sales_transaction_line.sales_tran_id, sales_transaction_line.item_id
         ->  Hash
               Output: t1.position_grade_cd
               ->  Seq Scan on public.position_grade t1
                     Output: t1.position_grade_cd
(10 rows)

insert into position_grade select t2.c2,t2.c2 from position_grade t1 left join (SELECT ITEM_ID c2
FROM sales_transaction_line ) t2 ON ( t2.c2 = t1.position_grade_cd );
drop table position_grade;
drop table sales_transaction_line;
create table merge_sort_t1(a int, b varchar) ;
create table merge_sort_t2(c int, d char(10));
insert into merge_sort_t1 values(1, ' abc ');
insert into merge_sort_t1 values(1, 'abc ');
insert into merge_sort_t2 values(1, ' abc');
insert into merge_sort_t2 values(1, ' abc');
set enable_hashjoin=off;
set enable_nestloop=off;
set enable_mergejoin=on;
explain (verbose on, costs off)
select count(*) from merge_sort_t1 t1 join merge_sort_t2 t2 on t1.b=t2.d where t1.a=1;
                      QUERY PLAN                       
-------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Merge Join
         Merge Cond: ((t1.b)::bpchar = t2.d)
         ->  Sort
               Output: t1.b
               Sort Key: t1.b USING <
               ->  Seq Scan on public.merge_sort_t1 t1
                     Output: t1.b
                     Filter: (t1.a = 1)
         ->  Sort
               Output: t2.d
               Sort Key: t2.d
               ->  Seq Scan on public.merge_sort_t2 t2
                     Output: t2.d
(15 rows)

select count(*) from merge_sort_t1 t1 join merge_sort_t2 t2 on t1.b=t2.d where t1.a=1;
 count 
-------
     2
(1 row)

drop table merge_sort_t1;
drop table merge_sort_t2;
