create schema string_digit_to_numeric;
set current_schema = string_digit_to_numeric;
create table test1 (c1 int, c2 varchar) ;
create table test2 (c1 char, c2 varchar, c3 nvarchar2, c4 text) ;
create table test3 (c1 int1, c2 int2, c3 int4, c4 int8, c5 float4, c6 float8, c7 numeric) ;
insert into test1 values (2, '1.1');
insert into test2 values (2, 1.1, 1.01, 1.001);
insert into test3 values (1, 1, 1, 1, 1, 1, 1);
analyze test1;
analyze test2;
analyze test3;
select * from test1 where c2 > 1;
ERROR:  invalid input syntax for type bigint: "1.1"
explain (verbose on, costs off) select * from test1 where c2 > 1;
                QUERY PLAN                 
-------------------------------------------
 Seq Scan on string_digit_to_numeric.test1
   Output: c1, c2
   Filter: ((test1.c2)::bigint > 1)
(3 rows)

select * from test2 join test3 on test2.c1 > test3.c1;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c1 > test3.c1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: (test2.c1 > (test3.c1)::bpchar)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c2 > test3.c2;
ERROR:  invalid input syntax for type bigint: "1.1"
explain (verbose on, costs off) select * from test2 join test3 on test2.c2 > test3.c2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c2)::bigint > test3.c2)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c3 > test3.c3;
ERROR:  invalid input syntax for integer: "1.01"
explain (verbose on, costs off) select * from test2 join test3 on test2.c3 > test3.c3;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: (int4in(nvarchar2out(test2.c3)) > test3.c3)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c4;
ERROR:  invalid input syntax for type bigint: "1.001"
explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c4;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::bigint > test3.c4)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c5;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c5;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::double precision > test3.c5)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c6;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c6;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::double precision > test3.c6)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c7;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c7;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::numeric > test3.c7)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

create view v1 as select c7 from test2 join test3 on test2.c1 > test3.c1 and test2.c2 > test3.c2 and test2.c3 > test3.c3 and test2.c4 > test3.c4 and test2.c4 > test3.c5 and test2.c4 > test3.c6 and test2.c4 > test3.c7;
select * from v1;
ERROR:  invalid input syntax for type bigint: "1.1"
explain (verbose on, costs off) select * from v1;
                                                                                                                                                QUERY PLAN                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test3.c7
   Join Filter: ((test2.c1 > (test3.c1)::bpchar) AND ((test2.c2)::bigint > test3.c2) AND ((test2.c4)::bigint > test3.c4) AND ((test2.c4)::double precision > test3.c5) AND ((test2.c4)::double precision > test3.c6) AND ((test2.c4)::numeric > test3.c7) AND (int4in(nvarchar2out(test2.c3)) > test3.c3))
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

set behavior_compat_options = 'convert_string_digit_to_numeric';
select * from test1 where c2 > 1;
 c1 | c2  
----+-----
  2 | 1.1
(1 row)

explain (verbose on, costs off) select * from test1 where c2 > 1;
                  QUERY PLAN                  
----------------------------------------------
 Seq Scan on string_digit_to_numeric.test1
   Output: c1, c2
   Filter: ((test1.c2)::numeric > 1::numeric)
(3 rows)

select * from test2 join test3 on test2.c1 > test3.c1;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c1 > test3.c1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: (test2.c1 > (test3.c1)::bpchar)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c2 > test3.c2;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c2 > test3.c2;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c2)::numeric > (test3.c2)::numeric)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c3 > test3.c3;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c3 > test3.c3;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: (numeric_in(textout((test2.c3)::text), 0::oid, (-1)) > (test3.c3)::numeric)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c4;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c4;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::numeric > (test3.c4)::numeric)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c5;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c5;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::double precision > test3.c5)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c6;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c6;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::double precision > test3.c6)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from test2 join test3 on test2.c4 > test3.c7;
 c1 | c2  |  c3  |  c4   | c1 | c2 | c3 | c4 | c5 | c6 | c7 
----+-----+------+-------+----+----+----+----+----+----+----
 2  | 1.1 | 1.01 | 1.001 | 1  |  1 |  1 |  1 |  1 |  1 |  1
(1 row)

explain (verbose on, costs off) select * from test2 join test3 on test2.c4 > test3.c7;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test2.c1, test2.c2, test2.c3, test2.c4, test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
   Join Filter: ((test2.c4)::numeric > test3.c7)
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from v1;
 c7 
----
  1
(1 row)

explain (verbose on, costs off) select * from v1;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test3.c7
   Join Filter: ((test2.c1 > (test3.c1)::bpchar) AND ((test2.c4)::double precision > test3.c5) AND ((test2.c4)::double precision > test3.c6) AND ((test2.c4)::numeric > test3.c7) AND ((test2.c2)::numeric > (test3.c2)::numeric) AND ((test2.c4)::numeric > (test3.c4)::numeric) AND (numeric_in(textout((test2.c3)::text), 0::oid, (-1)) > (test3.c3)::numeric))
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

create view v2 as select c7 from test2 join test3 on test2.c1 > test3.c1 and test2.c2 > test3.c2 and test2.c3 > test3.c3 and test2.c4 > test3.c4 and test2.c4 > test3.c5 and test2.c4 > test3.c6 and test2.c4 > test3.c7;
select * from v2;
 c7 
----
  1
(1 row)

explain (verbose on, costs off) select * from v2;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test3.c7
   Join Filter: ((test2.c1 > (test3.c1)::bpchar) AND ((test2.c4)::double precision > test3.c5) AND ((test2.c4)::double precision > test3.c6) AND ((test2.c4)::numeric > test3.c7) AND ((test2.c2)::numeric > (test3.c2)::numeric) AND ((test2.c4)::numeric > (test3.c4)::numeric) AND (numeric_in(textout((test2.c3)::text), 0::oid, (-1)) > (test3.c3)::numeric))
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

set behavior_compat_options = '';
select * from v1;
ERROR:  invalid input syntax for type bigint: "1.1"
explain (verbose on, costs off) select * from v1;
                                                                                                                                                QUERY PLAN                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test3.c7
   Join Filter: ((test2.c1 > (test3.c1)::bpchar) AND ((test2.c2)::bigint > test3.c2) AND ((test2.c4)::bigint > test3.c4) AND ((test2.c4)::double precision > test3.c5) AND ((test2.c4)::double precision > test3.c6) AND ((test2.c4)::numeric > test3.c7) AND (int4in(nvarchar2out(test2.c3)) > test3.c3))
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

select * from v2;
ERROR:  invalid input syntax for type bigint: "1.1"
explain (verbose on, costs off) select * from v2;
                                                                                                                                                QUERY PLAN                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: test3.c7
   Join Filter: ((test2.c1 > (test3.c1)::bpchar) AND ((test2.c2)::bigint > test3.c2) AND ((test2.c4)::bigint > test3.c4) AND ((test2.c4)::double precision > test3.c5) AND ((test2.c4)::double precision > test3.c6) AND ((test2.c4)::numeric > test3.c7) AND (int4in(nvarchar2out(test2.c3)) > test3.c3))
   ->  Seq Scan on string_digit_to_numeric.test2
         Output: test2.c1, test2.c2, test2.c3, test2.c4
   ->  Seq Scan on string_digit_to_numeric.test3
         Output: test3.c1, test3.c2, test3.c3, test3.c4, test3.c5, test3.c6, test3.c7
(7 rows)

drop view v1;
drop view v2;
drop table test1;
drop table test2;
drop table test3;
drop schema string_digit_to_numeric cascade;
