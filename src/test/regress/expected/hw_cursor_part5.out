CREATE schema hw_cursor_part5;
set current_schema = hw_cursor_part5;
set behavior_compat_options = 'skip_insert_gs_source';
CREATE TABLE TEST_TB(ID INTEGER);
INSERT INTO TEST_TB VALUES(123);
INSERT INTO TEST_TB VALUES(124);
INSERT INTO TEST_TB VALUES(125);
DECLARE
    CURSOR CURS1 IS SELECT * FROM TEST_TB;
 TEMP INTEGER:=0;
BEGIN
	FOR VARA IN CURS1 LOOP
                raise notice '%',CURS1%ROWCOUNT;
	END LOOP;
END;
/
NOTICE:  1
NOTICE:  2
NOTICE:  3
--2 TEST FOR  DISPLAY CURSOR IN (SELECT ,INSERT ,UPDATE ,DELETE);
DECLARE
    CURSOR CURS1 IS SELECT * FROM TEST_TB;
 TEMP INTEGER:=0;
BEGIN
FOR VARA IN CURS1 LOOP
	-- FOR SELECT
	SELECT ID INTO TEMP FROM TEST_TB WHERE ID = 123;
	IF NOT CURS1%ISOPEN THEN --CURS1%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST SELECT: CURS1%ISOPEN=FALSE';
	END IF;
	IF CURS1%FOUND THEN
                raise notice '%','TEST SELECT: CURS1%FOUND=TRUE';
	END IF;
	IF CURS1%NOTFOUND THEN
                raise notice '%','TEST SELECT: CURS1%NOTFOUND=TRUE';
	END IF;
                raise notice 'TEST SELECT: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;
	-- FOR INSERT
	INSERT INTO TEST_TB VALUES (125);
	IF NOT CURS1%ISOPEN THEN --CURS1%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST INSERT: CURS1%ISOPEN=FALSE';
	END IF;
	IF CURS1%FOUND THEN
                raise notice '%','TEST INSERT: CURS1%FOUND=TRUE';
	END IF;
	IF CURS1%NOTFOUND THEN
                raise notice '%','TEST INSERT: CURS1%NOTFOUND=TRUE';
	END IF;
        raise notice 'TEST INSERT: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;
	--UPDATE
	UPDATE TEST_TB SET ID=ID+1 WHERE ID=124;
	IF NOT CURS1%ISOPEN THEN --CURS1%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST UPDATE: CURS1%ISOPEN=FALSE';
	END IF;
	IF CURS1%FOUND THEN
                raise notice '%','TEST UPDATE: CURS1%FOUND=TRUE';
	END IF;
	IF CURS1%NOTFOUND THEN
                raise notice '%','TEST UPDATE: CURS1%NOTFOUND=TRUE';
	END IF;
        raise notice 'TEST UPDATE: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;

	--DELETE
	DELETE FROM TEST_TB WHERE ID=125;
	IF NOT CURS1%ISOPEN THEN --CURS1%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST DELETE: CURS1%ISOPEN=FALSE';
	END IF;
	IF CURS1%FOUND THEN
                raise notice '%','TEST DELETE: CURS1%FOUND=TRUE';
	END IF;
	IF CURS1%NOTFOUND THEN
                raise notice '%','TEST DELETE: CURS1%NOTFOUND=TRUE';
	END IF;
        raise notice 'TEST DELETE: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;
END LOOP;
END;
/
NOTICE:  TEST SELECT: CURS1%FOUND=TRUE
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=1
NOTICE:  TEST INSERT: CURS1%FOUND=TRUE
NOTICE:  TEST INSERT: CURS1%ROWCOUNT=1
NOTICE:  TEST UPDATE: CURS1%FOUND=TRUE
NOTICE:  TEST UPDATE: CURS1%ROWCOUNT=1
NOTICE:  TEST DELETE: CURS1%FOUND=TRUE
NOTICE:  TEST DELETE: CURS1%ROWCOUNT=1
NOTICE:  TEST SELECT: CURS1%FOUND=TRUE
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=2
NOTICE:  TEST INSERT: CURS1%FOUND=TRUE
NOTICE:  TEST INSERT: CURS1%ROWCOUNT=2
NOTICE:  TEST UPDATE: CURS1%FOUND=TRUE
NOTICE:  TEST UPDATE: CURS1%ROWCOUNT=2
NOTICE:  TEST DELETE: CURS1%FOUND=TRUE
NOTICE:  TEST DELETE: CURS1%ROWCOUNT=2
NOTICE:  TEST SELECT: CURS1%FOUND=TRUE
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=3
NOTICE:  TEST INSERT: CURS1%FOUND=TRUE
NOTICE:  TEST INSERT: CURS1%ROWCOUNT=3
NOTICE:  TEST UPDATE: CURS1%FOUND=TRUE
NOTICE:  TEST UPDATE: CURS1%ROWCOUNT=3
NOTICE:  TEST DELETE: CURS1%FOUND=TRUE
NOTICE:  TEST DELETE: CURS1%ROWCOUNT=3
DROP TABLE IF EXISTS TEST_TB;
--3 TEST FOR IMPLICIT CURSOR IN (SELECT ,INSERT ,UPDATE ,DELETE)
CREATE TABLE TEST_TB (ID INT);
INSERT INTO TEST_TB VALUES (123);
INSERT INTO TEST_TB VALUES (124);
INSERT INTO TEST_TB VALUES (125);
DECLARE
	TEMP INTEGER = 0;
BEGIN
	-- FOR SELECT
	SELECT ID INTO TEMP FROM TEST_TB WHERE ID = 123;
	IF NOT SQL%ISOPEN THEN --SQL%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST SELECT: SQL%ISOPEN=FALSE';
	END IF;
	IF SQL%FOUND THEN
                raise notice '%','TEST SELECT: SQL%FOUND=TRUE';
	END IF;
	IF NOT SQL%NOTFOUND THEN
                raise notice '%','TEST SELECT: SQL%NOTFOUND=FALSE';
	END IF;
        raise notice 'TEST SELECT: SQL%%ROWCOUNT=%',SQL%ROWCOUNT;
	-- FOR INSERT
	INSERT INTO TEST_TB VALUES (125);
	IF NOT SQL%ISOPEN THEN --SQL%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST INSERT: SQL%ISOPEN=FALSE';
	END IF;
	IF SQL%FOUND THEN
                raise notice '%','TEST INSERT: SQL%FOUND=TRUE';
	END IF;
	IF NOT SQL%NOTFOUND THEN
                raise notice '%','TEST INSERT: SQL%NOTFOUND=FALSE';
	END IF;
        raise notice 'TEST INSERT: SQL%%ROWCOUNT=%',SQL%ROWCOUNT;
	--UPDATE
	UPDATE TEST_TB SET ID=ID+1 WHERE ID<124;
	IF NOT SQL%ISOPEN THEN --SQL%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST UPDATE: SQL%ISOPEN=FALSE';
	END IF;
	IF SQL%FOUND THEN
                raise notice '%','TEST UPDATE: SQL%FOUND=TRUE';
	END IF;
	IF NOT SQL%NOTFOUND THEN
                raise notice '%','TEST UPDATE: SQL%NOTFOUND=FALSE';
	END IF;
        raise notice 'TEST UPDATE: SQL%%ROWCOUNT=%',SQL%ROWCOUNT;

	--DELETE
	DELETE FROM TEST_TB WHERE ID<125;
	IF NOT SQL%ISOPEN THEN --SQL%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST DELETE: SQL%ISOPEN=FALSE';
	END IF;
	IF SQL%FOUND THEN
                raise notice '%','TEST DELETE: SQL%FOUND=TRUE';
	END IF;
	IF NOT SQL%NOTFOUND THEN
                raise notice '%','TEST DELETE: SQL%NOTFOUND=FALSE';
	END IF;
        raise notice 'TEST DELETE: SQL%%ROWCOUNT=%',SQL%ROWCOUNT;
END;
/
NOTICE:  TEST SELECT: SQL%ISOPEN=FALSE
NOTICE:  TEST SELECT: SQL%FOUND=TRUE
NOTICE:  TEST SELECT: SQL%NOTFOUND=FALSE
NOTICE:  TEST SELECT: SQL%ROWCOUNT=1
NOTICE:  TEST INSERT: SQL%ISOPEN=FALSE
NOTICE:  TEST INSERT: SQL%FOUND=TRUE
NOTICE:  TEST INSERT: SQL%NOTFOUND=FALSE
NOTICE:  TEST INSERT: SQL%ROWCOUNT=1
NOTICE:  TEST UPDATE: SQL%ISOPEN=FALSE
NOTICE:  TEST UPDATE: SQL%FOUND=TRUE
NOTICE:  TEST UPDATE: SQL%NOTFOUND=FALSE
NOTICE:  TEST UPDATE: SQL%ROWCOUNT=1
NOTICE:  TEST DELETE: SQL%ISOPEN=FALSE
NOTICE:  TEST DELETE: SQL%FOUND=TRUE
NOTICE:  TEST DELETE: SQL%NOTFOUND=FALSE
NOTICE:  TEST DELETE: SQL%ROWCOUNT=2
DROP TABLE IF EXISTS TEST_TB;
--4 TEST FOR IMPLICIT CURSOR;
CREATE TABLE TEST_TB (ID INT);
INSERT INTO TEST_TB VALUES (123);
INSERT INTO TEST_TB VALUES (124);
INSERT INTO TEST_TB VALUES (125);
DECLARE
    CURSOR CURS1 IS SELECT * FROM TEST_TB;
 TEMP INTEGER:=0;
BEGIN
	FOR	 VARA IN CURS1 LOOP
		SELECT ID INTO TEMP FROM TEST_TB WHERE ID = 123;
		IF NOT SQL%ISOPEN THEN --SQL%ISOPEN ALWAYS BE FALSE
                        raise notice '%','TEST SELECT: SQL%ISOPEN=FALSE';
		END IF;
		IF SQL%FOUND THEN
                        raise notice '%','TEST SELECT: SQL%FOUND=TRUE';
		END IF;
		IF NOT SQL%NOTFOUND THEN
                        raise notice '%','TEST SELECT: SQL%NOTFOUND=FALSE';
		END IF;
                raise notice 'TEST SELECT: SQL%%ROWCOUNT=%',SQL%ROWCOUNT;
	END LOOP;
END;
/
NOTICE:  TEST SELECT: SQL%ISOPEN=FALSE
NOTICE:  TEST SELECT: SQL%FOUND=TRUE
NOTICE:  TEST SELECT: SQL%NOTFOUND=FALSE
NOTICE:  TEST SELECT: SQL%ROWCOUNT=1
NOTICE:  TEST SELECT: SQL%ISOPEN=FALSE
NOTICE:  TEST SELECT: SQL%FOUND=TRUE
NOTICE:  TEST SELECT: SQL%NOTFOUND=FALSE
NOTICE:  TEST SELECT: SQL%ROWCOUNT=1
NOTICE:  TEST SELECT: SQL%ISOPEN=FALSE
NOTICE:  TEST SELECT: SQL%FOUND=TRUE
NOTICE:  TEST SELECT: SQL%NOTFOUND=FALSE
NOTICE:  TEST SELECT: SQL%ROWCOUNT=1
DROP TABLE IF EXISTS TEST_TB;
CREATE TABLE TEST_TB(ID INTEGER);
INSERT INTO TEST_TB VALUES(123);
INSERT INTO TEST_TB VALUES(124);
INSERT INTO TEST_TB VALUES(125);
DECLARE
    CURSOR CURS1 IS SELECT * FROM TEST_TB;
 TEMP INTEGER:=0;
BEGIN
	FOR VARA IN CURS1 LOOP
                raise notice 'TEST SELECT: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;
	END LOOP;
	IF NOT CURS1%ISOPEN THEN --CURS1%ISOPEN ALWAYS BE FALSE
                raise notice '%','TEST SELECT: CURS1%ISOPEN=FALSE';
	END IF;
	IF CURS1%FOUND THEN
                raise notice '%','TEST SELECT: CURS1%FOUND=TRUE';
	END IF;
	IF CURS1%NOTFOUND THEN
                raise notice '%','TEST SELECT: CURS1%NOTFOUND=TRUE';
	END IF;
        raise notice 'TEST SELECT: CURS1%%ROWCOUNT=%',CURS1%ROWCOUNT;
END;
/
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=1
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=2
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=3
NOTICE:  TEST SELECT: CURS1%ISOPEN=FALSE
NOTICE:  TEST SELECT: CURS1%ROWCOUNT=<NULL>
DROP TABLE IF EXISTS TEST_TB;
--TEST FOR CURSOR SYS_REFCURSOR IN PROCEDURE AND EMPTY TABLE;
--IF THE RESULT IS 0 ,THAT'S OK,ELSE IS ERROR;
DROP TABLE IF EXISTS TEST_TBL;
NOTICE:  table "test_tbl" does not exist, skipping
CREATE TABLE TEST_TBL(ID INTEGER);
CREATE OR REPLACE PROCEDURE T1(O OUT SYS_REFCURSOR)
IS
C1 SYS_REFCURSOR;
BEGIN
	OPEN C1 FOR SELECT ID FROM TEST_TBL ORDER BY ID;
	O := C1;
END;
/
DECLARE
	C1 SYS_REFCURSOR;
	TEMP INTEGER;
BEGIN
	T1(C1);
	LOOP
 		FETCH C1 INTO TEMP;
		EXIT WHEN C1%NOTFOUND;
	END LOOP;
        raise notice '%',C1%ROWCOUNT;
END;
/
NOTICE:  0
DROP TABLE IF EXISTS TEST_TBL;
DROP PROCEDURE T1;
--TEST FOR CURSOR REFCURSOR IN PROCEDURE AND EMPTY TABLE;
--IF THE RESULT IS 0 ,THAT'S OK,ELSE IS ERROR;
DROP TABLE IF EXISTS TEST_TBL;
NOTICE:  table "test_tbl" does not exist, skipping
CREATE TABLE TEST_TBL(ID INTEGER);
CREATE OR REPLACE PROCEDURE T2(O OUT REFCURSOR)
IS
C1 SYS_REFCURSOR;
BEGIN
	OPEN C1 FOR SELECT ID FROM TEST_TBL ORDER BY ID;
	O := C1;
END;
/
DECLARE
   	C1 REFCURSOR;
	TEMP INTEGER;
BEGIN
	T2(C1);
	LOOP
  	FETCH C1 INTO TEMP;
	EXIT WHEN C1%NOTFOUND;
	END LOOP;
        raise notice '%',C1%ROWCOUNT;
END;
/
NOTICE:  0
DROP TABLE IF EXISTS TEST_TBL;
DROP PROCEDURE T2;
--TEST CURSOR IN Anonymous block
DROP TABLE IF EXISTS TEST_TBL;
NOTICE:  table "test_tbl" does not exist, skipping
CREATE TABLE TEST_TBL(ID INTEGER);
DECLARE
	C1 REFCURSOR;
	TEMP INTEGER;
BEGIN
	OPEN C1 FOR SELECT ID FROM TEST_TBL ORDER BY ID;
LOOP
	FETCH C1 INTO TEMP;
	EXIT WHEN C1%NOTFOUND;
END LOOP;
        raise notice '%',C1%ROWCOUNT;
END;
/
NOTICE:  0
DROP TABLE IF EXISTS TEST_TBL;
DROP PROCEDURE TEST_TEMP;
ERROR:  function test_temp does not exist
DROP PROCEDURE TEST_CRS_RPT_EMPTYSOR;
ERROR:  function test_crs_rpt_emptysor does not exist
DROP TABLE TBL_RCWSCFG;
ERROR:  table "tbl_rcwscfg" does not exist
drop table TBL_TEMP_MODULE_312;
ERROR:  table "tbl_temp_module_312" does not exist
CREATE TABLE TBL_RCWSCFG (
    IWSNO INTEGER,
    USCDBMID SMALLINT
);
INSERT INTO TBL_RCWSCFG VALUES (0, 184);
CREATE TABLE TBL_TEMP_MODULE_312 (
    I_MODULENO INTEGER
);
CREATE OR REPLACE PROCEDURE TEST_TEMP
AS
BEGIN
 raise notice '%','TEST_TEMP';
END;
/
CREATE OR REPLACE PROCEDURE TEST_CRS_RPT_EMPTYSOR(FLAG INTEGER)
AS
    TYPE T_PSTMT_CRS_RPT_EMPTY IS REF CURSOR;
    CRS_RPT_EMPTY T_PSTMT_CRS_RPT_EMPTY;
 PI_MODULENO INTEGER;
 PSV_MODULETBLNAME VARCHAR2(128) := 'TBL_TEMP_MODULE_312';
 PSV_SQL  VARCHAR2(128);
 PI_NN INTEGER := NULL;
BEGIN
 OPEN CRS_RPT_EMPTY FOR SELECT DISTINCT USCDBMID FROM TBL_RCWSCFG;
 LOOP
  FETCH CRS_RPT_EMPTY INTO PI_MODULENO;
  EXIT WHEN CRS_RPT_EMPTY%NOTFOUND;
  IF (FLAG = 0) THEN 
   -- INSERT INTO TBL_TEMP_MODULE_312, INSERT TRIGGER FUNCTION CALLED
   PSV_SQL := 'BEGIN INSERT INTO '||PSV_MODULETBLNAME||' (I_MODULENO) VALUES('||PI_MODULENO||');END;';
   EXECUTE IMMEDIATE PSV_SQL;
  ELSE
   TEST_TEMP();
  END IF;
 END LOOP;
 -- check cursor attris status
 raise notice 'CRS_RPT_EMPTY%%ROWCOUNT : %',NVL(TO_CHAR(CRS_RPT_EMPTY%ROWCOUNT),'NULL');
 raise notice 'SQL%%ROWCOUNT : %',NVL(TO_CHAR(SQL%ROWCOUNT),'NULL');
END;
/
CALL TEST_CRS_RPT_EMPTYSOR(0);
NOTICE:  CRS_RPT_EMPTY%ROWCOUNT : 1
NOTICE:  SQL%ROWCOUNT : 1
 test_crs_rpt_emptysor 
-----------------------
 
(1 row)

CALL TEST_CRS_RPT_EMPTYSOR(1);
NOTICE:  TEST_TEMP
CONTEXT:  SQL statement "CALL test_temp()"
PL/pgSQL function test_crs_rpt_emptysor(integer) line 17 at PERFORM
NOTICE:  CRS_RPT_EMPTY%ROWCOUNT : 1
NOTICE:  SQL%ROWCOUNT : NULL
 test_crs_rpt_emptysor 
-----------------------
 
(1 row)

DROP schema hw_cursor_part5 CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table tbl_rcwscfg
drop cascades to table tbl_temp_module_312
drop cascades to function test_temp()
drop cascades to function test_crs_rpt_emptysor(integer)
