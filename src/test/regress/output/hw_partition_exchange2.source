-- ALTER TABLE EXCHANGE WITH
-- 0. function
-- 1. table, partition not exist
-- 2. table type check
-- 3. column(name, number, type)
-- 4. constraint check
-- 5. distribute check
-- 6. index check
-- 7. validation check
-- 8. table relfilenode
-- 9. toast table relfilenode
-- 10. index relfilenode
-- 11. index is available after exchange
-- 12. tablespace(table,index)
-- 13. verbose
-- 7. validation check
--a.default validation
create table test_exchange_validation_ord (a int);
create table test_exchange_validation_rt (a int) partition by range(a) (partition p1 values less than (10), partition p2 values less than (20));
insert into test_exchange_validation_ord values (1), (10);
--ERROE
alter table test_exchange_validation_rt exchange partition (p1) with table test_exchange_validation_ord;
ERROR:  some rows in table do not qualify for specified partition
drop table test_exchange_validation_ord;
drop table test_exchange_validation_rt;
--b.with validation
create table test_exchange_validation_ord (a int);
create table test_exchange_validation_rt (a int) partition by range(a) (partition p1 values less than (10), partition p2 values less than (20));
insert into test_exchange_validation_ord values (1), (10);
--ERROE
alter table test_exchange_validation_rt exchange partition (p1) with table test_exchange_validation_ord with validation;
ERROR:  some rows in table do not qualify for specified partition
drop table test_exchange_validation_ord;
drop table test_exchange_validation_rt;
--c.without validation
create table test_exchange_validation_ord (a int);
create table test_exchange_validation_rt (a int) partition by range(a) (partition p1 values less than (10), partition p2 values less than (20));
insert into test_exchange_validation_ord values (1), (10);
--SUCCESS
alter table test_exchange_validation_rt exchange partition (p1) with table test_exchange_validation_ord without validation;
drop table test_exchange_validation_ord;
drop table test_exchange_validation_rt;
--the oid is variable in make check
/*
-- 8. table relfilenode
create table test_exchange_table_relfilenode_ord (a int);
create table test_exchange_table_relfilenode_rt (a int) partition by range(a) (partition p1 values less than (10));

insert into test_exchange_table_relfilenode_ord values (1);
insert into test_exchange_table_relfilenode_rt values (2);

select relname, relfilenode from pg_class where relname = 'test_exchange_table_relfilenode_ord';
select relname, relfilenode from pg_partition where relname = 'p1';

alter table test_exchange_table_relfilenode_rt exchange partition (p1) with table test_exchange_table_relfilenode_ord;

select relname, relfilenode from pg_class where relname = 'test_exchange_table_relfilenode_ord';
select relname, relfilenode from pg_partition where relname = 'p1';

drop table test_exchange_table_relfilenode_ord;
drop table test_exchange_table_relfilenode_rt;



-- 9. toast table relfilenode
create table test_exchange_table_toast_ord (a text);
create table test_exchange_table_toast_rt (a text) partition by range(a) (partition p1 values less than ('C'));

insert into test_exchange_table_toast_ord values ('A');
insert into test_exchange_table_toast_rt values ('B');

select c1.relname, c1.oid, c1.relfilenode, c1.reltoastrelid, c2.relname, c2.relfilenode from pg_class c1, pg_class c2 where c1.relname = 'test_exchange_table_toast_ord' and c1.reltoastrelid=c2.oid;
select p.relname, p.oid, p.relfilenode, p.reltoastrelid, c.relname, c.relfilenode from pg_class c, pg_partition p where p.relname = 'p1' and p.reltoastrelid=c.oid;

alter table test_exchange_table_toast_rt exchange partition (p1) with table test_exchange_table_toast_ord;

select c1.relname, c1.oid, c1.relfilenode, c1.reltoastrelid, c2.relname, c2.relfilenode from pg_class c1, pg_class c2 where c1.relname = 'test_exchange_table_toast_ord' and c1.reltoastrelid=c2.oid;
select p.relname, p.oid, p.relfilenode, p.reltoastrelid, c.relname, c.relfilenode from pg_class c, pg_partition p where p.relname = 'p1' and p.reltoastrelid=c.oid;

insert into test_exchange_table_toast_ord values ('B');
insert into test_exchange_table_toast_rt values ('A');

select * from test_exchange_table_toast_ord;
select * from test_exchange_table_toast_rt;

drop table test_exchange_table_toast_ord;
drop table test_exchange_table_toast_rt;



-- 10. index relfilenode
create table test_exchange_index_ord (a int, b int, c int);
create table test_exchange_index_rt (a int, b int, c int) partition by range(a) (partition p1 values less than (10));
create index test_exchange_index_ord_a on test_exchange_index_ord(a);
create index test_exchange_index_ord_a_c on test_exchange_index_ord(a, c);
create index test_exchange_index_rt_a on test_exchange_index_rt(a) local (partition p1_index_a);
create index test_exchange_index_rt_a_c on test_exchange_index_rt(a, c) local (partition p1_index_a_c);

select relname, relfilenode from pg_class where relname='test_exchange_index_ord_a';
select relname, relfilenode from pg_partition where relname='p1_index_a';
select relname, relfilenode from pg_class where relname='test_exchange_index_ord_a';
select relname, relfilenode from pg_partition where relname='p1_index_a_c';

alter table test_exchange_index_rt exchange partition (p1) with table test_exchange_index_ord;

select relname, relfilenode from pg_class where relname='test_exchange_index_ord_a';
select relname, relfilenode from pg_partition where relname='p1_index_a';
select relname, relfilenode from pg_class where relname='test_exchange_index_ord_a_c';
select relname, relfilenode from pg_partition where relname='p1_index_a_c';

drop table test_exchange_index_ord;
drop table test_exchange_index_rt;

*/
-- 11. index is available after exchange
create table test_exchange_index_ord (a int, b int, c int);
create table test_exchange_index_rt (a int, b int, c int) partition by range(a) (partition p1 values less than (100));
create index test_exchange_index_ord_a on test_exchange_index_ord(a);
create index test_exchange_index_rt_a on test_exchange_index_rt(a) local;
insert into test_exchange_index_ord select generate_series(1,10);
insert into test_exchange_index_rt select generate_series(11,20);
--in data node
set enable_seqscan = off;
explain(verbose on, costs off) select a from test_exchange_index_ord where a=1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Data Node Scan
   Output: test_exchange_index_ord.a
   Remote query: SELECT a FROM public.test_exchange_index_ord WHERE a = 1
(3 rows)

select a from test_exchange_index_ord where a=1;
 a 
---
 1
(1 row)

alter table test_exchange_index_rt exchange partition (p1) with table test_exchange_index_ord;
--in data node
explain(verbose on, costs off) select a from test_exchange_index_ord where a=11;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Data Node Scan
   Output: test_exchange_index_ord.a
   Remote query: SELECT a FROM public.test_exchange_index_ord WHERE a = 11
(3 rows)

select a from test_exchange_index_ord where a=11;
 a  
----
 11
(1 row)

drop table test_exchange_index_ord;
drop table test_exchange_index_rt;
-- 12. tablespace
\! rm -fr '@testtablespace@/partition_exchange_ts1'
\! mkdir '@testtablespace@/partition_exchange_ts1'
\! rm -fr '@testtablespace@/partition_exchange_ts2'
\! mkdir '@testtablespace@/partition_exchange_ts2'
create tablespace partition_exchange_ts1 location '@testtablespace@/partition_exchange_ts1';
create tablespace partition_exchange_ts2 location '@testtablespace@/partition_exchange_ts2';
--a. table tablespace
create table test_exchange_tablespace_ord (a int) tablespace partition_exchange_ts1;
create table test_exchange_tablespace_rt (a int) partition by range(a) (partition p1 values less than (10) tablespace partition_exchange_ts2);
insert into test_exchange_tablespace_ord values (1);
insert into test_exchange_tablespace_rt values (2);
select * from test_exchange_tablespace_ord;
 a 
---
 1
(1 row)

select * from test_exchange_tablespace_rt;
 a 
---
 2
(1 row)

--look tablespace
select c.relname, t.spcname from pg_class c, pg_tablespace t where c.reltablespace=t.oid and c.relname='test_exchange_tablespace_ord';
           relname            |        spcname         
------------------------------+------------------------
 test_exchange_tablespace_ord | partition_exchange_ts1
(1 row)

with partitioned_objs_oids as
(
	select oid from pg_class where relname = 'test_exchange_tablespace_rt'
)
select p.relname, t.spcname from pg_partition p, pg_tablespace t where p.reltablespace=t.oid and p.relname='p1'
 and p.parentid in (select oid from partitioned_objs_oids);
 relname |        spcname         
---------+------------------------
 p1      | partition_exchange_ts2
(1 row)

alter table test_exchange_tablespace_rt exchange partition (p1) with table test_exchange_tablespace_ord;
--check tablespace has exchanged
select c.relname, t.spcname from pg_class c, pg_tablespace t where c.reltablespace=t.oid and c.relname='test_exchange_tablespace_ord';
           relname            |        spcname         
------------------------------+------------------------
 test_exchange_tablespace_ord | partition_exchange_ts2
(1 row)

with partitioned_objs_oids as
(
	select oid from pg_class where relname = 'test_exchange_tablespace_rt'
)
select p.relname, t.spcname from pg_partition p, pg_tablespace t where p.reltablespace=t.oid and p.relname='p1'
 and p.parentid in (select oid from partitioned_objs_oids);
 relname |        spcname         
---------+------------------------
 p1      | partition_exchange_ts1
(1 row)

insert into test_exchange_tablespace_ord values (4);
insert into test_exchange_tablespace_rt values (3);
select * from test_exchange_tablespace_ord order by 1;
 a 
---
 2
 4
(2 rows)

select * from test_exchange_tablespace_rt order by 1;
 a 
---
 1
 3
(2 rows)

drop table test_exchange_tablespace_ord;
drop table test_exchange_tablespace_rt;
--a. index tablespace
create table test_exchange_tablespace_ord (a int);
create table test_exchange_tablespace_rt (a int) partition by range(a) (partition p1 values less than (10));
create index test_exchange_tablespace_ord_a on test_exchange_tablespace_ord (a) tablespace partition_exchange_ts1;
create index test_exchange_tablespace_rt_a on test_exchange_tablespace_rt (a) local (partition p1_index_a tablespace partition_exchange_ts2);
--look tablespace
select c.relname, t.spcname from pg_class c, pg_tablespace t where c.reltablespace=t.oid and c.relname='test_exchange_tablespace_ord_a';
            relname             |        spcname         
--------------------------------+------------------------
 test_exchange_tablespace_ord_a | partition_exchange_ts1
(1 row)

select p.relname, t.spcname from pg_partition p, pg_tablespace t where p.reltablespace=t.oid and p.relname='p1_index_a';
  relname   |        spcname         
------------+------------------------
 p1_index_a | partition_exchange_ts2
(1 row)

alter table test_exchange_tablespace_rt exchange partition (p1) with table test_exchange_tablespace_ord;
--check tablespace has exchanged
select c.relname, t.spcname from pg_class c, pg_tablespace t where c.reltablespace=t.oid and c.relname='test_exchange_tablespace_ord_a';
            relname             |        spcname         
--------------------------------+------------------------
 test_exchange_tablespace_ord_a | partition_exchange_ts2
(1 row)

select p.relname, t.spcname from pg_partition p, pg_tablespace t where p.reltablespace=t.oid and p.relname='p1_index_a';
  relname   |        spcname         
------------+------------------------
 p1_index_a | partition_exchange_ts1
(1 row)

drop table test_exchange_tablespace_ord;
drop table test_exchange_tablespace_rt;
--combine
create table test_exchange_tablespace_1(id int,info varchar(200)) distribute by replication
partition by range(id)
(partition p1 values less than(3000),
partition p2 values less than(6000));
create table test_exchange_tablespace_dst_1(id int,info varchar(200)) tablespace partition_exchange_ts1 distribute by replication;
create table test_exchange_tablespace_dst_2(id int,info varchar(200)) tablespace partition_exchange_ts2 distribute by replication;
alter table test_exchange_tablespace_1 exchange partition(p1) with table test_exchange_tablespace_dst_1, exchange partition(p2) with table test_exchange_tablespace_dst_2 with validation verbose;
ERROR:  syntax error at or near "exchange"
LINE 1: ...on(p1) with table test_exchange_tablespace_dst_1, exchange p...
                                                             ^
alter table test_exchange_tablespace_1 move partition p2 tablespace partition_exchange_ts1, exchange partition(p2) with table test_exchange_tablespace_dst_2 with validation verbose;
ERROR:  syntax error at or near "exchange"
LINE 1: ...e partition p2 tablespace partition_exchange_ts1, exchange p...
                                                             ^
drop table test_exchange_tablespace_1;
drop table test_exchange_tablespace_dst_1;
drop table test_exchange_tablespace_dst_2;
drop tablespace partition_exchange_ts1;
drop tablespace partition_exchange_ts2;
\! rm -fr '@testtablespace@/partition_exchange_ts1'
\! rm -fr '@testtablespace@/partition_exchange_ts2'
-- 13. verbose
-- a.syntax
create table test_exchange_verbose_ord (a int);
create table test_exchange_verbose_rt (a int)
partition by range (a)
(
	partition test_exchange_verbose_rt_p1 values less than (10),
	partition test_exchange_verbose_rt_p2 values less than (20),
	partition test_exchange_verbose_rt_p3 values less than (30)
);
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord verbose;
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord with validation verbose;
--ERROR
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord without validation verbose;
ERROR:  syntax error at or near "verbose"
LINE 1: ... table test_exchange_verbose_ord without validation verbose;
                                                               ^
alter table test_exchange_verbose_rt exchange partition for (5) with table test_exchange_verbose_ord verbose;
alter table test_exchange_verbose_rt exchange partition for (5) with table test_exchange_verbose_ord with validation verbose;
--ERROR
alter table test_exchange_verbose_rt exchange partition for (5) with table test_exchange_verbose_ord without validation verbose;
ERROR:  syntax error at or near "verbose"
LINE 1: ... table test_exchange_verbose_ord without validation verbose;
                                                               ^
drop table test_exchange_verbose_ord;
drop table test_exchange_verbose_rt;
-- b.function
create table test_exchange_verbose_ord (a int);
create table test_exchange_verbose_rt (a int)
partition by range (a)
(
	partition test_exchange_verbose_rt_p1 values less than (10),
	partition test_exchange_verbose_rt_p2 values less than (20),
	partition test_exchange_verbose_rt_p3 values less than (30)
);
insert into test_exchange_verbose_ord values(generate_series(0, 29));
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord verbose;
select * from test_exchange_verbose_ord order by 1;
 a 
---
(0 rows)

select * from test_exchange_verbose_rt order by 1;
 a  
----
  0
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
(30 rows)

select * from test_exchange_verbose_rt partition (test_exchange_verbose_rt_p1) order by 1;
 a 
---
 0
 1
 2
 3
 4
 5
 6
 7
 8
 9
(10 rows)

select * from test_exchange_verbose_rt partition (test_exchange_verbose_rt_p2) order by 1;
 a  
----
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
(10 rows)

truncate test_exchange_verbose_ord;
truncate test_exchange_verbose_rt;
insert into test_exchange_verbose_ord values(generate_series(0, 29));
insert into test_exchange_verbose_ord values(30);
--ERROE
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord verbose;
ERROR:  inserted partition key does not map to any table partition
drop table test_exchange_verbose_ord;
drop table test_exchange_verbose_rt;
-- c.index
create table test_exchange_verbose_ord (a int, b int);
create table test_exchange_verbose_rt (a int, b int)
partition by range (b)
(
	partition test_exchange_verbose_rt_p1 values less than (10),
	partition test_exchange_verbose_rt_p2 values less than (20),
	partition test_exchange_verbose_rt_p3 values less than (30)
);
create index test_exchange_verbose_ord_index on test_exchange_verbose_ord (b);
create index test_exchange_verbose_rt_index on test_exchange_verbose_rt (b) local;
insert into test_exchange_verbose_ord values (-1, generate_series(0, 29));
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord verbose;
set enable_seqscan=off;
explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=5;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 5)
               Selected Partitions:  1
(6 rows)

select b from test_exchange_verbose_rt where b=5 order by 1;
 b 
---
 5
(1 row)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=15;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 15)
               Selected Partitions:  2
(6 rows)

select b from test_exchange_verbose_rt where b=15 order by 1;
 b  
----
 15
(1 row)

truncate test_exchange_verbose_ord;
truncate test_exchange_verbose_rt;
insert into test_exchange_verbose_ord values (-1, generate_series(0, 29));
update test_exchange_verbose_ord set b=-1 where b=5;
update test_exchange_verbose_ord set b=-2 where b=6;
update test_exchange_verbose_ord set b=-1 where b=15;
update test_exchange_verbose_ord set b=15 where b=16;
delete from test_exchange_verbose_ord where b=-2;
delete from test_exchange_verbose_ord where b=15;
alter table test_exchange_verbose_rt exchange partition (test_exchange_verbose_rt_p1) with table test_exchange_verbose_ord verbose;
explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=-1;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = (-1))
               Selected Partitions:  1
(6 rows)

select b from test_exchange_verbose_rt where b=-1 order by 1;
 b  
----
 -1
 -1
(2 rows)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=-2;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = (-2))
               Selected Partitions:  1
(6 rows)

select b from test_exchange_verbose_rt where b=-2 order by 1;
 b 
---
(0 rows)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=5;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 5)
               Selected Partitions:  1
(6 rows)

select b from test_exchange_verbose_rt where b=5 order by 1;
 b 
---
(0 rows)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=6;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 6)
               Selected Partitions:  1
(6 rows)

select b from test_exchange_verbose_rt where b=6 order by 1;
 b 
---
(0 rows)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=15;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 15)
               Selected Partitions:  2
(6 rows)

select b from test_exchange_verbose_rt where b=15 order by 1;
 b 
---
(0 rows)

explain(ANALYZE false,VERBOSE false, COSTS false,BUFFERS false,TIMING false) select b from test_exchange_verbose_rt where b=16;
                                                QUERY PLAN                                                
----------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using test_exchange_verbose_rt_index on test_exchange_verbose_rt
               Index Cond: (b = 16)
               Selected Partitions:  2
(6 rows)

select b from test_exchange_verbose_rt where b=16 order by 1;
 b 
---
(0 rows)

drop table test_exchange_verbose_ord;
drop table test_exchange_verbose_rt;
