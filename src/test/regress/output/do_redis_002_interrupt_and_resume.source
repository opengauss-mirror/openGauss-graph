--Note that this case will only work in debug mode!
--prepare data
drop table if exists tb1;
NOTICE:  table "tb1" does not exist, skipping
drop table if exists tb2;
NOTICE:  table "tb2" does not exist, skipping
drop table if exists tb3;
NOTICE:  table "tb3" does not exist, skipping
drop table if exists tb4;
NOTICE:  table "tb4" does not exist, skipping
CREATE TABLE tb1 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
CREATE TABLE tb2 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
insert into tb1 values (generate_series(1,2000), 'a');
insert into tb2 values (generate_series(1,1000), 'a');
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
select count(1) from tb1;
 count 
-------
 64000
(1 row)

select count(1) from tb2;
  count  
---------
 1024000
(1 row)

CREATE TABLE tb3 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
CREATE TABLE tb4 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
insert into tb3 values (generate_series(1,2000), 'b');
insert into tb4 values (generate_series(1,2000), 'b');
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
select count(1) from tb3;
 count 
-------
 64000
(1 row)

select count(1) from tb4;
 count 
-------
 64000
(1 row)

---add node
\! python @abs_srcdir@/addnode.py -t addnode -s @abs_srcdir@ -b @abs_bindir@ -g new_group_008 -n 2
test redis success.
---select to verify
update pgxc_group set is_installation = true where group_name = 'new_group_008';
update pgxc_group set is_installation = false where group_name = 'new_group_002';
update pgxc_group set in_redistribution = 'n' where group_name = 'new_group_008';
update pgxc_group set in_redistribution = 'y' where group_name = 'new_group_002';
select group_name,in_redistribution, is_installation from pgxc_group order by group_name;
  group_name   | in_redistribution | is_installation 
---------------+-------------------+-----------------
 group1        | n                 | f
 new_group_002 | y                 | f
 new_group_007 | n                 | f
 new_group_008 | n                 | t
(4 rows)

--check group information before redistribution, please note that the group names may be subject to changes when taking into consideration the sequence of test cases
--for now, the naming convention for group names is as 'group1', 'new_group_001', 'new_group_002' and so on
--expected table number 4 (please note that this number may be--actually it has already be--affected by former test cases due to the residual tables from them!!!)
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_002' order by relname;
 relname |    pgroup     
---------+---------------
 tb1     | new_group_002
 tb2     | new_group_002
 tb3     | new_group_002
 tb4     | new_group_002
(4 rows)

--expected table number 0
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_008' order by relname;
 relname | pgroup 
---------+--------
(0 rows)

--do redistribution and interrupt it for seven times in different steps
--1st interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 1 -v -r -f -u $USER -d regression -c -p $PGPORT 2>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
3---do redistribute and interrupt
\! sleep 2
\! echo "We expect that pgxc_redistb has already been built here:"
We expect that pgxc_redistb has already been built here:
select relname from pg_class where relname = 'pgxc_redistb' order by relname;
   relname    
--------------
 pgxc_redistb
(1 row)

\! echo "Below are tables already be redistributed:"
Below are tables already be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'y' order by relname;
 relname | pgroup | redistributed | redis_order 
---------+--------+---------------+-------------
(0 rows)

\! echo "Below are tables still need to be redistributed:"
Below are tables still need to be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'n' order by relname;
 relname |    pgroup     | redistributed | redis_order 
---------+---------------+---------------+-------------
 tb1     | new_group_002 | n             |        1024
 tb2     | new_group_002 | n             |        1024
 tb3     | new_group_002 | n             |        1024
 tb4     | new_group_002 | n             |        1024
(4 rows)

--resume and 2nd interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 2 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
2---do redistribute and interrupt
\! sleep 2
\! echo "Below are tables already be redistributed:"
Below are tables already be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'y' order by relname;
 relname | pgroup | redistributed | redis_order 
---------+--------+---------------+-------------
(0 rows)

\! echo "Below are tables still need to be redistributed:"
Below are tables still need to be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'n' order by relname;
 relname |    pgroup     | redistributed | redis_order 
---------+---------------+---------------+-------------
 tb1     | new_group_002 | n             |        1024
 tb2     | new_group_002 | n             |        1024
 tb3     | new_group_002 | n             |        1024
 tb4     | new_group_002 | n             |        1024
(4 rows)

--resume and 3rd interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 3 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
2---do redistribute and interrupt
\! sleep 2
\! echo "Below are tables already be redistributed:"
Below are tables already be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'y' order by relname;
 relname | pgroup | redistributed | redis_order 
---------+--------+---------------+-------------
(0 rows)

\! echo "Below are tables still need to be redistributed:"
Below are tables still need to be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'n' order by relname;
 relname |    pgroup     | redistributed | redis_order 
---------+---------------+---------------+-------------
 tb1     | new_group_002 | n             |        1024
 tb2     | new_group_002 | n             |        1024
 tb3     | new_group_002 | n             |        1024
 tb4     | new_group_002 | n             |        1024
(4 rows)

--resume and 4th interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 4 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
2---do redistribute and interrupt
\! sleep 2
\! echo "Below are tables already be redistributed:"
Below are tables already be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'y' order by relname;
 relname | pgroup | redistributed | redis_order 
---------+--------+---------------+-------------
(0 rows)

\! echo "Below are tables still need to be redistributed:"
Below are tables still need to be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'n' order by relname;
 relname |    pgroup     | redistributed | redis_order 
---------+---------------+---------------+-------------
 tb1     | new_group_002 | n             |        1024
 tb2     | new_group_002 | n             |        1024
 tb3     | new_group_002 | n             |        1024
 tb4     | new_group_002 | n             |        1024
(4 rows)

--resume and 5th interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 5 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
2---do redistribute and interrupt
\! sleep 2
--resume and 6th interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 6 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
3---do redistribute and interrupt
\! sleep 2
\! echo "We expect that the all the tables have been redistributed but pgxc_redistb still exists:"
We expect that the all the tables have been redistributed but pgxc_redistb still exists:
select relname from pg_class where relname = 'pgxc_redistb' order by relname;
   relname    
--------------
 pgxc_redistb
(1 row)

\! echo "Below are tables already be redistributed:"
Below are tables already be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'y' order by relname;
 relname |    pgroup     | redistributed | redis_order 
---------+---------------+---------------+-------------
 tb1     | new_group_002 | y             |        1024
 tb2     | new_group_002 | y             |        1024
 tb3     | new_group_002 | y             |        1024
 tb4     | new_group_002 | y             |        1024
(4 rows)

\! echo "Below are tables still need to be redistributed:"
Below are tables still need to be redistributed:
select relname, pgroup, redistributed, redis_order from pgxc_redistb where redistributed = 'n' order by relname;
 relname | pgroup | redistributed | redis_order 
---------+--------+---------------+-------------
(0 rows)

--resume and 7th interrupt
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -e 7 -v -r -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log; echo $?---do redistribute and interrupt
3---do redistribute and interrupt
\! sleep 2
\! echo "We expect that pgxc_redistb has already been deleted here:"
We expect that pgxc_redistb has already been deleted here:
select relname from pg_class where relname = 'pgxc_redistb' order by relname;
 relname 
---------
(0 rows)

---do redistribution for the last time
---resume redistribution from the last time and it will succeed
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -r -t 10000 -f -u $USER -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/resume.log ; echo $?---do redistribute
0---do redistribute
--verify all the tables are successfully redistributed
--expected group number 0
select count(1) from pgxc_group where group_name = 'new_group_002';
 count 
-------
     1
(1 row)

--expected table number 0
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_002' order by relname;
 relname | pgroup 
---------+--------
(0 rows)

--expected table number 5
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_008' order by relname;
        relname        |    pgroup     
-----------------------+---------------
 redis_progress_detail | new_group_008
 redis_status          | new_group_008
 tb1                   | new_group_008
 tb2                   | new_group_008
 tb3                   | new_group_008
 tb4                   | new_group_008
(6 rows)

--end of test
update pgxc_group set in_redistribution = 'n';
\c regression
\d+ redis_status;
                                Table "public.redis_status"
 Column  |            Type             | Modifiers | Storage  | Stats target | Description 
---------+-----------------------------+-----------+----------+--------------+-------------
 status  | text                        |           | extended |              | 
 updated | timestamp without time zone |           | plain    |              | 
Has OIDs: no
Distribute By: HASH(status)
Location Nodes: ALL DATANODES
Options: orientation=row, compression=no

\d+ redis_progress_detail;
                             Table "public.redis_progress_detail"
   Column    |            Type             | Modifiers | Storage  | Stats target | Description 
-------------+-----------------------------+-----------+----------+--------------+-------------
 dbname      | text                        |           | extended |              | 
 table_name  | text                        |           | extended |              | 
 start_time  | timestamp without time zone |           | plain    |              | 
 finish_time | timestamp without time zone |           | plain    |              | 
 cost        | text                        |           | extended |              | 
 size        | bigint                      |           | plain    |              | 
Has OIDs: no
Distribute By: HASH(dbname)
Location Nodes: ALL DATANODES
Options: orientation=row, compression=no

DROP TABLE IF EXISTS redis_status CASCADE;
DROP TABLE IF EXISTS redis_progress_detail CASCADE;
\d+ redis_status;
\d+ redis_progress_detail;
