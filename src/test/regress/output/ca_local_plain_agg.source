set explain_perf_mode=normal;
-- aggregate functions without group by clause
select avg(c1), avg(c2), avg(c3), avg(c4), avg(c5), avg(c6), avg(c7) from aggtable1;
         avg         |         avg         |         avg         |         avg         |         avg         |       avg        |       avg        
---------------------+---------------------+---------------------+---------------------+---------------------+------------------+------------------
 13.8333333333333333 | 14.8333333333333333 | 15.8333333333333333 | 16.8333333333333333 | 17.8333333333333333 | 18.8333333333333 | 19.8333333333333
(1 row)

select max(c1), max(c2), max(c3), max(c4), max(c5), max(c6), max(c7) from aggtable1;
 max | max | max | max | max | max | max 
-----+-----+-----+-----+-----+-----+-----
  36 | 37  |  38 |  39 |  40 |  41 |  42
(1 row)

select count(c1), count(c2), count(c3), count(c4), count(c5), count(c6), count(c7) from aggtable1;
 count | count | count | count | count | count | count 
-------+-------+-------+-------+-------+-------+-------
 12288 | 12288 | 12288 | 12288 | 12288 | 12288 | 12288
(1 row)

explain (verbose on, costs off) select avg(c1), sum(c2), min(c3), max(c4), count(c5), count(*) from aggtable1;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.avg((avg(c1))), sum((sum((c2)::double precision))), min((min(c3))), max((max(c4))), count((count(c5))), pg_catalog.count(*)
   ->  Streaming (type: GATHER)
         Output: (avg(c1)), (sum((c2)::double precision)), (min(c3)), (max(c4)), (count(c5)), (count(*))
         Node/s: All datanodes
         ->  Dummy Aggregate
               Output: avg(c1), sum((c2)::double precision), min(c3), max(c4), count(c5), count(*)
               ->  Foreign Scan on public.aggtable1
                     Output: count((c1)), sum(((c1))::numeric), sum(c2::double precision), min(c3), max(c4), count(c5), count(*)
                     Remote SQL: SELECT count((c1)), sum(((c1))::numeric), sum(c2::double precision), min(c3), max(c4), count(c5), count(*) FROM public.aggtable1
(10 rows)

explain (verbose on, costs off) select count(distinct c2),min(c3) from aggtable1 order by 1,2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count((count(c2)))), (min((min((min((min(c3))))))))
   Sort Key: (count((count(aggtable1.c2)))), (min((min((min((min(aggtable1.c3))))))))
   ->  Aggregate
         Output: count((count(c2))), min((min((min((min(c3)))))))
         ->  Streaming (type: GATHER)
               Output: (count(c2)), (min((min((min(c3))))))
               Node/s: All datanodes
               ->  Aggregate
                     Output: count(c2), min((min((min(c3)))))
                     ->  HashAggregate
                           Output: c2, min((min(c3)))
                           Group By Key: aggtable1.c2
                           ->  Streaming(type: REDISTRIBUTE)
                                 Output: c2, (min(c3))
                                 Distribute Key: c2
                                 Spawn on: All datanodes
                                 Consumer Nodes: All datanodes
                                 ->  Dummy HashAggregate
                                       Output: c2, min(c3)
                                       Group By Key: aggtable1.c2
                                       ->  Foreign Scan on public.aggtable1
                                             Output: c2, min(c3)
                                             Remote SQL: SELECT c2, min(c3) FROM public.aggtable1 GROUP BY c2
(24 rows)

