\! @abs_bindir@/gsql -d regression -h 127.0.0.1 -p @portstring@ -U $USER -c "drop schema if exists  dfs_redistable cascade;" >@abs_srcdir@/tmp_check/dfs_redis_010.log 2>&1
create schema dfs_redistable;
set current_schema = 'dfs_redistable';
--temp table
CREATE TEMP TABLE redis_tmp_table (id int, name varchar);
--column table
CREATE TABLE mpp_col(id INT,name VARCHAR(15) NOT NULL) with(orientation = column);
CREATE TABLE mpp_col_rep(id INT,name VARCHAR(15) NOT NULL) with(orientation = column) distribute by replication;
copy mpp_col from '@abs_srcdir@/data/redis.data1';
copy mpp_col_rep from '@abs_srcdir@/data/redis.data1';
--row table
CREATE TABLE mpp_row(id INT,name VARCHAR(15) NOT NULL);
CREATE TABLE mpp_row_rep(id INT,name VARCHAR(15) NOT NULL) distribute by replication;
copy mpp_row from '@abs_srcdir@/data/redis.data1';
copy mpp_row_rep from '@abs_srcdir@/data/redis.data1';
CREATE TABLE mpp_zxf(id1 INT,id2 int,id3 int,name VARCHAR(15) NOT NULL) distribute by hash (id1,id2,id3);
--dfs table
create table dfs_redis(a int, b int) tablespace hdfs_ts;
drop table if exists dfs_temp;
NOTICE:  table "dfs_temp" does not exist, skipping
create table dfs_temp (a int, b int);
insert into dfs_temp values(1,generate_series(1,6000));
insert into dfs_temp values(generate_series(1,1000),generate_series(1,1000));
insert into dfs_redis select * from  dfs_temp;
drop table if exists dfs_temp;
drop table if exists dfs_redis_p;
NOTICE:  table "dfs_redis_p" does not exist, skipping
create table dfs_redis_p(
    a int,
    b int,
    c int
)
tablespace hdfs_ts
distribute by hash (a)
partition by values (b);
drop table if exists dfs_temp_p;
NOTICE:  table "dfs_temp_p" does not exist, skipping
create table dfs_temp_p (a int, b int, c int);
insert into dfs_temp_p values(1,generate_series(1,6000), generate_series(1,6000));
insert into dfs_temp_p values(generate_series(1,1000),generate_series(1,1000), generate_series(1,1000));
insert into dfs_redis_p select * from  dfs_temp_p;
drop table if exists dfs_temp_p;
--test data before redistribution
select count(*) from mpp_col;
  count  
---------
 1315791
(1 row)

select count(*) from mpp_col where name = 'sjf';
 count 
-------
     0
(1 row)

select count(*) from mpp_row;
  count  
---------
 1315791
(1 row)

select count(*) from  dfs_redis;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis;
 count 
-------
  1000
(1 row)

select count(*) from  dfs_redis_p;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis_p where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis_p;
 count 
-------
  1000
(1 row)

---add node
\! python @abs_srcdir@/addnode.py -t addnode -s @abs_srcdir@ -b @abs_bindir@ -g new_group_005 -n 2
test redis success.
---select to verify
select group_name,in_redistribution from pgxc_group where group_name = 'new_group_005';
  group_name   | in_redistribution 
---------------+-------------------
 new_group_005 | n
(1 row)

--select count(*) from mpp_col;
--select count(*) from mpp_col where name = 'sjf';
--select count(*) from mpp_row;
--select * from pgxc_class;
--do redistribute
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -r -u $USER -d regression -p $PGPORT 2>@abs_srcdir@/tmp_check/dfs_redis_020.log ; echo $?
2
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -r -u $USER -d regression -p $PGPORT -f -m insert 2>@abs_srcdir@/tmp_check/dfs_redis_020.log ; echo $?
2
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -r -u $USER -d regression -p $PGPORT -f  2>@abs_srcdir@/tmp_check/dfs_redis_020.log ; echo $?
0
--insert into mpp_col select * from mpp_s;
select count(*) from mpp_col;
  count  
---------
 1315791
(1 row)

select count(*) from mpp_col where name = 'sjf';
 count 
-------
     0
(1 row)

select count(*) from mpp_row;
  count  
---------
 1315791
(1 row)

select count(*) from  dfs_redis;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis;
 count 
-------
  1000
(1 row)

select count(*) from  dfs_redis_p;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis_p where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis_p;
 count 
-------
  1000
(1 row)

update pgxc_class set redistributed='i';
update mpp_col set name = 'sfj';
ERROR:  mpp_col is redistributing, please retry later.
delete from mpp_col;
ERROR:  mpp_col is redistributing, please retry later.
insert into mpp_col values(12, 'mpp');
copy mpp_col from '@abs_srcdir@/data/redis.data1';
ERROR:  mpp_col is redistributing, please retry later.
update dfs_redis set b = 100;
ERROR:  dfs_redis is redistributing, please retry later.
insert into dfs_redis values(200, 200);
ERROR:  dfs_redis is redistributing, please retry later.
delete from dfs_redis;
ERROR:  dfs_redis is redistributing, please retry later.
drop table dfs_redis;
ERROR:  dfs_redis is redistributing, please retry later.
update dfs_redis_p set b = 100;
ERROR:  dfs_redis_p is redistributing, please retry later.
insert into dfs_redis_p values(200, 200);
ERROR:  dfs_redis_p is redistributing, please retry later.
delete from dfs_redis_p;
ERROR:  dfs_redis_p is redistributing, please retry later.
drop table dfs_redis_p;
ERROR:  dfs_redis_p is redistributing, please retry later.
update pgxc_class set redistributed='n';
select count(*) from mpp_col;
  count  
---------
 1315792
(1 row)

select count(*) from mpp_col where name = 'sjf';
 count 
-------
     0
(1 row)

select count(*) from mpp_row;
  count  
---------
 1315791
(1 row)

select count(*) from  dfs_redis;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis;
 count 
-------
  1000
(1 row)

vacuum dfs_redistable.dfs_redis;
vacuum full dfs_redistable.dfs_redis;
explain (verbose, costs off) select count(*) from dfs_redis where a<50;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Row Adapter
   Output: (pg_catalog.count(*))
   ->  Vector Aggregate
         Output: pg_catalog.count(*)
         ->  Vector Streaming (type: GATHER)
               Output: (count(*))
               ->  Vector Aggregate
                     Output: count(*)
                     ->  Vector Append
                           ->  Dfs Scan on dfs_redistable.dfs_redis
                                 Output: 'Dummy'
                                 Pushdown Predicate Filter: (dfs_redistable.dfs_redis.a < 50)
                           ->  Vector Adapter
                                 Output: ('Dummy')
                                 ->  Seq Scan on cstore.pg_delta_2984408223 dfs_redis
                                       Output: 'Dummy'
                                       Filter: (cstore.dfs_redis.a < 50)
(17 rows)

select count(*) from dfs_redis where a<50;
 count 
-------
  6049
(1 row)

delete from dfs_redis where a <50;
select count(*) from dfs_redis where a<50;
 count 
-------
     0
(1 row)

select count(*) from dfs_redis;
 count 
-------
   951
(1 row)

delete from dfs_redis;
select count(*) from dfs_redis;
 count 
-------
     0
(1 row)

---partition dfs table
select count(*) from  dfs_redis_p;
 count 
-------
  7000
(1 row)

select count(*) from  dfs_redis_p where a = 1;
 count 
-------
  6001
(1 row)

select count(distinct(a)) from dfs_redis_p;
 count 
-------
  1000
(1 row)

vacuum dfs_redistable.dfs_redis_p;
vacuum full dfs_redistable.dfs_redis_p;
select count(*) from dfs_redis_p where a<50;
 count 
-------
  6049
(1 row)

delete from dfs_redis_p where a <50;
select count(*) from dfs_redis_p where a<50;
 count 
-------
     0
(1 row)

select count(*) from dfs_redis_p;
 count 
-------
   951
(1 row)

delete from dfs_redis_p;
select count(*) from dfs_redis_p;
 count 
-------
     0
(1 row)

drop schema dfs_redistable cascade;
NOTICE:  drop cascades to 7 other objects
DETAIL:  drop cascades to table mpp_col
drop cascades to table mpp_col_rep
drop cascades to table mpp_row
drop cascades to table mpp_row_rep
drop cascades to table mpp_zxf
drop cascades to table dfs_redis
drop cascades to table dfs_redis_p
