--test orc foreign data wrapper.
--
-- Settings to make the result deterministic
SET datestyle = "ISO, YMD";
set enable_vector_engine=false;
set enable_hdfs_predicate_pushdown=false;
--Unit 1. test plan without distributed clause
DROP FOREIGN TABLE IF EXISTS lineitem;
NOTICE:  foreign table "lineitem" does not exist, skipping
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER 	HDFS_FDW OPTIONS (type 'hdfs', address '@hdfshostname@:@hdfsport@',hdfscfgpath '@hdfscfgpath@');
create foreign table lineitem (
L_ORDERKEY BIGINT NOT NULL
, L_PARTKEY BIGINT NOT NULL
, L_SUPPKEY BIGINT NOT NULL
, L_LINENUMBER BIGINT NOT NULL
, L_QUANTITY DECIMAL(15,2) NOT NULL
, L_EXTENDEDPRICE DECIMAL(15,2) NOT NULL
, L_DISCOUNT DECIMAL(15,2) NOT NULL
, L_TAX DECIMAL(15,2) NOT NULL
, L_RETURNFLAG CHAR(1) NOT NULL
, L_LINESTATUS CHAR(1) NOT NULL
, L_SHIPDATE DATE NOT NULL
, L_COMMITDATE DATE NOT NULL
, L_RECEIPTDATE DATE NOT NULL
, L_SHIPINSTRUCT CHAR(25) NOT NULL
, L_SHIPMODE CHAR(10) NOT NULL
, L_COMMENT VARCHAR(44) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/lineitem_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS nation;
NOTICE:  foreign table "nation" does not exist, skipping
create foreign table nation  (
N_NATIONKEY INT NOT NULL
, N_NAME CHAR(25) NOT NULL
, N_REGIONKEY INT NOT NULL
, N_COMMENT VARCHAR(152)
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/nation_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS region;
NOTICE:  foreign table "region" does not exist, skipping
create foreign table region  (
R_REGIONKEY INT NOT NULL
, R_NAME TEXT NOT NULL
, R_COMMENT VARCHAR(152)
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/region_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS part;
NOTICE:  foreign table "part" does not exist, skipping
create foreign table part  (
P_PARTKEY BIGINT NOT NULL
, P_NAME VARCHAR(55) NOT NULL
, P_MFGR CHAR(25) NOT NULL
, P_BRAND CHAR(10) NOT NULL
, P_TYPE VARCHAR(25) NOT NULL
, P_SIZE BIGINT NOT NULL
, P_CONTAINER CHAR(10) NOT NULL
, P_RETAILPRICE DECIMAL(15,2) NOT NULL
, P_COMMENT VARCHAR(23) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/part_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS supplier;
NOTICE:  foreign table "supplier" does not exist, skipping
create foreign table supplier  (
S_SUPPKEY BIGINT NOT NULL
, S_NAME CHAR(25) NOT NULL
, S_ADDRESS VARCHAR(40) NOT NULL
, S_NATIONKEY INT NOT NULL
, S_PHONE CHAR(15) NOT NULL
, S_ACCTBAL DECIMAL(15,2) NOT NULL
, S_COMMENT VARCHAR(101) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/supplier_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS partsupp;
NOTICE:  foreign table "partsupp" does not exist, skipping
create foreign table partsupp (
PS_PARTKEY BIGINT NOT NULL
, PS_SUPPKEY BIGINT NOT NULL
, PS_AVAILQTY BIGINT NOT NULL
, PS_SUPPLYCOST DECIMAL(15,2) NOT NULL
, PS_COMMENT VARCHAR(199) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/partsupp_parquet/000000_0')
distribute by roundrobin;
analyze foreign tables;
explain (verbose, costs off) SELECT L_SHIPDATE FROM lineitem WHERE L_orderkey BETWEEN 509050 AND 509070;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: l_shipdate
   ->  Foreign Scan on public.lineitem
         Output: l_shipdate
         Filter: ((lineitem.l_orderkey >= 509050) AND (lineitem.l_orderkey <= 509070))
         Server Type: hdfs
         Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet/000000_0
(7 rows)

explain (verbose, costs off) SELECT count(L_SHIPDATE) FROM lineitem WHERE L_orderkey BETWEEN 509050 AND 509070;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(l_shipdate)))
   ->  Streaming (type: GATHER)
         Output: (count(l_shipdate))
         ->  Aggregate
               Output: count(l_shipdate)
               ->  Foreign Scan on public.lineitem
                     Output: l_shipdate
                     Filter: ((lineitem.l_orderkey >= 509050) AND (lineitem.l_orderkey <= 509070))
                     Server Type: hdfs
                     Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet/000000_0
(11 rows)

explain (verbose, costs off) select n_name, r_name from nation join region on n_regionkey=r_regionkey;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: nation.n_name, region.r_name
   ->  Hash Join
         Output: nation.n_name, region.r_name
         Hash Cond: (nation.n_regionkey = region.r_regionkey)
         ->  Foreign Scan on public.nation
               Output: nation.n_name, nation.n_regionkey
               Server Type: hdfs
               Parquet File: /user/hive/warehouse/mppdb.db/nation_parquet/000000_0
         ->  Hash
               Output: region.r_name, region.r_regionkey
               ->  Streaming(type: BROADCAST)
                     Output: region.r_name, region.r_regionkey
                     ->  Foreign Scan on public.region
                           Output: region.r_name, region.r_regionkey
                           Server Type: hdfs
                           Parquet File: /user/hive/warehouse/mppdb.db/region_parquet/000000_0
(17 rows)

explain (costs on) select n_name from nation;
--?.*
--?.*
--? Streaming \(type: GATHER\)  \(cost=.*
--?   ->  Foreign Scan on nation  \(cost=.*
         Server Type: hdfs
         Parquet File: /user/hive/warehouse/mppdb.db/nation_parquet/000000_0
(4 rows)

--Test Unit 2: distributed foreign table
DROP FOREIGN TABLE IF EXISTS lineitem;
Create foreign table lineitem (
L_ORDERKEY BIGINT NOT NULL
, L_PARTKEY BIGINT NOT NULL
, L_SUPPKEY BIGINT NOT NULL
, L_LINENUMBER BIGINT NOT NULL
, L_QUANTITY DECIMAL(15,2) NOT NULL
, L_EXTENDEDPRICE DECIMAL(15,2) NOT NULL
, L_DISCOUNT DECIMAL(15,2) NOT NULL
, L_TAX DECIMAL(15,2) NOT NULL
, L_RETURNFLAG CHAR(1) NOT NULL
, L_LINESTATUS CHAR(1) NOT NULL
, L_SHIPDATE DATE NOT NULL
, L_COMMITDATE DATE NOT NULL
, L_RECEIPTDATE DATE NOT NULL
, L_SHIPINSTRUCT CHAR(25) NOT NULL
, L_SHIPMODE CHAR(10) NOT NULL
, L_COMMENT VARCHAR(44) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', foldername '/user/hive/warehouse/mppdb.db/lineitem_parquet')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS customer;
NOTICE:  foreign table "customer" does not exist, skipping
CREATE FOREIGN TABLE customer ( 
C_CUSTKEY BIGINT NOT NULL
, C_NAME VARCHAR(25) NOT NULL
, C_ADDRESS VARCHAR(40) NOT NULL
, C_NATIONKEY INT NOT NULL
, C_PHONE CHAR(15) NOT NULL
, C_ACCTBAL DECIMAL(15,2) NOT NULL
, C_MKTSEGMENT CHAR(10) NOT NULL
, C_COMMENT VARCHAR(117) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/customer_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS orders;
NOTICE:  foreign table "orders" does not exist, skipping
create foreign table orders (
O_ORDERKEY BIGINT NOT NULL
, O_CUSTKEY BIGINT NOT NULL
, O_ORDERSTATUS CHAR(1) NOT NULL
, O_TOTALPRICE DECIMAL(15,2) NOT NULL
, O_ORDERDATE DATE NOT NULL
, O_ORDERPRIORITY CHAR(15) NOT NULL
, O_CLERK CHAR(15) NOT NULL
, O_SHIPPRIORITY BIGINT NOT NULL
, O_COMMENT VARCHAR(79) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', foldername '/user/hive/warehouse/mppdb.db/orders_parquet')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS part;
create foreign table part  (
P_PARTKEY BIGINT NOT NULL
, P_NAME VARCHAR(55) NOT NULL
, P_MFGR CHAR(25) NOT NULL
, P_BRAND CHAR(10) NOT NULL
, P_TYPE VARCHAR(25) NOT NULL
, P_SIZE BIGINT NOT NULL
, P_CONTAINER CHAR(10) NOT NULL
, P_RETAILPRICE DECIMAL(15,2) NOT NULL
, P_COMMENT VARCHAR(23) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/part_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS supplier;
create foreign table supplier  (
S_SUPPKEY BIGINT NOT NULL
, S_NAME CHAR(25) NOT NULL
, S_ADDRESS VARCHAR(40) NOT NULL
, S_NATIONKEY INT NOT NULL
, S_PHONE CHAR(15) NOT NULL
, S_ACCTBAL DECIMAL(15,2) NOT NULL
, S_COMMENT VARCHAR(101) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/supplier_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS partsupp;
create foreign table partsupp (
PS_PARTKEY BIGINT NOT NULL
, PS_SUPPKEY BIGINT NOT NULL
, PS_AVAILQTY BIGINT NOT NULL
, PS_SUPPLYCOST DECIMAL(15,2) NOT NULL
, PS_COMMENT VARCHAR(199) NOT NULL
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/partsupp_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS nation;
create foreign table nation  (
N_NATIONKEY INT NOT NULL
, N_NAME CHAR(25) NOT NULL
, N_REGIONKEY INT NOT NULL
, N_COMMENT VARCHAR(152)
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/nation_parquet/000000_0')
distribute by roundrobin;
DROP FOREIGN TABLE IF EXISTS region;
create foreign table region  (
R_REGIONKEY INT NOT NULL
, R_NAME TEXT NOT NULL
, R_COMMENT VARCHAR(152)
)
SERVER hdfs_server
OPTIONS(format 'parquet', filenames '/user/hive/warehouse/mppdb.db/region_parquet/000000_0')
distribute by roundrobin;
analyze foreign tables;
explain (verbose, costs off) SELECT count(t1.*) FROM region t1;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate
   Output: count(ROW(t1.r_regionkey, t1.r_name, t1.r_comment))
   ->  Streaming (type: GATHER) on region "_REMOTE_TABLE_QUERY_"
         Output: t1.r_regionkey, t1.r_name, t1.r_comment
         ->  Foreign Scan on public.region t1
               Output: t1.r_regionkey, t1.r_name, t1.r_comment
               Server Type: hdfs
               Parquet File: /user/hive/warehouse/mppdb.db/region_parquet/000000_0
(8 rows)

SELECT count(t1.*) FROM region t1;
 count 
-------
     5
(1 row)

explain (verbose, costs off) SELECT count(*) FROM region;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Aggregate
   Output: pg_catalog.count(*)
   ->  Streaming (type: GATHER)
         Output: (count(*))
         ->  Aggregate
               Output: count(*)
               ->  Foreign Scan on public.region
                     Server Type: hdfs
                     Parquet File: /user/hive/warehouse/mppdb.db/region_parquet/000000_0
(9 rows)

SELECT count(*) FROM region;
 count 
-------
     5
(1 row)

SELECT region FROM region order by 1 limit 1;
                                                              region                                                              
----------------------------------------------------------------------------------------------------------------------------------
 (0,AFRICA,"lar deposits. blithely final packages cajole. regular waters are final requests. regular accounts are according to ")
(1 row)

select sum(r_regionkey), count(row(array[r_regionkey, 2]))from region;
 sum | count 
-----+-------
  10 |     5
(1 row)

-- there are bugs for the following three queries. cause EOF error from datanode
explain (verbose, costs off) SELECT L_shipdate FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: l_shipdate
   ->  Foreign Scan on public.lineitem
         Output: l_shipdate
         Filter: ((lineitem.l_orderkey >= 2125190) AND (lineitem.l_orderkey <= 2125200))
         Server Type: hdfs
         Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet
(7 rows)

explain (costs on) SELECT L_shipdate FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
--?.*
--?.*
--? Streaming \(type: GATHER\)  \(cost=.*
--?   ->  Foreign Scan on lineitem  \(cost=.*
         Filter: ((l_orderkey >= 2125190) AND (l_orderkey <= 2125200))
         Server Type: hdfs
         Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet
(5 rows)

explain (verbose, costs off) SELECT count(L_shipdate) FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Aggregate
   Output: count((count(l_shipdate)))
   ->  Streaming (type: GATHER)
         Output: (count(l_shipdate))
         ->  Aggregate
               Output: count(l_shipdate)
               ->  Foreign Scan on public.lineitem
                     Output: l_shipdate
                     Filter: ((lineitem.l_orderkey >= 2125190) AND (lineitem.l_orderkey <= 2125200))
                     Server Type: hdfs
                     Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet
(11 rows)

-- TPCH - Q1
explain (verbose, costs off) SELECT 
  L_RETURNFLAG, L_LINESTATUS, SUM(L_QUANTITY), SUM(L_EXTENDEDPRICE), SUM(L_EXTENDEDPRICE*(1-L_DISCOUNT)), SUM(L_EXTENDEDPRICE*(1-L_DISCOUNT)*(1+L_TAX)), AVG(L_QUANTITY), AVG(L_EXTENDEDPRICE), AVG(L_DISCOUNT), COUNT(1) 
FROM 
  lineitem 
WHERE 
  L_SHIPDATE<='1998-09-02' 
GROUP BY L_RETURNFLAG, L_LINESTATUS 
ORDER BY L_RETURNFLAG, L_LINESTATUS;
                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                            
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (count((count(1))))
   ->  Sort
         Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::numeric - l_discount)))))), (sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (count((count(1))))
         Sort Key: lineitem.l_returnflag, lineitem.l_linestatus
         ->  HashAggregate
               Output: l_returnflag, l_linestatus, sum((sum(l_quantity))), sum((sum(l_extendedprice))), sum((sum((l_extendedprice * (1::numeric - l_discount))))), sum((sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))))), pg_catalog.avg((avg(l_quantity))), pg_catalog.avg((avg(l_extendedprice))), pg_catalog.avg((avg(l_discount))), count((count(1)))
               Group By Key: lineitem.l_returnflag, lineitem.l_linestatus
               ->  Streaming(type: REDISTRIBUTE)
                     Output: l_returnflag, l_linestatus, (sum(l_quantity)), (sum(l_extendedprice)), (sum((l_extendedprice * (1::numeric - l_discount)))), (sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax)))), (avg(l_quantity)), (avg(l_extendedprice)), (avg(l_discount)), (count(1))
                     Distribute Key: l_returnflag, l_linestatus
                     ->  HashAggregate
                           Output: l_returnflag, l_linestatus, sum(l_quantity), sum(l_extendedprice), sum((l_extendedprice * (1::numeric - l_discount))), sum(((l_extendedprice * (1::numeric - l_discount)) * (1::numeric + l_tax))), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count(1)
                           Group By Key: lineitem.l_returnflag, lineitem.l_linestatus
                           ->  Foreign Scan on public.lineitem
                                 Output: l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax
                                 Filter: (lineitem.l_shipdate <= '1998-09-02 00:00:00'::timestamp without time zone)
                                 Server Type: hdfs
                                 Parquet File: /user/hive/warehouse/mppdb.db/lineitem_parquet
(19 rows)

DROP FOREIGN TABLE IF EXISTS lineitem CASCADE;
DROP FOREIGN TABLE IF EXISTS customer CASCADE;
DROP FOREIGN TABLE IF EXISTS orders CASCADE;
DROP FOREIGN TABLE IF EXISTS part CASCADE;
DROP FOREIGN TABLE IF EXISTS partsupp CASCADE;
DROP FOREIGN TABLE IF EXISTS supplier CASCADE;
DROP FOREIGN TABLE IF EXISTS nation CASCADE;
DROP FOREIGN TABLE IF EXISTS region CASCADE;
DROP SERVER hdfs_server CASCADE;
