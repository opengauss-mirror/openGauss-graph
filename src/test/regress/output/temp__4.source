CREATE FUNCTION pt_in_widget(point, widget)
   RETURNS bool
   AS '@libdir@/regress@DLSUFFIX@'
   LANGUAGE C not fenced;
ERROR:  type widget does not exist
CREATE FUNCTION interpt_pp(path, path)
   RETURNS point
   AS '@libdir@/regress@DLSUFFIX@'
   LANGUAGE C not fenced;
CREATE FUNCTION reverse_name(name)
   RETURNS name
   AS '@libdir@/regress@DLSUFFIX@'
   LANGUAGE C not fenced;
CREATE FUNCTION user_relns()
   RETURNS setof name
   AS 'select relname
       from pg_class c, pg_namespace n
       where relnamespace = n.oid and
             (nspname !~ ''pg_.*'' and nspname <> ''information_schema''
                 and nspname <> ''dbe_perf'') and
             relkind <> ''i'' '
   LANGUAGE SQL;
CREATE FUNCTION hobby_construct(text, text)
   RETURNS hobbies_r
   AS 'select $1 as name, $2 as hobby'
   LANGUAGE SQL;
CREATE FUNCTION hobby_construct_named(name text, hobby text)
   RETURNS hobbies_r
   AS 'select name, hobby'
   LANGUAGE SQL;
CREATE FUNCTION equipment_named_ambiguous_2a(hobby text)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where hobby = equipment_named_ambiguous_2a.hobby'
   LANGUAGE SQL;
CREATE FUNCTION equipment_named_ambiguous_2b(hobby text)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where equipment_r.hobby = hobby'
   LANGUAGE SQL;
CREATE FUNCTION overpaid(emp)
   RETURNS bool
   AS '@libdir@/regress@DLSUFFIX@'
   LANGUAGE C not fenced;
CREATE FUNCTION equipment(hobbies_r)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where hobby = $1.name'
   LANGUAGE SQL;   
CREATE FUNCTION oldstyle_length(int4, text)
   RETURNS int4
   AS '@libdir@/regress@DLSUFFIX@'
   LANGUAGE C not fenced;
ERROR:  function "oldstyle_length" already exists with same argument types
CREATE FUNCTION equipment_named(hobby hobbies_r)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where equipment_r.hobby = equipment_named.hobby.name'
   LANGUAGE SQL;
CREATE FUNCTION hobbies(person)
   RETURNS setof hobbies_r
   AS 'select * from hobbies_r where person = $1.name'
   LANGUAGE SQL;
CREATE FUNCTION equipment_named_ambiguous_1b(hobby hobbies_r)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where equipment_r.hobby = hobby.name'
   LANGUAGE SQL;
CREATE FUNCTION equipment_named_ambiguous_1a(hobby hobbies_r)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where hobby = equipment_named_ambiguous_1a.hobby.name'
   LANGUAGE SQL;
CREATE FUNCTION equipment_named_ambiguous_1c(hobby hobbies_r)
   RETURNS setof equipment_r
   AS 'select * from equipment_r where hobby = hobby.name'
   LANGUAGE SQL;
create table autovacuum_partition_table
(
	a int,
	b int
)partition by range (b)
(
	partition p1 values less than (10),
	partition p2 values less than (20),
	partition p3 values less than (30)
);
