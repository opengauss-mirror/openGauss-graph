--test orc foreign data wrapper.
--
-- Settings to make the result deterministic
SET datestyle = "ISO, YMD";
set enable_vector_engine=false;
set enable_hdfs_predicate_pushdown=false;
--Unit 1. test plan without distributed clause
DROP FOREIGN TABLE IF EXISTS lineitem;
NOTICE:  foreign table "lineitem" does not exist, skipping
CREATE SERVER obs_server FOREIGN DATA WRAPPER 	dfs_fdw OPTIONS (address '@obshostname@', type 'obs', access_key '@ak@', secret_access_key '@sk@');
create foreign table lineitem (
 L_ORDERKEY INT4,
 L_PARTKEY INT4,
 L_SUPPKEY INT4,
 L_LINENUMBER INT4,
 L_QUANTITY FLOAT8,
 L_EXTENDEDPRICE FLOAT8,
 L_DISCOUNT FLOAT8,
 L_TAX FLOAT8,
 L_RETURNFLAG TEXT,
 L_LINESTATUS TEXT,
 L_SHIPDATE TEXT,
 L_COMMITDATE TEXT,
 L_RECEIPTDATE TEXT,
 L_SHIPINSTRUCT TEXT,
 L_SHIPMODE TEXT,
 L_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000000_0/,/@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000001_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS nation;
NOTICE:  foreign table "nation" does not exist, skipping
create foreign table nation  (
 N_NATIONKEY INT4,
 N_NAME TEXT,
 N_REGIONKEY INT4,
 N_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS region;
NOTICE:  foreign table "region" does not exist, skipping
create foreign table region  (
 R_REGIONKEY INT4,
 R_NAME TEXT,
 R_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS part;
NOTICE:  foreign table "part" does not exist, skipping
create foreign table part  (
 P_PARTKEY INT4,
 P_NAME TEXT,
 P_MFGR TEXT,
 P_BRAND TEXT,
 P_TYPE TEXT,
 P_SIZE INT4,
 P_CONTAINER TEXT,
 P_RETAILPRICE FLOAT8,
 P_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/part_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS supplier;
NOTICE:  foreign table "supplier" does not exist, skipping
create foreign table supplier  (
 S_SUPPKEY INT4,
 S_NAME TEXT,
 S_ADDRESS TEXT,
 S_NATIONKEY INT4,
 S_PHONE TEXT,
 S_ACCTBAL FLOAT8,
 S_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/supplier_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS partsupp;
NOTICE:  foreign table "partsupp" does not exist, skipping
create foreign table partsupp (
 PS_PARTKEY INT4,
 PS_SUPPKEY INT4,
 PS_AVAILQTY INT4,
 PS_SUPPLYCOST FLOAT8,
 PS_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/partsupp_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
explain (verbose, costs off) SELECT L_SHIPDATE FROM lineitem WHERE L_orderkey BETWEEN 509050 AND 509070;
--?.*
--?.*
 Streaming (type: GATHER)
   Output: l_shipdate
   ->  Foreign Scan on public.lineitem
         Output: l_shipdate
         Filter: ((lineitem.l_orderkey >= 509050) AND (lineitem.l_orderkey <= 509070))
         Server Type: obs
         Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000000_0/,/@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000001_0/
(7 rows)

explain (verbose, costs off) SELECT count(L_SHIPDATE) FROM lineitem WHERE L_orderkey BETWEEN 509050 AND 509070;
--?.*
--?.*
 Aggregate
   Output: count((count(l_shipdate)))
   ->  Streaming (type: GATHER)
         Output: (count(l_shipdate))
         ->  Aggregate
               Output: count(l_shipdate)
               ->  Foreign Scan on public.lineitem
                     Output: l_shipdate
                     Filter: ((lineitem.l_orderkey >= 509050) AND (lineitem.l_orderkey <= 509070))
                     Server Type: obs
                     Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000000_0/,/@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_two_64stripe/000001_0/
(11 rows)

explain (verbose, costs off) select n_name, r_name from nation join region on n_regionkey=r_regionkey;
--?.*
--?.*
 Streaming (type: GATHER)
   Output: nation.n_name, region.r_name
   ->  Nested Loop
         Output: nation.n_name, region.r_name
         Join Filter: (nation.n_regionkey = region.r_regionkey)
         ->  Foreign Scan on public.nation
               Output: nation.n_name, nation.n_regionkey
               Server Type: obs
               Orc File: /@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/
         ->  Materialize
               Output: region.r_name, region.r_regionkey
               ->  Streaming(type: BROADCAST)
                     Output: region.r_name, region.r_regionkey
                     ->  Foreign Scan on public.region
                           Output: region.r_name, region.r_regionkey
                           Server Type: obs
                           Orc File: /@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/
(17 rows)

explain (costs on) select n_name from nation;
--?.*
--?.*
--? Streaming \(type: GATHER\)  \(cost=.*
--?   ->  Foreign Scan on nation  \(cost=.*
         Server Type: obs
         Orc File: /@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/
(4 rows)

explain (verbose, costs off)
select
  s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment
from
  nation n join region r
on
  n.n_regionkey = r.r_regionkey and n.n_name = 'FRANCE'
join
  supplier s
on
  s.s_nationkey = n.n_nationkey
join
  partsupp ps
on
  s.s_suppkey = ps.ps_suppkey
join
  part p
on
  p.p_partkey = ps.ps_partkey and p.p_size = 15 and p.p_type like '%BRASS';
--?.*
--?.*
 Streaming (type: GATHER)
   Output: s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment
   ->  Nested Loop
         Output: s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment
         Join Filter: (ps.ps_partkey = p.p_partkey)
         ->  Nested Loop
               Output: n.n_name, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, ps.ps_supplycost, ps.ps_partkey
               Join Filter: (s.s_suppkey = ps.ps_suppkey)
               ->  Nested Loop
                     Output: n.n_name, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_suppkey
                     Join Filter: (n.n_regionkey = r.r_regionkey)
                     ->  Nested Loop
                           Output: n.n_name, n.n_regionkey, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_suppkey
                           Join Filter: (n.n_nationkey = s.s_nationkey)
                           ->  Streaming(type: BROADCAST)
                                 Output: n.n_name, n.n_regionkey, n.n_nationkey
                                 ->  Foreign Scan on public.nation n
                                       Output: n.n_name, n.n_regionkey, n.n_nationkey
                                       Filter: (n.n_name = 'FRANCE'::text)
                                       Server Type: obs
                                       Orc File: /@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/
                           ->  Foreign Scan on public.supplier s
                                 Output: s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_nationkey, s.s_suppkey
                                 Server Type: obs
                                 Orc File: /@obsbucket@/obsorccheck/mppdb.db/supplier_orc11_64stripe/000000_0/
                     ->  Materialize
                           Output: r.r_regionkey
                           ->  Streaming(type: BROADCAST)
                                 Output: r.r_regionkey
                                 ->  Foreign Scan on public.region r
                                       Output: r.r_regionkey
                                       Server Type: obs
                                       Orc File: /@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/
               ->  Materialize
                     Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                     ->  Streaming(type: BROADCAST)
                           Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                           ->  Foreign Scan on public.partsupp ps
                                 Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                                 Server Type: obs
                                 Orc File: /@obsbucket@/obsorccheck/mppdb.db/partsupp_orc11_64stripe/000000_0/
         ->  Materialize
               Output: p.p_partkey, p.p_mfgr
               ->  Streaming(type: BROADCAST)
                     Output: p.p_partkey, p.p_mfgr
                     ->  Foreign Scan on public.part p
                           Output: p.p_partkey, p.p_mfgr
                           Filter: ((p.p_type ~~ '%BRASS'::text) AND (p.p_size = 15))
                           Server Type: obs
                           Orc File: /@obsbucket@/obsorccheck/mppdb.db/part_orc11_64stripe/000000_0/
(50 rows)

--Test Unit 2: distributed foreign table
DROP FOREIGN TABLE IF EXISTS lineitem;
Create foreign table lineitem (
 L_ORDERKEY INT4,
 L_PARTKEY INT4,
 L_SUPPKEY INT4,
 L_LINENUMBER INT4,
 L_QUANTITY FLOAT8,
 L_EXTENDEDPRICE FLOAT8,
 L_DISCOUNT FLOAT8,
 L_TAX FLOAT8,
 L_RETURNFLAG TEXT,
 L_LINESTATUS TEXT,
 L_SHIPDATE TEXT,
 L_COMMITDATE TEXT,
 L_RECEIPTDATE TEXT,
 L_SHIPINSTRUCT TEXT,
 L_SHIPMODE TEXT,
 L_COMMENT TEXT)
SERVER obs_server OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_64stripe/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS customer;
NOTICE:  foreign table "customer" does not exist, skipping
CREATE FOREIGN TABLE customer ( 
 c_custkey BIGINT, 
 c_name TEXT, 
 c_address TEXT, 
 c_nationkey INT4, 
 c_phone TEXT, 
 c_acctbal FLOAT4, 
 c_mktsegment TEXT, 
 c_comment TEXT) 
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/customer_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS orders;
NOTICE:  foreign table "orders" does not exist, skipping
create foreign table orders (
 O_ORDERKEY INT4, 
 O_CUSTKEY INT4, 
 O_ORDERSTATUS TEXT, 
 O_TOTALPRICE FLOAT8,
 O_ORDERDATE TEXT,
 O_ORDERPRIORITY TEXT, 
 O_CLERK TEXT,
 O_SHIPPRIORITY INT4, 
 O_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/orders_orc11_64stripe/')
distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS part;
create foreign table part  (
 P_PARTKEY INT4,
 P_NAME TEXT, 
 P_MFGR TEXT,
 P_BRAND TEXT,
 P_TYPE TEXT,
 P_SIZE INT4,
 P_CONTAINER TEXT,
 P_RETAILPRICE FLOAT8,
 P_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/part_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS supplier;
create foreign table supplier  (
 S_SUPPKEY INT4,
 S_NAME TEXT,
 S_ADDRESS TEXT,
 S_NATIONKEY INT4,
 S_PHONE TEXT,
 S_ACCTBAL FLOAT8,
 S_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/supplier_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS partsupp;
create foreign table partsupp (
 PS_PARTKEY INT4,
 PS_SUPPKEY INT4,
 PS_AVAILQTY INT4,
 PS_SUPPLYCOST FLOAT8,
 PS_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/partsupp_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS nation;
create foreign table nation  (
 N_NATIONKEY INT4,
 N_NAME TEXT,
 N_REGIONKEY INT4,
 N_COMMENT TEXT) 
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
DROP FOREIGN TABLE IF EXISTS region;
create foreign table region  (
 R_REGIONKEY INT4,
 R_NAME TEXT,
 R_COMMENT TEXT)
SERVER obs_server
OPTIONS(encoding 'utf-8',format 'orc', foldername '/@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/000000_0/') distribute by roundrobin;
WARNING:  It is not specified totalrows option for the foreign table.
explain (verbose, costs off) SELECT count(t1.*) FROM region t1;
ERROR:  OBS foreign table doesn't support not-stream plan.
SELECT count(t1.*) FROM region t1;
ERROR:  OBS foreign table doesn't support not-stream plan.
explain (verbose, costs off) SELECT count(*) FROM region;
--?.*
--?.*
 Aggregate
   Output: pg_catalog.count(*)
   ->  Streaming (type: GATHER)
         Output: (count(*))
         ->  Aggregate
               Output: count(*)
               ->  Foreign Scan on public.region
                     Server Type: obs
                     Orc File: /@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/000000_0/
(9 rows)

SELECT count(*) FROM region;
 count 
-------
     5
(1 row)

SELECT region FROM region order by 1 limit 1;
ERROR:  OBS foreign table doesn't support not-stream plan.
select sum(r_regionkey), count(row(array[r_regionkey, 2]))from region;
ERROR:  OBS foreign table doesn't support not-stream plan.
-- there are bugs for the following three queries. cause EOF error from datanode
explain (verbose, costs off) SELECT L_shipdate FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
--?.*
--?.*
 Streaming (type: GATHER)
   Output: l_shipdate
   ->  Foreign Scan on public.lineitem
         Output: l_shipdate
         Filter: ((lineitem.l_orderkey >= 2125190) AND (lineitem.l_orderkey <= 2125200))
         Server Type: obs
         Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_64stripe/
(7 rows)

explain (costs on) SELECT L_shipdate FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
--?.*
--?.*
--? Streaming \(type: GATHER\)  \(cost=.*
--?   ->  Foreign Scan on lineitem  \(cost=.*
         Filter: ((l_orderkey >= 2125190) AND (l_orderkey <= 2125200))
         Server Type: obs
         Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_64stripe/
(5 rows)

explain (verbose, costs off) SELECT count(L_shipdate) FROM lineitem WHERE L_orderkey between 2125190 and 2125200;
--?.*
--?.*
 Aggregate
   Output: count((count(l_shipdate)))
   ->  Streaming (type: GATHER)
         Output: (count(l_shipdate))
         ->  Aggregate
               Output: count(l_shipdate)
               ->  Foreign Scan on public.lineitem
                     Output: l_shipdate
                     Filter: ((lineitem.l_orderkey >= 2125190) AND (lineitem.l_orderkey <= 2125200))
                     Server Type: obs
                     Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_64stripe/
(11 rows)

-- TPCH - Q1
explain (verbose, costs off) SELECT 
  L_RETURNFLAG, L_LINESTATUS, SUM(L_QUANTITY), SUM(L_EXTENDEDPRICE), SUM(L_EXTENDEDPRICE*(1-L_DISCOUNT)), SUM(L_EXTENDEDPRICE*(1-L_DISCOUNT)*(1+L_TAX)), AVG(L_QUANTITY), AVG(L_EXTENDEDPRICE), AVG(L_DISCOUNT), COUNT(1) 
FROM 
  lineitem 
WHERE 
  L_SHIPDATE<='1998-09-02' 
GROUP BY L_RETURNFLAG, L_LINESTATUS 
ORDER BY L_RETURNFLAG, L_LINESTATUS;
--?.*
--?.*
 Sort
   Output: l_returnflag, l_linestatus, (sum((sum(l_quantity)))), (sum((sum(l_extendedprice)))), (sum((sum((l_extendedprice * (1::double precision - l_discount)))))), (sum((sum(((l_extendedprice * (1::double precision - l_discount)) * (1::double precision + l_tax)))))), (pg_catalog.avg((avg(l_quantity)))), (pg_catalog.avg((avg(l_extendedprice)))), (pg_catalog.avg((avg(l_discount)))), (count((count(1))))
   Sort Key: lineitem.l_returnflag, lineitem.l_linestatus
   ->  HashAggregate
         Output: l_returnflag, l_linestatus, sum((sum(l_quantity))), sum((sum(l_extendedprice))), sum((sum((l_extendedprice * (1::double precision - l_discount))))), sum((sum(((l_extendedprice * (1::double precision - l_discount)) * (1::double precision + l_tax))))), pg_catalog.avg((avg(l_quantity))), pg_catalog.avg((avg(l_extendedprice))), pg_catalog.avg((avg(l_discount))), count((count(1)))
         Group By Key: lineitem.l_returnflag, lineitem.l_linestatus
         ->  Streaming (type: GATHER)
               Output: l_returnflag, l_linestatus, (sum(l_quantity)), (sum(l_extendedprice)), (sum((l_extendedprice * (1::double precision - l_discount)))), (sum(((l_extendedprice * (1::double precision - l_discount)) * (1::double precision + l_tax)))), (avg(l_quantity)), (avg(l_extendedprice)), (avg(l_discount)), (count(1))
               ->  HashAggregate
                     Output: l_returnflag, l_linestatus, sum(l_quantity), sum(l_extendedprice), sum((l_extendedprice * (1::double precision - l_discount))), sum(((l_extendedprice * (1::double precision - l_discount)) * (1::double precision + l_tax))), avg(l_quantity), avg(l_extendedprice), avg(l_discount), count(1)
                     Group By Key: lineitem.l_returnflag, lineitem.l_linestatus
                     ->  Foreign Scan on public.lineitem
                           Output: l_returnflag, l_linestatus, l_quantity, l_extendedprice, l_discount, l_tax
                           Filter: (lineitem.l_shipdate <= '1998-09-02'::text)
                           Server Type: obs
                           Orc File: /@obsbucket@/obsorccheck/mppdb.db/lineitem_orc11_64stripe/
(16 rows)

--TPCH - Q2
explain (verbose, costs off) select 
  s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment 
from 
  nation n join region r 
on 
  n.n_regionkey = r.r_regionkey and n.n_name = 'FRANCE' 
join 
  supplier s 
on 
  s.s_nationkey = n.n_nationkey 
join 
  partsupp ps 
on  
  s.s_suppkey = ps.ps_suppkey 
join 
  part p 
on 
  p.p_partkey = ps.ps_partkey and p.p_size = 15 and p.p_type like '%BRASS';
--?.*
--?.*
 Streaming (type: GATHER)
   Output: s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment
   ->  Nested Loop
         Output: s.s_acctbal, s.s_name, n.n_name, p.p_partkey, ps.ps_supplycost, p.p_mfgr, s.s_address, s.s_phone, s.s_comment
         Join Filter: (ps.ps_partkey = p.p_partkey)
         ->  Nested Loop
               Output: n.n_name, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, ps.ps_supplycost, ps.ps_partkey
               Join Filter: (s.s_suppkey = ps.ps_suppkey)
               ->  Nested Loop
                     Output: n.n_name, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_suppkey
                     Join Filter: (n.n_regionkey = r.r_regionkey)
                     ->  Nested Loop
                           Output: n.n_name, n.n_regionkey, s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_suppkey
                           Join Filter: (n.n_nationkey = s.s_nationkey)
                           ->  Streaming(type: BROADCAST)
                                 Output: n.n_name, n.n_regionkey, n.n_nationkey
                                 ->  Foreign Scan on public.nation n
                                       Output: n.n_name, n.n_regionkey, n.n_nationkey
                                       Filter: (n.n_name = 'FRANCE'::text)
                                       Server Type: obs
                                       Orc File: /@obsbucket@/obsorccheck/mppdb.db/nation_orc11_64stripe/000000_0/
                           ->  Foreign Scan on public.supplier s
                                 Output: s.s_acctbal, s.s_name, s.s_address, s.s_phone, s.s_comment, s.s_nationkey, s.s_suppkey
                                 Server Type: obs
                                 Orc File: /@obsbucket@/obsorccheck/mppdb.db/supplier_orc11_64stripe/000000_0/
                     ->  Materialize
                           Output: r.r_regionkey
                           ->  Streaming(type: BROADCAST)
                                 Output: r.r_regionkey
                                 ->  Foreign Scan on public.region r
                                       Output: r.r_regionkey
                                       Server Type: obs
                                       Orc File: /@obsbucket@/obsorccheck/mppdb.db/region_orc11_64stripe/000000_0/
               ->  Materialize
                     Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                     ->  Streaming(type: BROADCAST)
                           Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                           ->  Foreign Scan on public.partsupp ps
                                 Output: ps.ps_supplycost, ps.ps_suppkey, ps.ps_partkey
                                 Server Type: obs
                                 Orc File: /@obsbucket@/obsorccheck/mppdb.db/partsupp_orc11_64stripe/000000_0/
         ->  Materialize
               Output: p.p_partkey, p.p_mfgr
               ->  Streaming(type: BROADCAST)
                     Output: p.p_partkey, p.p_mfgr
                     ->  Foreign Scan on public.part p
                           Output: p.p_partkey, p.p_mfgr
                           Filter: ((p.p_type ~~ '%BRASS'::text) AND (p.p_size = 15))
                           Server Type: obs
                           Orc File: /@obsbucket@/obsorccheck/mppdb.db/part_orc11_64stripe/000000_0/
(50 rows)

set datestyle to iso;SET IntervalStyle to postgres;
create schema COLUMNAR_STORAGE;
create foreign table  COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006
(
C_CHAR_3 CHAR(102400),
C_VARCHAR_3 VARCHAR(1024),
C_INT INTEGER,
C_NUMERIC numeric(10,5),
C_TS_WITHOUT TIMESTAMP WITHOUT TIME ZONE,
C_TEXT  TEXT
)
SERVER gsmpp_server
OPTIONS(location '/srv/BigData/mpp_cases/Testcase/data/FULL_TEXT/FULL_TEXT_TABLE_006',
format 'text',
mode 'private'
);
create index INDEX_COL_FULL_TEXT_TABLE_006_1_1 ON  COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006(c_numeric) ;
ERROR:  cannot create index on foreign table "col_full_text_table_006"
create table COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006_2
(
C_CHAR_3 CHAR(102400),
C_VARCHAR_3 VARCHAR(1024),
C_INT INTEGER,
C_NUMERIC numeric(10,5),
C_TS_WITHOUT TIMESTAMP WITHOUT TIME ZONE,
--@tsvector@C_tsvector  tsvector
C_tsvector VarChar(100000)
) with (orientation=column);
create index INDEX_COL_FULL_TEXT_TABLE_006_2_1 ON  COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006_2(c_numeric) ;
create index INDEX_COL_FULL_TEXT_TABLE_006_2_2 ON  COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006_2(c_char_3,c_int);
explain (verbose, costs off) select  a.c_int,b.c_int ,a.c_text,b.c_tsvector  from   COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006 a,COLUMNAR_STORAGE.COL_FULL_TEXT_TABLE_006_2 b order by 1,2,3,4;
ERROR:  It is not supported that there are both foreign tables and non-foreign tables in one query.
reset enable_vector_engine;
DROP FOREIGN TABLE IF EXISTS lineitem CASCADE;
DROP FOREIGN TABLE IF EXISTS customer CASCADE;
DROP FOREIGN TABLE IF EXISTS orders CASCADE;
DROP FOREIGN TABLE IF EXISTS part CASCADE;
DROP FOREIGN TABLE IF EXISTS partsupp CASCADE;
DROP FOREIGN TABLE IF EXISTS supplier CASCADE;
DROP FOREIGN TABLE IF EXISTS nation CASCADE;
DROP FOREIGN TABLE IF EXISTS region CASCADE;
DROP SERVER obs_server CASCADE;
