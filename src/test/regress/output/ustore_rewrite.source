-- predictability
SET synchronous_commit = on;
set enable_data_replicate = false;
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'mppdb_decoding');
 ?column? 
----------
 init
(1 row)

CREATE TABLE replication_example(id SERIAL PRIMARY KEY, somedata int, text varchar(120))with(storage_type = ustore);
NOTICE:  CREATE TABLE will create implicit sequence "replication_example_id_seq" for serial column "replication_example.id"
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "replication_example_pkey" for table "replication_example"
INSERT INTO replication_example(somedata) VALUES (1);
SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'include-xids', '0', 'skip-empty-xacts', '1');
--?.*
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text"],"columns_type":["integer","integer","character varying"],"columns_val":["1","1","null"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
(3 rows)

INSERT INTO replication_example(somedata) VALUES (2);
ALTER TABLE replication_example ADD COLUMN testcolumn1 int;
INSERT INTO replication_example(somedata, testcolumn1) VALUES (3,  1);
INSERT INTO replication_example(somedata) VALUES (3);
ALTER TABLE replication_example ADD COLUMN testcolumn2 int;
INSERT INTO replication_example(somedata, testcolumn1, testcolumn2) VALUES (4,  2, 1);
set xc_maintenance_mode = on;
VACUUM FULL pg_am;
VACUUM FULL pg_amop;
VACUUM FULL pg_proc;
VACUUM FULL pg_opclass;
VACUUM FULL pg_type;
VACUUM FULL pg_index;
VACUUM FULL pg_database;
-- repeated rewrites that succeed
CLUSTER pg_class USING pg_class_oid_index;
CLUSTER pg_class USING pg_class_oid_index;
CLUSTER pg_class USING pg_class_oid_index;
 -- repeated rewrites in different transactions
VACUUM FULL pg_class;
VACUUM FULL pg_class;
set xc_maintenance_mode = off;
INSERT INTO replication_example(somedata, testcolumn1) VALUES (5, 3);
INSERT INTO replication_example(somedata, testcolumn1) VALUES (6, 4);
ALTER TABLE replication_example ADD COLUMN testcolumn3 int;
INSERT INTO replication_example(somedata, testcolumn1, testcolumn3) VALUES (7, 5, 1);
-- make old files go away
CHECKPOINT;
SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'include-xids', '0', 'skip-empty-xacts', '1');
--?.*
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text"],"columns_type":["integer","integer","character varying"],"columns_val":["2","2","null"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1"],"columns_type":["integer","integer","character varying","integer"],"columns_val":["3","3","null","1"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1"],"columns_type":["integer","integer","character varying","integer"],"columns_val":["4","3","null","null"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1","testcolumn2"],"columns_type":["integer","integer","character varying","integer","integer"],"columns_val":["5","4","null","2","1"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1","testcolumn2"],"columns_type":["integer","integer","character varying","integer","integer"],"columns_val":["6","5","null","3","null"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1","testcolumn2"],"columns_type":["integer","integer","character varying","integer","integer"],"columns_val":["7","6","null","4","null"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
 BEGIN
 {"table_name":"public.replication_example","op_type":"INSERT","columns_name":["id","somedata","text","testcolumn1","testcolumn2","testcolumn3"],"columns_type":["integer","integer","character varying","integer","integer","integer"],"columns_val":["8","7","null","5","null","1"],"old_keys_name":[],"old_keys_type":[],"old_keys_val":[]}
--?.*
(21 rows)

SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'include-xids', '0', 'skip-empty-xacts', '1');
 data 
------
(0 rows)

SELECT pg_drop_replication_slot('regression_slot');
WARNING:  replicationSlotMinLSN is InvalidXLogRecPtr!!!
CONTEXT:  referenced column: pg_drop_replication_slot
WARNING:  replicationSlotMaxLSN is InvalidXLogRecPtr!!!
CONTEXT:  referenced column: pg_drop_replication_slot
 pg_drop_replication_slot 
--------------------------
 
(1 row)

DROP TABLE IF EXISTS replication_example;
