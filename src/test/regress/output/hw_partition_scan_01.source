--
---- test for scan for partitioned table
---- add by jiayanhua
---- case 1: partitioned table + partitioned table
--prepare
CREATE TABLE partition_scan_stu_info1(SN INT, NAME NAME)
PARTITION BY RANGE (SN)
(
	PARTITION P1_partition_scan_stu_info1 VALUES LESS THAN(10),
	PARTITION P2_partition_scan_stu_info1 VALUES LESS THAN(20),
	PARTITION P3_partition_scan_stu_info1 VALUES LESS THAN(30),
	PARTITION P4_partition_scan_stu_info1 VALUES LESS THAN(40)
);
CREATE TABLE partition_scan_stu_info2(SN INT, PHONE NAME)
PARTITION BY RANGE (SN)
(
	PARTITION P1_partition_scan_stu_info2 VALUES LESS THAN(10),
	PARTITION P2_partition_scan_stu_info2 VALUES LESS THAN(20),
	PARTITION P3_partition_scan_stu_info2 VALUES LESS THAN(30),
	PARTITION P4_partition_scan_stu_info2 VALUES LESS THAN(40)
);
CREATE UNIQUE INDEX index_on_partition_scan_stu_info1 ON partition_scan_stu_info1 (SN) LOCAL;
CREATE UNIQUE INDEX index_on_partition_scan_stu_info2 ON partition_scan_stu_info2 (SN) LOCAL;
INSERT INTO partition_scan_stu_info1 VALUES (1,'DFM');
INSERT INTO partition_scan_stu_info1 VALUES (11,'CHAO');
INSERT INTO partition_scan_stu_info1 VALUES (21,'ZJR');
INSERT INTO partition_scan_stu_info1 VALUES (31,'JYH');
INSERT INTO partition_scan_stu_info2 VALUES (1,'15478523126');
INSERT INTO partition_scan_stu_info2 VALUES (11,'15236997586');
INSERT INTO partition_scan_stu_info2 VALUES (21,'15936985364');
INSERT INTO partition_scan_stu_info2 VALUES (31,'15873285556');
SELECT * FROM partition_scan_stu_info1 ORDER BY 1;
 sn | name 
----+------
  1 | DFM
 11 | CHAO
 21 | ZJR
 31 | JYH
(4 rows)

SELECT * FROM partition_scan_stu_info2 ORDER BY 1;
 sn |    phone    
----+-------------
  1 | 15478523126
 11 | 15236997586
 21 | 15936985364
 31 | 15873285556
(4 rows)

-- SeqScan test
SET enable_seqscan = ON;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = OFF;
EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN; --one psrtition: the first
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 1
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn < 10)
                     Selected Partitions:  1
(9 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN; --more than one partitions
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 2
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn < 20)
                     Selected Partitions:  1..2
(9 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 30 ORDER BY SN; --one psrtition: the last
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 1
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 30)
                     Selected Partitions:  4
(9 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN; -- no partition
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
(9 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 ORDER BY SN; -- all partitions
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
(8 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Left Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Sort
               Sort Key: partition_scan_stu_info1.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
         ->  Sort
               Sort Key: partition_scan_stu_info2.sn
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Selected Partitions:  1..4
(16 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Sort
               Sort Key: partition_scan_stu_info1.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
         ->  Sort
               Sort Key: partition_scan_stu_info2.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
(17 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Sort
               Sort Key: partition_scan_stu_info1.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
         ->  Sort
               Sort Key: partition_scan_stu_info2.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
(17 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN;
 sn 
----
  1
(1 row)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN;
 sn 
----
  1
 11
(2 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 30 ORDER BY SN;
 sn 
----
  1
 11
 21
(3 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN;
 sn 
----
(0 rows)

SELECT SN FROM partition_scan_stu_info1 ORDER BY SN;
 sn 
----
  1
 11
 21
 31
(4 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--IndexScan test
SET enable_seqscan = OFF;
SET enable_indexscan = ON;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = OFF;
EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN; --one psrtition: the first
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn < 10)
               Selected Partitions:  1
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN; --more than one partitions
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 2
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn < 20)
               Selected Partitions:  1..2
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 30 ORDER BY SN; --one psrtition: the last
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn > 30)
               Selected Partitions:  4
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN; -- no partition
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 0
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn > 40)
               Selected Partitions:  NONE
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 ORDER BY SN; -- all partitions
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 4
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Selected Partitions:  1..4
(6 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Materialize
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Materialize
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN;
 sn 
----
  1
(1 row)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN;
 sn 
----
  1
 11
(2 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 30 ORDER BY SN;
 sn 
----
  1
 11
 21
(3 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN;
 sn 
----
(0 rows)

SELECT SN FROM partition_scan_stu_info1 ORDER BY SN;
 sn 
----
  1
 11
 21
 31
(4 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--IndexOnlyScan test
SET enable_seqscan = OFF;
SET enable_indexscan = ON;
SET enable_indexonlyscan = ON;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = OFF;
EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN; --one psrtition: the first
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn < 10)
               Selected Partitions:  1
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN; --more than one partitions
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 2
         ->  Partitioned Index Only Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn < 20)
               Selected Partitions:  1..2
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 30 ORDER BY SN; --one psrtition: the last
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 1
         ->  Partitioned Index Only Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn > 30)
               Selected Partitions:  4
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN; -- no partition
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 0
         ->  Partitioned Index Only Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Index Cond: (sn > 40)
               Selected Partitions:  NONE
(7 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 ORDER BY SN; -- all partitions
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 4
         ->  Partitioned Index Only Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Selected Partitions:  1..4
(6 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Materialize
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Materialize
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN;
 sn 
----
  1
(1 row)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN;
 sn 
----
  1
 11
(2 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 30 ORDER BY SN;
 sn 
----
  1
 11
 21
(3 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN;
 sn 
----
(0 rows)

SELECT SN FROM partition_scan_stu_info1 ORDER BY SN;
 sn 
----
  1
 11
 21
 31
(4 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--BitmapHeapScan test
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = ON;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = OFF;
EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN; --one psrtition: the first
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 1
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn < 10)
                     Selected Partitions:  1
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn < 10)
(11 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN; --more than one partitions
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 2
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn < 20)
                     Selected Partitions:  1..2
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn < 20)
(11 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 30 ORDER BY SN; --one psrtition: the last
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 1
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 30)
                     Selected Partitions:  4
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 30)
(11 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN; -- no partition
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 40)
                     Selected Partitions:  NONE
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 40)
(11 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 ORDER BY SN; -- all partitions
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Partition Iterator
         Iterations: 4
         ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
               Selected Partitions:  1..4
(6 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 40)
                     Selected Partitions:  NONE
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 40)
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                     Recheck Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                           Index Cond: (partition_scan_stu_info1.sn = sn)
(16 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Sort
               Sort Key: partition_scan_stu_info1.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                                 Index Cond: (sn > 40)
         ->  Sort
               Sort Key: partition_scan_stu_info2.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (sn > 40)
(21 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Merge Join
         Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Sort
               Sort Key: partition_scan_stu_info1.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                                 Index Cond: (sn > 40)
         ->  Sort
               Sort Key: partition_scan_stu_info2.sn
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (sn > 40)
(21 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 10 ORDER BY SN;
 sn 
----
  1
(1 row)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 20 ORDER BY SN;
 sn 
----
  1
 11
(2 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN < 30 ORDER BY SN;
 sn 
----
  1
 11
 21
(3 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE SN > 40 ORDER BY SN;
 sn 
----
(0 rows)

SELECT SN FROM partition_scan_stu_info1 ORDER BY SN;
 sn 
----
  1
 11
 21
 31
(4 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--TidScan test
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = ON;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = OFF;
EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE CTID = '(2,1)' ORDER BY SN;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Tid Scan on partition_scan_stu_info1
                     TID Cond: (ctid = '(2,1)'::tid)
                     Selected Partitions:  1..4
(9 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT SN FROM partition_scan_stu_info1 WHERE CTID = '(2,2)' ORDER BY SN;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: sn
   ->  Sort
         Sort Key: sn
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Tid Scan on partition_scan_stu_info1
                     TID Cond: (ctid = '(2,2)'::tid)
                     Selected Partitions:  1..4
(9 rows)

SELECT CTID , * FROM partition_scan_stu_info1 ORDER BY SN;
 ctid  | sn | name 
-------+----+------
 (0,1) |  1 | DFM
 (0,1) | 11 | CHAO
 (0,1) | 21 | ZJR
 (0,1) | 31 | JYH
(4 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE CTID = '(2,1)' ORDER BY SN;
 sn 
----
(0 rows)

SELECT SN FROM partition_scan_stu_info1 WHERE CTID = '(2,2)' ORDER BY SN;
 sn 
----
(0 rows)

-- Disables the planner's use of partitionwisejoin plans
SET ENABLE_PARTITIONWISE = FALSE;
--
----hashjoin + seqscan
--
SET enable_seqscan = ON;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_mergejoin = OFF;
SET enable_hashjoin = ON;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info1
                                 Selected Partitions:  1..4
(15 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Right Join
         Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info2
                     Selected Partitions:  1..4
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
(13 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Filter: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
----hashjoin + indexscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = ON;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_mergejoin = OFF;
SET enable_hashjoin = ON;
--
---- explain cross join
--
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                                 Selected Partitions:  1..4
(15 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
--hashjoin + indexonlyscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = ON;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_mergejoin = OFF;
SET enable_hashjoin = ON;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                                 Selected Partitions:  1..4
(15 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Right Join
         Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Selected Partitions:  1..4
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(13 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
---- hashjoin + bitmapscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = ON;
SET enable_tidscan = OFF;
SET enable_mergejoin = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_hashjoin = ON;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (sn = partition_scan_stu_info1.sn)
                           Selected Partitions:  1..4
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (sn = partition_scan_stu_info1.sn)
(16 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (partition_scan_stu_info1.sn = sn)
                           Selected Partitions:  1..4
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (partition_scan_stu_info1.sn = sn)
(16 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                           Recheck Cond: (sn = partition_scan_stu_info2.sn)
                           Selected Partitions:  1..4
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                                 Index Cond: (sn = partition_scan_stu_info2.sn)
(16 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 40)
                     Selected Partitions:  NONE
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 40)
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                     Recheck Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                           Index Cond: (partition_scan_stu_info1.sn = sn)
(16 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 40)
                     Selected Partitions:  NONE
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 40)
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (sn > 40)
(18 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info1
                     Recheck Cond: (sn > 40)
                     Selected Partitions:  NONE
                     ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info1
                           Index Cond: (sn > 40)
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Bitmap Heap Scan on partition_scan_stu_info2
                           Recheck Cond: (sn > 40)
                           Selected Partitions:  NONE
                           ->  Partitioned Bitmap Index Scan on index_on_partition_scan_stu_info2
                                 Index Cond: (sn > 40)
(18 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
---- hashjoin + tidscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = ON;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = OFF;
SET enable_mergejoin = OFF;
SET enable_hashjoin = ON;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Left Join
               Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                                 Selected Partitions:  1..4
(15 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Right Join
         Hash Cond: (partition_scan_stu_info2.sn = partition_scan_stu_info1.sn)
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Selected Partitions:  1..4
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(13 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Hash Join
         Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Hash
               ->  Partition Iterator
                     Iterations: 0
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn > 40)
                           Selected Partitions:  NONE
(14 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
----nestloop + seqscan
--
SET enable_seqscan = ON;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = ON;
SET enable_mergejoin = OFF;
SET enable_hashjoin = OFF;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop
               Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Selected Partitions:  1..4
(14 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Selected Partitions:  1..4
(14 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
(14 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Hash Full Join
               Hash Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Seq Scan on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Hash
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info2
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info2
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
(13 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         Join Filter: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Seq Scan on partition_scan_stu_info2
                     Filter: (sn > 40)
                     Selected Partitions:  NONE
(13 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
----nestloop + indexscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = ON;
SET enable_indexonlyscan = OFF;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = ON;
SET enable_mergejoin = OFF;
SET enable_hashjoin = OFF;
--
---- explain cross join
--
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn = partition_scan_stu_info1.sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (partition_scan_stu_info1.sn = sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Index Cond: (sn = partition_scan_stu_info2.sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Merge Full Join
               Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Materialize
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: ((sn = partition_scan_stu_info1.sn) AND (sn > 40))
                     Selected Partitions:  NONE
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: ((sn = partition_scan_stu_info1.sn) AND (sn > 40))
                     Selected Partitions:  NONE
(12 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

--
--nestloop + indexonlyscan
--
SET enable_seqscan = OFF;
SET enable_indexscan = OFF;
SET enable_indexonlyscan = ON;
SET enable_bitmapscan = OFF;
SET enable_tidscan = OFF;
SET enable_sort = ON;
SET enable_material = OFF;
SET enable_nestloop = ON;
SET enable_mergejoin = OFF;
SET enable_hashjoin = OFF;
-- explain cross join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Seq Scan on partition_scan_stu_info1
                     Selected Partitions:  1..4
         ->  Materialize
               ->  Streaming(type: BROADCAST)
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Seq Scan on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(12 rows)

-- explain inner join 
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (sn = partition_scan_stu_info1.sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain left outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Index Cond: (partition_scan_stu_info1.sn = sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain right outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Nested Loop Left Join
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                           Selected Partitions:  1..4
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Index Cond: (sn = partition_scan_stu_info2.sn)
                           Selected Partitions:  1..4
(14 rows)

-- explain full outer join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   Merge Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
   ->  Sort
         Sort Key: partition_scan_stu_info1.sn, partition_scan_stu_info1.name
         ->  Merge Full Join
               Merge Cond: (partition_scan_stu_info1.sn = partition_scan_stu_info2.sn)
               ->  Partition Iterator
                     Iterations: 4
                     ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                           Selected Partitions:  1..4
               ->  Materialize
                     ->  Partition Iterator
                           Iterations: 4
                           ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                                 Selected Partitions:  1..4
(15 rows)

-- explain for no partition to join
EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40; 
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop Left Join
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 4
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: (partition_scan_stu_info1.sn = sn)
                     Selected Partitions:  1..4
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: ((sn = partition_scan_stu_info1.sn) AND (sn > 40))
                     Selected Partitions:  NONE
(12 rows)

EXPLAIN (COSTS OFF, NODES OFF) SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Streaming (type: GATHER)
   ->  Nested Loop
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info1 on partition_scan_stu_info1
                     Index Cond: (sn > 40)
                     Selected Partitions:  NONE
         ->  Partition Iterator
               Iterations: 0
               ->  Partitioned Index Scan using index_on_partition_scan_stu_info2 on partition_scan_stu_info2
                     Index Cond: ((sn = partition_scan_stu_info1.sn) AND (sn > 40))
                     Selected Partitions:  NONE
(12 rows)

-- rsult of cross join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 CROSS JOIN partition_scan_stu_info2 order by 1, 2;
 name |    phone    
------+-------------
 CHAO | 15236997586
 CHAO | 15478523126
 CHAO | 15873285556
 CHAO | 15936985364
 DFM  | 15236997586
 DFM  | 15478523126
 DFM  | 15873285556
 DFM  | 15936985364
 JYH  | 15236997586
 JYH  | 15478523126
 JYH  | 15873285556
 JYH  | 15936985364
 ZJR  | 15236997586
 ZJR  | 15478523126
 ZJR  | 15873285556
 ZJR  | 15936985364
(16 rows)

-- rsult of inner joi
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 INNER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of left join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of right join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 RIGHT OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- rsult of FULL join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 FULL OUTER JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) ORDER BY partition_scan_stu_info1.SN, partition_scan_stu_info1.NAME, partition_scan_stu_info1.NAME;
 name |    phone    
------+-------------
 DFM  | 15478523126
 CHAO | 15236997586
 ZJR  | 15936985364
 JYH  | 15873285556
(4 rows)

-- result of no partition to join
SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40;
 name | phone 
------+-------
(0 rows)

SELECT partition_scan_stu_info1.NAME, partition_scan_stu_info2.PHONE FROM partition_scan_stu_info1 LEFT JOIN partition_scan_stu_info2 ON (partition_scan_stu_info1.SN = partition_scan_stu_info2.SN) WHERE partition_scan_stu_info2.SN > 40 AND partition_scan_stu_info1.SN > 40;
 name | phone 
------+-------
(0 rows)

-- clean up
DROP TABLE partition_scan_stu_info1;
DROP TABLE partition_scan_stu_info2;
