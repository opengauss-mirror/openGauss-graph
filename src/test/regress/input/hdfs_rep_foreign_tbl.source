--prepare enviroment
drop server if exists hdfs_server cascade;
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER HDFS_FDW OPTIONS (type 'hdfs', address '@hdfshostname@:@hdfsport@',hdfscfgpath '@hdfscfgpath@');

\! rm -rf @abs_srcdir@/hdfs_rep_foreign_tbl
drop tablespace if exists hdfs_replication_ts;
create tablespace hdfs_replication_ts location '@abs_srcdir@/hdfs_rep_foreign_tbl' with(filesystem="hDfs", cfgpath='@hdfscfgpath@',storepath="/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl");
create tablespace hdfs_replication_ts location '@abs_srcdir@/hdfs_rep_foreign_tbl' with(filesystem="hDfs", cfgpath='@hdfscfgpath@',storepath='/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl');
create schema hdfs_replication_foreign_table_schema;
set current_schema=hdfs_replication_foreign_table_schema;

drop table if exists dfs_tbl;
create table dfs_tbl(a int, b int) tablespace hdfs_replication_ts;
set cstore_insert_mode=main;
insert into dfs_tbl values(12, 13);
insert into dfs_tbl values(14, 15);
select * from dfs_tbl order by 1;

--create replicaiton foreign table
drop foreign table if exists rep_foreign_001;
create foreign table rep_foreign_001(a int, b int) 
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.dfs_tbl')
distribute by replication;

select * from rep_foreign_001 order by 1;
analyze rep_foreign_001;
select relpages,reltuples from pg_class where relname = 'rep_foreign_001';
select starelkind,staattnum,stainherit,stanullfrac,stawidth,stadistinct,stadndistinct
 from pg_statistic sta join pg_class cla on sta.starelid=cla.oid where relname = 'rep_foreign_001' order by staattnum;

create foreign table round_foreign_001(a int, b int) 
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.dfs_tbl')
distribute by roundrobin;

select * from round_foreign_001 order by 1;
analyze round_foreign_001;
select relpages,reltuples from pg_class where relname = 'round_foreign_001';
vacuum analyze round_foreign_001;
select relpages,reltuples from pg_class where relname = 'round_foreign_001';
select starelkind,staattnum,stainherit,stanullfrac,stawidth,stadistinct,stadndistinct
 from pg_statistic sta join pg_class cla on sta.starelid=cla.oid where relname = 'round_foreign_001' order by staattnum;

select * from round_foreign_001 minus all select * from rep_foreign_001;

drop foreign table if exists rep_foreign_001;
drop foreign table if exists round_foreign_001;
drop table dfs_tbl;

--test partition replicatoin foreign table 
drop foreign table if exists part_1_roundrobin; 
create foreign table part_1_roundrobin (a int, b varchar(20), c date)
SERVER hdfs_server OPTIONS(format 'orc', foldername '/user/hive/warehouse/partition.db/part_1')
distribute by roundrobin
partition by (b) automapped;
\d+ part_1_roundrobin
select * from part_1_roundrobin order by 1,2,3;

drop foreign table if exists part_1_replication; 
create foreign table part_1_replication (a int, b varchar(20), c date)
SERVER hdfs_server OPTIONS(format 'orc', foldername '/user/hive/warehouse/partition.db/part_1')
distribute by replication
partition by (b) automapped;
\d+ part_1_replication
select * from part_1_replication order by 1,2,3;

select * from part_1_roundrobin minus all select * from part_1_replication;

drop foreign table if exists part_1_roundrobin;
drop foreign table if exists part_1_replication;


--test distribute by clause
drop foreign table if exists hash_foreign_001;
create foreign table hash_foreign_001(a int, b int) 
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.dfs_tbl')
distribute by hash(b);
drop foreign table if exists customer_for_1;
create foreign table customer_for_1
(
    c_customer_sk integer not null
)
server gsmpp_server
options(location 'gsfs://10.185.240.60:14554/customer.txt', format 'text', mode 'normal', DELIMITER ',',NULL '') distribute by replication;

---join
----prepare phase
drop table if exists normal_temp_tbl;
create table normal_temp_tbl(a int, b int);
insert into normal_temp_tbl values(generate_series(1,50000), generate_series(1,50000));

drop table if exists big_dfs_tbl;
create table big_dfs_tbl(a int, b int) tablespace hdfs_replication_ts;
set cstore_insert_mode=main;
insert into big_dfs_tbl select * from normal_temp_tbl;
drop table if exists normal_temp_tbl;
--big table roundrobin hdfs ----big_hdfs_tbl_rod
drop foreign table if exists big_hdfs_tbl_rod;
create foreign table big_hdfs_tbl_rod(a int, b int)
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.big_dfs_tbl')
distribute by roundrobin;

--big table replication hdfs ----big_hdfs_tbl_rep
drop foreign table if exists big_hdfs_tbl_rep;
create foreign table big_hdfs_tbl_rep(a int, b int)
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.big_dfs_tbl')
distribute by replication;

drop table if exists small_dfs_tbl;
create table small_dfs_tbl(a int, b int) tablespace hdfs_replication_ts;
set cstore_insert_mode=main;

drop table if exists normal_temp_tbl;
create table normal_temp_tbl(a int, b int);
insert into normal_temp_tbl values(generate_series(1,1000), generate_series(1,1000));
insert into small_dfs_tbl select *from normal_temp_tbl;
drop table if exists normal_temp_tbl;

drop foreign table if exists small_hdfs_tbl_rod;
create foreign table small_hdfs_tbl_rod(a int, b int)
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.small_dfs_tbl')
distribute by roundrobin;

drop foreign table if exists small_hdfs_tbl_rep;
create foreign table small_hdfs_tbl_rep(a int, b int)
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/hdfs_replication_foreign_table_schema.small_dfs_tbl')
distribute by replication;

drop table if exists normal_hash_table;
create table normal_hash_table(a int, b int);
insert into normal_hash_table values(generate_series(1,1000), generate_series(1,1000));

drop table if exists normal_rep_table;
create table normal_rep_table(a int, b int) distribute by replication;
insert into normal_rep_table values(generate_series(1,1000), generate_series(1,1000));

--test for analyze sample table
set default_statistics_target=-2;
analyze;
analyze foreign tables;
reset default_statistics_target;

----------------------------------------big table join small table

----test  big rod hdfs join small rep hdfs

explain (verbose, costs off, nodes off) select * from big_hdfs_tbl_rod t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;
----test  big rod hdfs join small round hdfs
explain (verbose, costs off, nodes off) select * from big_hdfs_tbl_rod t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;

----test  big dfs join small dfs
explain (verbose, costs off, nodes off) select * from big_dfs_tbl t1, small_dfs_tbl t2 where t1.b = t2.b;
----test  big dfs join small rep hdfs
explain (verbose, costs off, nodes off) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b;

----------------------------------------small table join small table

----test  small rod hdfs join small rod hdfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;

----test small rod hdfs join small rep hdfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;

----test  small rep hdfs join small rep hdfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rep t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;

----test  small  dfs join small rep hdfs
explain (verbose, costs off, nodes off) select * from small_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;

----test  small  dfs join small dfs
explain (verbose, costs off, nodes off) select * from small_dfs_tbl t1, small_dfs_tbl t2 where t1.a = t2.a;
explain (verbose, costs off, nodes off) select * from small_dfs_tbl t1, small_dfs_tbl t2 where t1.b = t2.b;

------------------------------------

----test  rep hdfs join rod hdfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;

select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rep t2 where t1.a = t2.a minus select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;
----test  rep hdfs join rep hdfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rep t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;
select * from small_hdfs_tbl_rep t1, small_hdfs_tbl_rep t2 where t1.a = t2.a minus select * from small_hdfs_tbl_rod t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;

----test normal hash table join rep hdfs table
explain (verbose, costs off, nodes off) select * from normal_hash_table t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;
select * from normal_hash_table t1, small_hdfs_tbl_rep t2 where t1.a = t2.a minus all select * from normal_hash_table t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;

----test normal rep table join rep hdfs table
explain (verbose, costs off, nodes off) select * from normal_rep_table t1, small_hdfs_tbl_rep t2 where t1.a = t2.a;
select * from normal_rep_table t1, small_hdfs_tbl_rep t2 where t1.a = t2.a minus all select * from normal_rep_table t1, small_hdfs_tbl_rod t2 where t1.a = t2.a;
----teet  rep hdfs join hash dfs
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rep t1, small_dfs_tbl t2 where t1.b = t2.b;
select * from small_hdfs_tbl_rep t1, small_dfs_tbl t2 where t1.b = t2.b minus all select * from small_hdfs_tbl_rod t1, small_dfs_tbl t2 where t1.b = t2.b;

---------------teet  rep hdfs join hash dfs, where joinclause on distribution column.
explain (verbose, costs off, nodes off) select * from normal_rep_table t1, small_dfs_tbl t2 where t1.a = t2.a;
select * from normal_rep_table t1, small_dfs_tbl t2 where t1.a = t2.a minus all select * from small_hdfs_tbl_rod t1, small_dfs_tbl t2 where t1.a = t2.a;
---------------teet  rep hdfs join hash dfs, where joinclause not in distribution column.
explain (verbose, costs off, nodes off) select * from normal_rep_table t1, small_dfs_tbl t2 where t1.b = t2.b;
select * from normal_rep_table t1, small_dfs_tbl t2 where t1.b = t2.b minus all select * from small_hdfs_tbl_rod t1, small_dfs_tbl t2 where t1.b = t2.b;
----multi-tables join

explain (verbose, costs off, nodes off) select * from normal_rep_table t1, normal_hash_table t2, small_hdfs_tbl_rep t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a;

select * from normal_rep_table t1, normal_hash_table t2, small_hdfs_tbl_rep t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a minus all select * from normal_rep_table t1, normal_hash_table t2, small_hdfs_tbl_rod t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a;

explain (verbose, costs off, nodes off) select * from normal_rep_table t1, normal_rep_table t2, small_hdfs_tbl_rep t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a;

select * from normal_rep_table t1, normal_rep_table t2, small_hdfs_tbl_rep t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a minus all select * from normal_rep_table t1, normal_rep_table t2, small_hdfs_tbl_rod t3, small_hdfs_tbl_rod t4
where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a;

explain (verbose, costs off, nodes off) select * from normal_rep_table t1, normal_hash_table t2, small_hdfs_tbl_rep t3, small_hdfs_tbl_rod t4, big_dfs_tbl t5, big_hdfs_tbl_rod t6, big_hdfs_tbl_rep t7 , small_dfs_tbl t8 where t1.a=t2.b and t2.b = t3.a and t3.b = t4.a and t4.b=t5.a and t5.b=t6.a and t6.a= t8.b;

---test subquery
explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1 ,(select * from  small_hdfs_tbl_rep t2 where t2.b <10) as t2  where t1.a = t2.a;
select * from small_hdfs_tbl_rod t1 ,(select * from  small_hdfs_tbl_rep t2 where t2.b <10) as t2  where t1.a = t2.a minus all select * from small_hdfs_tbl_rod t1 ,(select * from  small_hdfs_tbl_rod t2 where t2.b <10) as t2  where t1.a = t2.a;

explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1 where exists (select * from  small_hdfs_tbl_rep t2 where t2.b <10);
select * from small_hdfs_tbl_rod t1 where exists (select * from  small_hdfs_tbl_rep t2 where t2.b <10) minus all select * from small_hdfs_tbl_rod t1 where exists (select * from  small_hdfs_tbl_rod t2 where t2.b <10);

explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1 where t1.b in(select b from  small_hdfs_tbl_rep t2 where t2.b <10);
select * from small_hdfs_tbl_rod t1 where t1.b in(select b from  small_hdfs_tbl_rep t2 where t2.b <10) minus all select * from small_hdfs_tbl_rod t1 where t1.b in(select b from  small_hdfs_tbl_rod t2 where t2.b <10);

explain (verbose, costs off, nodes off) select * from small_hdfs_tbl_rod t1 where t1.b not in  (select b from  small_hdfs_tbl_rep t2 where t2.b <10);
select * from small_hdfs_tbl_rod t1 where t1.b not in  (select b from  small_hdfs_tbl_rep t2 where t2.b <10) minus all select * from small_hdfs_tbl_rod t1 where t1.b not in  (select b from  small_hdfs_tbl_rod t2 where t2.b <10);

--test explain option detail off and json format
\o explain_pretty_format.out
explain (analyze on, costs off, nodes off, timing off) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b;
explain (analyze on, costs off, nodes off, timing off, format json) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b; 
explain (analyze on, detail on, costs off, nodes off, timing off, format xml) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b;
set explain_perf_mode=pretty;
explain (analyze on,  detail on, costs off, nodes off, timing off) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b;
explain (analyze on, costs off, nodes off, timing off) select * from big_dfs_tbl t1, small_hdfs_tbl_rep t2 where t1.b = t2.b; 
reset explain_perf_mode;
\o
\! rm explain_pretty_format.out

-----
drop foreign table if exists hdfs_empty;
create foreign table hdfs_empty(a int, b int)
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/user/hive/warehouse/empty_table')
distribute by replication;
select * from hdfs_empty;

drop schema hdfs_replication_foreign_table_schema cascade;
\d

---test for foreign table
create schema "table_模式1_#@_schema";
set current_schema="table_模式1_#@_schema";
create table dfs_tbl11(a int, b int) tablespace hdfs_replication_ts distribute by hash(a);
set cstore_insert_mode=main;
insert into dfs_tbl11 values(10, 11);
insert into dfs_tbl11 values(12, 13);
select * from dfs_tbl11 order by 1;
--create roundrobin foreign table name with other identifier
create foreign table "rod_foreign_表_#@%_TABLE1"(a int, b int) 
SERVER  hdfs_server 
OPTIONS(format 'orc', foldername '/@hdfsstoreplus@/_ts_hdfs_rep_foreign_tbl/tablespace_secondary/regression/table_模式1_#@_schema.dfs_tbl11')
distribute by roundrobin;
select * from "rod_foreign_表_#@%_TABLE1" order by 1;
analyze "rod_foreign_表_#@%_TABLE1";
select relpages,reltuples from pg_class where relname = 'rod_foreign_表_#@%_TABLE1';
select starelkind,staattnum,stainherit,stanullfrac,stawidth,stadistinct,stadndistinct
 from pg_statistic sta join pg_class cla on sta.starelid=cla.oid where relname = 'rod_foreign_表_#@%_TABLE1' order by staattnum;
analyze foreign tables;
\! @abs_bindir@/gsql -p @portstring@ -d regression -c "analyze foreign tables";
set enable_global_stats=off;
analyze foreign tables;
reset enable_global_stats;
delete from dfs_tbl11;
vacuum full dfs_tbl11;
analyze "rod_foreign_表_#@%_TABLE1";
select relpages,reltuples from pg_class where relname = 'rod_foreign_表_#@%_TABLE1';
select starelkind,staattnum,stainherit,stanullfrac,stawidth,stadistinct,stadndistinct
 from pg_statistic sta join pg_class cla on sta.starelid=cla.oid where relname = 'rod_foreign_表_#@%_TABLE1' order by staattnum;
drop table dfs_tbl11;
drop foreign table if exists "rod_foreign_表_#@%_TABLE1";
drop schema "table_模式1_#@_schema" cascade;

drop SERVER hdfs_server;
drop tablespace hdfs_replication_ts;
\! rm -rf @abs_srcdir@/hdfs_rep_foreign_tbl
