--test excutor result in this text
----first, test foreign scan result
------bulid foreign table
Drop server if exists hdfs_server cascade;
-- CREATE SERVER hdfs_server FOREIGN DATA WRAPPER HDFS_FDW OPTIONS (type 'hdfs', address '10.67.128.30:25000,10.67.128.34:25000',HDFSCFGPATH '/home/hanfeng/FI_client/hadoop_client/HDFS/hadoop/etc/hadoop');
set enable_constraint_optimization = on;
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER 	HDFS_FDW OPTIONS (type 'hdfs', address '@hdfshostname@:@hdfsport@',hdfscfgpath '@hdfscfgpath@');
drop foreign table nation;
create foreign table nation  (
 N_NATIONKEY INT4 ,
 N_NAME TEXT,
 N_REGIONKEY INT4 ,
 N_COMMENT TEXT) 
SERVER hdfs_server
OPTIONS(format 'parquet', foldername '/user/hive/warehouse/mppdb.db/nation_parquet/')
distribute by roundrobin;
--------obtain this result when N_REGIONKEY is not defined informational constraint 
select n_regionkey from nation where n_regionkey = 4 order by n_regionkey;

--------obtain this result when N_REGIONKEY is defined informational constraint 
alter foreign table nation add constraint primary_key_n_regionkey primary key (n_regionkey) not enforced;
----------test, when enable_hdfs_predicate_pushdown is on, enable_vector_engine is off.
set enable_hdfs_predicate_pushdown =on;
set enable_vector_engine = on;
select n_regionkey from nation where n_regionkey = 4 order by n_regionkey;
----------test, when enable_hdfs_predicate_pushdown is on, enable_vector_engine is on.
set enable_hdfs_predicate_pushdown =on;
set enable_vector_engine = off;
select n_regionkey from nation where n_regionkey = 4 order by n_regionkey;
----------test, when enable_hdfs_predicate_pushdown is off, enable_vector_engine is on.
set enable_hdfs_predicate_pushdown =off;
set enable_vector_engine = on;
select n_regionkey from nation where n_regionkey = 4 order by n_regionkey;
----------test, when enable_hdfs_predicate_pushdown is off, enable_vector_engine is off.
set enable_hdfs_predicate_pushdown =off;
set enable_vector_engine = off;
select n_regionkey from nation where n_regionkey = 4 order by n_regionkey;

----second,test join scan
drop foreign table region;
create foreign table region  (
 R_REGIONKEY  int,
 R_NAME TEXT,
 R_COMMENT TEXT
)
SERVER hdfs_server
OPTIONS(format 'parquet', foldername '/user/hive/warehouse/mppdb.db/region_parquet')
distribute by roundrobin;

drop foreign table nation;
create foreign table nation  (
 N_NATIONKEY INT4,
 N_NAME TEXT,
 N_REGIONKEY INT4 ,
 N_COMMENT TEXT) 
SERVER hdfs_server
OPTIONS(format 'parquet', foldername '/user/hive/warehouse/mppdb.db/nation_parquet/')
distribute by roundrobin;

--*************************************
------test inner join
------get the following result when do not using informatinal constraint
select region.r_regionkey from region, nation where region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

-------get the following result when using informational constraint
alter foreign table nation add constraint primary_key_n_regionkey primary key(n_regionkey) not enforced;
---------test nestloop , enable_vector_engine is on.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = on;
select region.r_regionkey from region, nation where region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

---------test nestloop , enable_vector_engine is off.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = off;
select region.r_regionkey from region, nation where region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

--*************************************
------test left join
--------get the following result when do not using informational constraint
alter foreign table nation drop constraint primary_key_n_regionkey ;
select region.r_regionkey from region left join  nation on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
--------get the following result when using informational constraint
alter foreign table nation add constraint primary_key_n_regionkey primary key(n_regionkey) not enforced;
---------test left nestloop , enable_vector_engine is on.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = on;
explain (costs off, nodes off) select region.r_regionkey from region left join  nation on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
select region.r_regionkey from region left join  nation on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

---------test left nestloop , enable_vector_engine is off.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = off;
explain (costs off, nodes off) select region.r_regionkey from region left join  nation on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
select region.r_regionkey from region left join  nation on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

--*************************************
------test right join
--------get the following result when do not using informational constraint
alter foreign table nation drop constraint primary_key_n_regionkey ;
select region.r_regionkey, nation.n_regionkey from nation right join region on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
--------get the following result when using informational constraint
alter foreign table nation add constraint primary_key_n_regionkey primary key(n_regionkey) not enforced;
---------test left nestloop , enable_vector_engine is on.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = on;
explain (costs off, nodes off) select region.r_regionkey from nation right join region on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
select region.r_regionkey, nation.n_regionkey from nation right join region on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
---------test right nestloop , enable_vector_engine is off.
set enable_nestloop = on;
set enable_mergejoin = off;
set enable_hashjoin = off;
set enable_vector_engine = off;
explain (costs off, nodes off) select region.r_regionkey from nation right join region on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;
select region.r_regionkey, nation.n_regionkey from nation right join region on region.r_regionkey = nation.n_regionkey order by region.r_regionkey;

-- third, test NOT IN
set enable_hashjoin = on;
set enable_nestloop = on;
set enable_mergejoin = on;
--------get the following result when do not using informational constraint
alter foreign table nation drop constraint primary_key_n_regionkey ;
set enable_vector_engine = off;
explain (costs off, nodes off) select * from region where R_REGIONKEY not in (select N_REGIONKEY from nation ) order by 1;
set enable_vector_engine = on;
explain (costs off, nodes off) select * from region where R_REGIONKEY not in (select N_REGIONKEY from nation ) order by 1;
--------get the following result when using informational constraint
alter foreign table nation add constraint primary_key_n_regionkey primary key(n_regionkey) not enforced;
alter foreign table region add constraint primary_key_r_regionkey primary key(r_regionkey) not enforced;
set enable_vector_engine = off;
explain (costs off, nodes off) select * from region where R_REGIONKEY not in (select N_REGIONKEY from nation ) order by 1;
set enable_vector_engine = on;
explain (costs off, nodes off) select * from region where R_REGIONKEY not in (select N_REGIONKEY from nation ) order by 1;

--test group by 
---------get the following result when do not using informational constraint
alter foreign table nation drop constraint primary_key_n_regionkey; 
alter foreign table region drop constraint primary_key_r_regionkey;
explain (costs off, nodes off) select region.r_regionkey from region, nation where region.r_regionkey = nation.n_regionkey group by region.r_regionkey order by 1; 
--------get the following result when using informational constraint
alter foreign table region add constraint primary_key_r_regionkey primary key(r_regionkey) not enforced;
------this case will do not optimization
explain (costs off, nodes off) select region.r_regionkey from region, nation where region.r_regionkey = nation.n_regionkey group by region.r_regionkey order by 1; 

--add llt
drop foreign table bool_skip_1;
create foreign table bool_skip_1(i int primary key not enforced, a smallint, b bool, c float4, d decimal(10,5))
server hdfs_server
options(format 'parquet', foldername '/user/hive/warehouse/bool_skip_1_parquet')
distribute by roundrobin;
analyze bool_skip_1;
set enable_hdfs_predicate_pushdown =on;
select * from bool_skip_1 where b is null and i=15000 and i<15020 order by 1,2,3,4,5;

create foreign table tab_query_1 ( 
 c_id1 int,
 c_id2 varchar(2),
 constraint tab_query_1_cons  unique(c_id1) not enforced ENABLE QUERY OPTIMIZATION
 )
server hdfs_server OPTIONS(format 'parquet', foldername '/user/hive/warehouse/tab_query_1_parquet')
distribute by roundrobin;
select c_id1 from tab_query_1 group by c_id1 order by 1;
drop foreign table tab_query_1;

drop server if exists hdfs_server cascade;
set enable_constraint_optimization = off;
