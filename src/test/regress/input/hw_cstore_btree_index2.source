create schema cstore_btree_index2;
set current_schema = cstore_btree_index2;
----
--case 3:  check reserve column
----
CREATE TABLE check_column(id int, tid int);
CREATE TABLE check_column(id int);
ALTER TABLE check_column ADD COLUMN tid int;

CREATE TABLE row_tbl_for_gin_idx(c_id tsvector ,c_d_id tsvector) DISTRIBUTE BY REPLICATION;
CREATE INDEX ginidx_for_rowtbl ON row_tbl_for_gin_idx  USING GIN(c_id,c_d_id) WITH (FASTUPDATE = OFF);

-- test storage parameters for index normal-relation
CREATE TABLE heaptbl_idxstorage ( a int, b int , c int ) with ( orientation = column );
CREATE INDEX idx00_heaptbl_idxstorage ON heaptbl_idxstorage using btree(b) with (max_batchrow = 20000, partial_cluster_rows = 720000, deltarow_threshold = 2000 );
SELECT relam, relkind, reloptions FROM pg_class WHERE relname = 'idx00_heaptbl_idxstorage';
SELECT reloptions FROM pg_class WHERE oid = (SELECT relcudescrelid FROM pg_class WHERE relname = 'idx00_heaptbl_idxstorage');
ALTER INDEX idx00_heaptbl_idxstorage SET (max_batchrow = 40000, partial_cluster_rows = 920000, deltarow_threshold = 4000 );
SELECT relam, relkind, reloptions FROM pg_class WHERE relname = 'idx00_heaptbl_idxstorage';
SELECT reloptions FROM pg_class WHERE oid = (SELECT relcudescrelid FROM pg_class WHERE relname = 'idx00_heaptbl_idxstorage');
-- test storage parameters for index partition-relation
CREATE TABLE parttbl_idxstorage ( a int, b int , c int ) with ( orientation = column ) 
partition by range(b) (partition p1 values less than (10), partition p2 values less than (100));
CREATE INDEX idx00_parttbl_idxstorage ON parttbl_idxstorage using btree(c) local with (max_batchrow = 20000, partial_cluster_rows = 720000, deltarow_threshold = 2000 );
SELECT relam, relkind, reloptions FROM pg_class WHERE relname = 'idx00_parttbl_idxstorage';
SELECT reloptions FROM pg_class WHERE oid in (
  SELECT relcudescrelid from pg_partition where parentid = (SELECT oid FROM pg_class WHERE relname = 'idx00_parttbl_idxstorage') );
ALTER INDEX idx00_parttbl_idxstorage SET (max_batchrow = 40000, partial_cluster_rows = 920000, deltarow_threshold = 4000 );
SELECT relam, relkind, reloptions FROM pg_class WHERE relname = 'idx00_parttbl_idxstorage';
SELECT reloptions FROM pg_class WHERE oid in (
  SELECT relcudescrelid from pg_partition where parentid = (SELECT oid FROM pg_class WHERE relname = 'idx00_parttbl_idxstorage') );

-- test: fill vector batch by switching to different CUs
CREATE TABLE coltbl ( a int, b int ) WITH ( ORIENTATION = COLUMN );
CREATE TABLE rowtbl ( a int, b int );
INSERT INTO rowtbl VALUES ( 1, 1) , (1, 2); 
INSERT INTO coltbl SELECT * FROM rowtbl; 
TRUNCATE TABLE rowtbl;
INSERT INTO rowtbl VALUES ( 1, 3) , (1, 4);
INSERT INTO coltbl SELECT * FROM rowtbl;
TRUNCATE TABLE rowtbl;
INSERT INTO rowtbl VALUES ( 1, 5) , (1, 6);
INSERT INTO coltbl SELECT * FROM rowtbl;
CREATE INDEX idx_coltbl ON coltbl using btree(b);
SELECT * FROM coltbl WHERE b < 6 order by 1, 2;
DROP TABLE coltbl;
DROP TABLE rowtbl;

-- index scan: constant target list
create table test_index_const_targetlist (id int,info int,info1 int) with(orientation=column);
create index idx1_test_index_const_targetlist on test_index_const_targetlist using btree(info);
create index idx2_test_index_const_targetlist on test_index_const_targetlist using btree(info1);
insert into test_index_const_targetlist values(generate_series(1,10),generate_series(1,10), 1);
update test_index_const_targetlist set info=info+1 where info>5;
select 1 from test_index_const_targetlist where  info1=1 ;
DROP TABLE test_index_const_targetlist;

-- create psort index in schema
CREATE SCHEMA psort_schema;
create table psort_schema.psort_base_tab (
                col_tinyint                  tinyint,
                col_smallint         smallint,
                col_int                      integer,
                col_bigint                   bigint,
                col_numeric                  numeric,
                col_real                     real,
                col_double                   double precision,
                col_decimal          decimal,
                col_varchar          varchar,
                col_char                     char(30),
                col_nvarchar2        nvarchar2,
                col_text                     text,
                col_timestamptz          timestamp with time zone,
                col_timestamp            timestamp without time zone,
                col_date                     date,
                col_time                     time without time zone,
                col_timetz                   time with time zone,
                col_interval         interval,
                col_smalldatetine        smalldatetime,partial cluster key(col_timestamp)
) with (orientation=column) distribute by hash(col_int)
partition by range (col_int)
(
partition vector_base_tab_000_1 values less than (10),
partition vector_base_tab_000_2 values less than (30),
partition vector_base_tab_000_3 values less than (137),
partition vector_base_tab_000_4 values less than (273),
partition vector_base_tab_000_5 values less than (357),
partition vector_base_tab_000_6 values less than (433),
partition vector_base_tab_000_7 values less than (587),
partition vector_base_tab_000_8 values less than (687),
partition vector_base_tab_000_9 values less than (787),
partition vector_base_tab_000_10 values less than (1087),
partition vector_base_tab_000_11 values less than (1110),
partition vector_base_tab_000_12 values less than (1200),
partition vector_base_tab_000_13 values less than (1337),
partition vector_base_tab_000_14 values less than (1473),
partition vector_base_tab_000_15 values less than (1557),
partition vector_base_tab_000_16 values less than (1633),
partition vector_base_tab_000_17 values less than (1787),
partition vector_base_tab_000_18 values less than (1887),
partition vector_base_tab_000_19 values less than (1987),
partition vector_base_tab_000_20 values less than (2087),
partition vector_base_tab_000_21 values less than (2110),
partition vector_base_tab_000_22 values less than (2277),
partition vector_base_tab_000_23 values less than (2337),
partition vector_base_tab_000_24 values less than (2473),
partition vector_base_tab_000_25 values less than (2557),
partition vector_base_tab_000_26 values less than (2633),
partition vector_base_tab_000_27 values less than (2787),
partition vector_base_tab_000_28 values less than (2887),
partition vector_base_tab_000_29 values less than (2987),
partition vector_base_tab_000_30 values less than (3187),
partition vector_base_tab_000_31 values less than (3287),
partition vector_base_tab_000_32 values less than (3387),
partition vector_base_tab_000_33 values less than (3488),
partition vector_base_tab_000_34 values less than (3566),
partition vector_base_tab_000_35 values less than (3689),
partition vector_base_tab_000_36 values less than (3785),
partition vector_base_tab_000_37 values less than (3887),
partition vector_base_tab_000_38 values less than (3987),
partition vector_base_tab_000_39 values less than (maxvalue)
);
create table psort_base_tab (
                col_tinyint                  tinyint,
                col_smallint         smallint,
                col_int                      integer,
                col_bigint                   bigint,
                col_numeric                  numeric,
                col_real                     real,
                col_double                   double precision,
                col_decimal          decimal,
                col_varchar          varchar,
                col_char                     char(30),
                col_nvarchar2        nvarchar2,
                col_text                     text,
                col_timestamptz          timestamp with time zone,
                col_timestamp            timestamp without time zone,
                col_date                     date,
                col_time                     time without time zone,
                col_timetz                   time with time zone,
                col_interval         interval,
                col_smalldatetine        smalldatetime,partial cluster key(col_timestamp)
) with (orientation=column) distribute by hash(col_int)
partition by range (col_int)
(
partition vector_base_tab_000_1 values less than (10),
partition vector_base_tab_000_2 values less than (30),
partition vector_base_tab_000_3 values less than (137),
partition vector_base_tab_000_4 values less than (273),
partition vector_base_tab_000_5 values less than (357),
partition vector_base_tab_000_6 values less than (433),
partition vector_base_tab_000_7 values less than (587),
partition vector_base_tab_000_8 values less than (687),
partition vector_base_tab_000_9 values less than (787),
partition vector_base_tab_000_10 values less than (1087),
partition vector_base_tab_000_11 values less than (1110),
partition vector_base_tab_000_12 values less than (1200),
partition vector_base_tab_000_13 values less than (1337),
partition vector_base_tab_000_14 values less than (1473),
partition vector_base_tab_000_15 values less than (1557),
partition vector_base_tab_000_16 values less than (1633),
partition vector_base_tab_000_17 values less than (1787),
partition vector_base_tab_000_18 values less than (1887),
partition vector_base_tab_000_19 values less than (1987),
partition vector_base_tab_000_20 values less than (2087),
partition vector_base_tab_000_21 values less than (2110),
partition vector_base_tab_000_22 values less than (2277),
partition vector_base_tab_000_23 values less than (2337),
partition vector_base_tab_000_24 values less than (2473),
partition vector_base_tab_000_25 values less than (2557),
partition vector_base_tab_000_26 values less than (2633),
partition vector_base_tab_000_27 values less than (2787),
partition vector_base_tab_000_28 values less than (2887),
partition vector_base_tab_000_29 values less than (2987),
partition vector_base_tab_000_30 values less than (3187),
partition vector_base_tab_000_31 values less than (3287),
partition vector_base_tab_000_32 values less than (3387),
partition vector_base_tab_000_33 values less than (3488),
partition vector_base_tab_000_34 values less than (3566),
partition vector_base_tab_000_35 values less than (3689),
partition vector_base_tab_000_36 values less than (3785),
partition vector_base_tab_000_37 values less than (3887),
partition vector_base_tab_000_38 values less than (3987),
partition vector_base_tab_000_39 values less than (maxvalue)
);
create index psort_base_tab_index_0001 on psort_schema.psort_base_tab using btree(col_smallint,col_int,col_char,col_text,col_timestamp,col_date) local;
create index psort_base_tab_index_0001 on psort_base_tab using btree(col_smallint,col_int,col_char,col_text,col_timestamp,col_date) local;
drop table psort_schema.psort_base_tab;
drop table psort_base_tab;

----
-- create index in tablespace
----
create table psort_schema.cstore_col_part (id int, cu int, num int, num1 int) with (orientation = column) distribute by hash(id)
partition by range (num1)
(
	partition p1  values less than (1000),
	partition p2  values less than (2000),
	partition p3  values less than (3000),
	partition p4  values less than (4000),
	partition p5  values less than (5000),
	partition p6  values less than (maxvalue)
);
create table psort_schema.cstore_row (id int, cu int, num int, num1 int) distribute by hash(id);
insert into psort_schema.cstore_row values(1, 1, generate_series(1, 5000), generate_series(1, 5000));
insert into psort_schema.cstore_col_part select * from psort_schema.cstore_row;
create tablespace psort_ts location '@testtablespace@/psort_ts' maxsize '256k';
create index on psort_schema.cstore_col_part using btree(num) local tablespace psort_ts;
drop tablespace psort_ts;
create tablespace psort_ts location '@testtablespace@/psort_ts';
start transaction;
create index on psort_schema.cstore_col_part using btree(num) local tablespace psort_ts;
rollback;
drop tablespace psort_ts;
drop table psort_schema.cstore_col_part;

----
-- CStoreIndexScan and output XMIN
----
insert into psort_schema.cstore_row values(1, 2, generate_series(1, 5000), generate_series(1, 5000));
insert into psort_schema.cstore_row values(1, 3, generate_series(1, 5000), generate_series(1, 5000));
insert into psort_schema.cstore_row values(1, 4, generate_series(1, 5000), generate_series(1, 5000));
insert into psort_schema.cstore_row values(1, 5, generate_series(1, 5000), generate_series(1, 5000));

create table psort_schema.cstore_col (id int, cu int, num int, num1 int) with (orientation = column) distribute by hash(id);
insert into psort_schema.cstore_col select * from psort_schema.cstore_row where cu = 1;
insert into psort_schema.cstore_col select * from psort_schema.cstore_row where cu = 2;
insert into psort_schema.cstore_col select * from psort_schema.cstore_row where cu = 3;
insert into psort_schema.cstore_col select * from psort_schema.cstore_row where cu = 4;
insert into psort_schema.cstore_col select * from psort_schema.cstore_row where cu = 5;

create index on psort_schema.cstore_col using btree(num);
create index on psort_schema.cstore_col using btree(num1);

analyze psort_schema.cstore_col;
select count(xmin) from psort_schema.cstore_col where num = 100;
select count(xmin) from psort_schema.cstore_col where num = 200 and num1 = 200;

drop table psort_schema.cstore_row;
drop table psort_schema.cstore_col;

DROP SCHEMA psort_schema CASCADE;
drop schema cstore_btree_index2 cascade;
