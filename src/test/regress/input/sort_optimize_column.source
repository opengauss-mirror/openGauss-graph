--Column sort, sortagg, merge join

drop schema if exists column_sort cascade;
create schema column_sort;

--Create Table
create table column_sort.test_sort_1(id int, num1 numeric, num2 decimal, str1 char(8), str2 char(8), str3 varchar(8), str4 varchar(8), str5 bytea, str6 bytea) with(orientation=column);

--Insert Data
COPY column_sort.test_sort_1 FROM '@abs_srcdir@/data/sort_optimize.data' delimiter ',';

--Sortagg
set enable_hashagg=off;

-- numeric
select count(distinct(id)) as num from column_sort.test_sort_1 group by num1 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by num2 order by num limit 10; 

-- text
select count(distinct(id)) as num from column_sort.test_sort_1 group by str1 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by str2 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by str3 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by str4 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by str5 order by num limit 10; 
select count(distinct(id)) as num from column_sort.test_sort_1 group by str6 order by num limit 10;

CREATE TABLE column_sort.test_sort_2(COL_NAME varchar2(20), COL_POPU char(5)) with(orientation=column);
INSERT INTO column_sort.test_sort_2 VALUES('num_1','chart');
INSERT INTO column_sort.test_sort_2 VALUES('num_2','ch');
INSERT INTO column_sort.test_sort_2 VALUES('num_3','Infin');
INSERT INTO column_sort.test_sort_2 VALUES('num_3','-Infi');
INSERT INTO column_sort.test_sort_2 VALUES('num_5',' ');

SELECT COL_POPU,length(COL_POPU),
CASE COL_POPU
WHEN 'chart' THEN 'man'
WHEN cast('-Infinity' AS char(5)) THEN '-Infinity be cut'
WHEN cast('Infinity' AS char(5)) THEN 'Infinity be cut'
WHEN ' ' THEN 'space'
ELSE 'others'
END AS CASE_CHAR
FROM column_sort.test_sort_2 ORDER BY COL_POPU,CASE_CHAR;

reset enable_hashagg;
--drop schema
drop schema if exists column_sort cascade;
