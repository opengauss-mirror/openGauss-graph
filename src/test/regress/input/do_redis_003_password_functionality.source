--To test password functionality

--prepare data
drop table if exists tb1;
drop table if exists tb2;
drop table if exists tb3;
drop table if exists tb4;

CREATE TABLE tb1 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
CREATE TABLE tb2 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
insert into tb1 values (generate_series(1,2000), 'a');
insert into tb2 values (generate_series(1,1000), 'a');

insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb1 select * from tb1;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
insert into tb2 select * from tb2;
select count(1) from tb1;
select count(1) from tb2;

CREATE TABLE tb3 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
CREATE TABLE tb4 (id int, name varchar(24)) DISTRIBUTE BY HASH(id);
insert into tb3 values (generate_series(1,2000), 'b');
insert into tb4 values (generate_series(1,2000), 'b');

insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb3 select * from tb3;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
insert into tb4 select * from tb4;
select count(1) from tb3;
select count(1) from tb4;

---add node
\! python @abs_srcdir@/addnode.py -t addnode -s @abs_srcdir@ -b @abs_bindir@ -g new_group_009 -n 2
---select to verify
update pgxc_group set is_installation = true where group_name = 'new_group_009';
update pgxc_group set is_installation = false where group_name = 'new_group_008';
update pgxc_group set in_redistribution = 'n' where group_name = 'new_group_009';
update pgxc_group set in_redistribution = 'y' where group_name = 'new_group_008';
select group_name,in_redistribution, is_installation from pgxc_group order by group_name;

--check group information before redistribution, please note that the group names may be subject to changes when taking into consideration the sequence of test cases
--for now, the naming convention for group names is as 'group1', 'new_group_001', 'new_group_002' and so on
--expected table number 4 (please note that this number may be--actually it has already be--affected by former test cases due to the residual tables from them!)
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_008' order by relname;
--expected table number 0
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_009' order by relname;

--prepare database user "redisuser" with password "Gauss_234" for redistribution 
CREATE USER redisuser password 'Gauss_234'; 

--grant sysadmin to redisuser
GRANT ALL PRIVILEGE TO redisuser;

---do redistribution by redisuser
\! source @abs_srcdir@/tmp_check/redis_envir_opt && gs_redis -r -t 10000 -f -u redisuser -W Gauss_234 -d regression -c -p $PGPORT 2>>@abs_srcdir@/tmp_check/passwdfunctioncheck.log ; echo $?---do redistribute

--verify all the tables are successfully redistributed
--expected group number 0
select count(1) from pgxc_group where group_name = 'new_group_008';
--expected table number 0
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_008' order by relname;
--expected table number 5
select c.relname, x.pgroup from pg_class c, pgxc_class x where c.oid = x.pcrelid and x.pgroup = 'new_group_009' order by relname;

--end of test
\c regression
\d+ redis_status;
\d+ redis_progress_detail;
DROP TABLE IF EXISTS redis_status CASCADE;
DROP TABLE IF EXISTS redis_progress_detail CASCADE;
\d+ redis_status;
\d+ redis_progress_detail;
